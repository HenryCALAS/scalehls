name: Nightly Integration Test
on: [push, pull_request]
# on:
#   workflow_dispatch:
#   schedule:
#     - cron: 0 12 * * *
jobs:
  build-scalehls:
    name: Nightly Integration Test
    runs-on: ubuntu-latest
    env:
      torch-mlir-hash: ea371a9bf2860cf5f0741b28b0bf68e9a9c3d08b

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Get ScaleHLS
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Python Depends
        run: |
          python -m pip install -r \
            ./polygeist/llvm-project/mlir/python/requirements.txt
          python -m pip install --pre torch torchvision -f \
            https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html

      - name: Install Ninja
        uses: llvm/actions/install-ninja@55d844821959226fab4911f96f37071c1d4c3268

      - name: Get Torch-MLIR
        run: |
          git clone https://github.com/llvm/torch-mlir
          cd torch-mlir
          git checkout ${{ env.torch-mlir-hash }}
          git submodule update --init

      - name: Cache Torch-MLIR
        id: cache-torch-mlir
        uses: actions/cache@v2
        with:
          path: torch-mlir/build
          key: ${{ runner.os }}-torch-mlir-${{ env.torch-mlir-hash }}

      - name: Rebuild and Test Torch-MLIR
        if: steps.cache-torch-mlir.outputs.cache-hit != 'true'
        run: |
          mkdir -p torch-mlir/build
          cd torch-mlir/build
          cmake ../external/llvm-project/llvm -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DPython3_EXECUTABLE=$(which python) \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_EXTERNAL_PROJECTS="torch-mlir;torch-mlir-dialects" \
            -DLLVM_EXTERNAL_TORCH_MLIR_SOURCE_DIR="$PWD/.." \
            -DLLVM_EXTERNAL_TORCH_MLIR_DIALECTS_SOURCE_DIR="$PWD/../external/llvm-external-projects/torch-mlir-dialects" \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DLLVM_TARGETS_TO_BUILD=host \
            -DLLVM_USE_LINKER=lld \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++
          ninja check-torch-mlir-all

      # - name: Build ScaleHLS (Assert)
      #   run: |
      #     mkdir -p build
      #     cd build
      #     cmake ../polygeist/llvm-project/llvm -GNinja \
      #       -DLLVM_ENABLE_PROJECTS="mlir;clang" \
      #       -DLLVM_EXTERNAL_PROJECTS="scalehls" \
      #       -DLLVM_EXTERNAL_SCALEHLS_SOURCE_DIR="$PWD/.." \
      #       -DLLVM_TARGETS_TO_BUILD="host" \
      #       -DLLVM_ENABLE_ASSERTIONS=ON \
      #       -DCMAKE_BUILD_TYPE=DEBUG \
      #       -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
      #       -DSCALEHLS_ENABLE_BINDINGS_PYTHON=ON \
      #       -DLLVM_USE_LINKER=lld \
      #       -DCMAKE_C_COMPILER=clang \
      #       -DCMAKE_CXX_COMPILER=clang++
      #     ninja

      # - name: Get Polygeist Hash
      #   id: get-polygeist-hash
      #   run: echo "::set-output name=hash::$(git rev-parse @:./polygeist)"

      # - name: Cache Polygeist
      #   id: cache-polygeist
      #   uses: actions/cache@v2
      #   with:
      #     path: polygeist/build
      #     key: ${{ runner.os }}-polygeist-${{ steps.get-polygeist-hash.outputs.hash }}

      # - name: Rebuild and Test Polygeist
      #   if: steps.cache-polygeist.outputs.cache-hit != 'true'
      #   run: |
      #     mkdir -p polygeist/build
      #     cd polygeist/build
      #     cmake .. -GNinja \
      #       -DMLIR_DIR="$PWD/../../build/lib/cmake/mlir" \
      #       -DCLANG_DIR="$PWD/../../build/lib/cmake/clang" \
      #       -DCMAKE_BUILD_TYPE=RELEASE \
      #       -DLLVM_USE_LINKER=lld \
      #       -DCMAKE_C_COMPILER=clang \
      #       -DCMAKE_CXX_COMPILER=clang++
      #     ninja check-mlir-clang

      # - name: Test ScaleHLS
      #   run: |
      #     cd build
      #     ninja check-scalehls
      #     export PYTHONPATH="$PWD/../torch-mlir/build/tools/torch-mlir/python_packages/torch_mlir"
      #     export PYTHONPATH="$PWD/tools/scalehls/python_packages/scalehls_core"
