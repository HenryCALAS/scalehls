
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=3873, interval=3873
/// DSP=234, BRAM=0
void kernel_2mm(
  float v0,
  float v1,
  float v2[40][50],
  float v3[40][70],
  float v4[70][50],
  float v5[50][80],
  float v6[40][80]
) {	// L4, [0,3873)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface s_axilite port=v1 bundle=ctrl
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5
  #pragma HLS interface bram port=v6

  #pragma HLS array_partition variable=v2 cyclic factor=5 dim=1
  #pragma HLS array_partition variable=v2 cyclic factor=5 dim=2
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=5 dim=1
  #pragma HLS array_partition variable=v5 cyclic factor=5 dim=2
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  #pragma HLS array_partition variable=v6 cyclic factor=5 dim=1
  #pragma HLS array_partition variable=v6 cyclic factor=5 dim=2
  #pragma HLS resource variable=v6 core=ram_s2p_bram

  for (int v7 = 0; v7 < 10; v7 += 1) {	// L5, [0,3871), iterCycle=32, II=3
    for (int v8 = 0; v8 < 8; v8 += 1) {	// L6, [0,415), iterCycle=32, II=3
      for (int v9 = 0; v9 < 16; v9 += 1) {	// L7, [0,79), iterCycle=32, II=3
        #pragma HLS pipeline II=3
        float v10 = v6[(v8 * 5)][(v9 * 5)];	// L8, [0,2)
        float v11 = v10 * v1;	// L9, [2,6)
        float v12 = v2[(v8 * 5)][(v7 * 5)];	// L10, [0,2)
        float v13 = v5[(v7 * 5)][(v9 * 5)];	// L11, [0,2)
        float v14 = v12 * v13;	// L12, [2,6)
        float v15;
        if ((v7 * 5) == 0) {	// L13, [6,6)
          v15 = v11;	// L14, [6,6)
        } else {
          v15 = v10;	// L16, [6,6)
        }
        float v16 = v15 + v14;	// L18, [6,11)
        float v17 = v6[(v8 * 5)][((v9 * 5) + 1)];	// L19, [0,2)
        float v18 = v17 * v1;	// L20, [2,6)
        float v19 = v5[(v7 * 5)][((v9 * 5) + 1)];	// L21, [0,2)
        float v20 = v12 * v19;	// L22, [2,6)
        float v21;
        if ((v7 * 5) == 0) {	// L23, [6,6)
          v21 = v18;	// L24, [6,6)
        } else {
          v21 = v17;	// L26, [6,6)
        }
        float v22 = v21 + v20;	// L28, [6,11)
        float v23 = v6[(v8 * 5)][((v9 * 5) + 2)];	// L29, [0,2)
        float v24 = v23 * v1;	// L30, [2,6)
        float v25 = v5[(v7 * 5)][((v9 * 5) + 2)];	// L31, [0,2)
        float v26 = v12 * v25;	// L32, [2,6)
        float v27;
        if ((v7 * 5) == 0) {	// L33, [6,6)
          v27 = v24;	// L34, [6,6)
        } else {
          v27 = v23;	// L36, [6,6)
        }
        float v28 = v27 + v26;	// L38, [6,11)
        float v29 = v6[(v8 * 5)][((v9 * 5) + 3)];	// L39, [0,2)
        float v30 = v29 * v1;	// L40, [2,6)
        float v31 = v5[(v7 * 5)][((v9 * 5) + 3)];	// L41, [0,2)
        float v32 = v12 * v31;	// L42, [2,6)
        float v33;
        if ((v7 * 5) == 0) {	// L43, [6,6)
          v33 = v30;	// L44, [6,6)
        } else {
          v33 = v29;	// L46, [6,6)
        }
        float v34 = v33 + v32;	// L48, [6,11)
        float v35 = v6[(v8 * 5)][((v9 * 5) + 4)];	// L49, [0,2)
        float v36 = v35 * v1;	// L50, [2,6)
        float v37 = v5[(v7 * 5)][((v9 * 5) + 4)];	// L51, [0,2)
        float v38 = v12 * v37;	// L52, [2,6)
        float v39;
        if ((v7 * 5) == 0) {	// L53, [6,6)
          v39 = v36;	// L54, [6,6)
        } else {
          v39 = v35;	// L56, [6,6)
        }
        float v40 = v39 + v38;	// L58, [6,11)
        float v41 = v6[((v8 * 5) + 1)][(v9 * 5)];	// L59, [0,2)
        float v42 = v41 * v1;	// L60, [2,6)
        float v43 = v2[((v8 * 5) + 1)][(v7 * 5)];	// L61, [0,2)
        float v44 = v43 * v13;	// L62, [2,6)
        float v45;
        if ((v7 * 5) == 0) {	// L63, [6,6)
          v45 = v42;	// L64, [6,6)
        } else {
          v45 = v41;	// L66, [6,6)
        }
        float v46 = v45 + v44;	// L68, [6,11)
        float v47 = v6[((v8 * 5) + 1)][((v9 * 5) + 1)];	// L69, [0,2)
        float v48 = v47 * v1;	// L70, [2,6)
        float v49 = v43 * v19;	// L71, [2,6)
        float v50;
        if ((v7 * 5) == 0) {	// L72, [6,6)
          v50 = v48;	// L73, [6,6)
        } else {
          v50 = v47;	// L75, [6,6)
        }
        float v51 = v50 + v49;	// L77, [6,11)
        float v52 = v6[((v8 * 5) + 1)][((v9 * 5) + 2)];	// L78, [0,2)
        float v53 = v52 * v1;	// L79, [2,6)
        float v54 = v43 * v25;	// L80, [2,6)
        float v55;
        if ((v7 * 5) == 0) {	// L81, [6,6)
          v55 = v53;	// L82, [6,6)
        } else {
          v55 = v52;	// L84, [6,6)
        }
        float v56 = v55 + v54;	// L86, [6,11)
        float v57 = v6[((v8 * 5) + 1)][((v9 * 5) + 3)];	// L87, [0,2)
        float v58 = v57 * v1;	// L88, [2,6)
        float v59 = v43 * v31;	// L89, [2,6)
        float v60;
        if ((v7 * 5) == 0) {	// L90, [6,6)
          v60 = v58;	// L91, [6,6)
        } else {
          v60 = v57;	// L93, [6,6)
        }
        float v61 = v60 + v59;	// L95, [6,11)
        float v62 = v6[((v8 * 5) + 1)][((v9 * 5) + 4)];	// L96, [0,2)
        float v63 = v62 * v1;	// L97, [2,6)
        float v64 = v43 * v37;	// L98, [2,6)
        float v65;
        if ((v7 * 5) == 0) {	// L99, [6,6)
          v65 = v63;	// L100, [6,6)
        } else {
          v65 = v62;	// L102, [6,6)
        }
        float v66 = v65 + v64;	// L104, [6,11)
        float v67 = v6[((v8 * 5) + 2)][(v9 * 5)];	// L105, [0,2)
        float v68 = v67 * v1;	// L106, [2,6)
        float v69 = v2[((v8 * 5) + 2)][(v7 * 5)];	// L107, [0,2)
        float v70 = v69 * v13;	// L108, [2,6)
        float v71;
        if ((v7 * 5) == 0) {	// L109, [6,6)
          v71 = v68;	// L110, [6,6)
        } else {
          v71 = v67;	// L112, [6,6)
        }
        float v72 = v71 + v70;	// L114, [6,11)
        float v73 = v6[((v8 * 5) + 2)][((v9 * 5) + 1)];	// L115, [0,2)
        float v74 = v73 * v1;	// L116, [2,6)
        float v75 = v69 * v19;	// L117, [2,6)
        float v76;
        if ((v7 * 5) == 0) {	// L118, [6,6)
          v76 = v74;	// L119, [6,6)
        } else {
          v76 = v73;	// L121, [6,6)
        }
        float v77 = v76 + v75;	// L123, [6,11)
        float v78 = v6[((v8 * 5) + 2)][((v9 * 5) + 2)];	// L124, [0,2)
        float v79 = v78 * v1;	// L125, [2,6)
        float v80 = v69 * v25;	// L126, [2,6)
        float v81;
        if ((v7 * 5) == 0) {	// L127, [6,6)
          v81 = v79;	// L128, [6,6)
        } else {
          v81 = v78;	// L130, [6,6)
        }
        float v82 = v81 + v80;	// L132, [6,11)
        float v83 = v6[((v8 * 5) + 2)][((v9 * 5) + 3)];	// L133, [0,2)
        float v84 = v83 * v1;	// L134, [2,6)
        float v85 = v69 * v31;	// L135, [2,6)
        float v86;
        if ((v7 * 5) == 0) {	// L136, [6,6)
          v86 = v84;	// L137, [6,6)
        } else {
          v86 = v83;	// L139, [6,6)
        }
        float v87 = v86 + v85;	// L141, [6,11)
        float v88 = v6[((v8 * 5) + 2)][((v9 * 5) + 4)];	// L142, [0,2)
        float v89 = v88 * v1;	// L143, [2,6)
        float v90 = v69 * v37;	// L144, [2,6)
        float v91;
        if ((v7 * 5) == 0) {	// L145, [6,6)
          v91 = v89;	// L146, [6,6)
        } else {
          v91 = v88;	// L148, [6,6)
        }
        float v92 = v91 + v90;	// L150, [6,11)
        float v93 = v6[((v8 * 5) + 3)][(v9 * 5)];	// L151, [0,2)
        float v94 = v93 * v1;	// L152, [2,6)
        float v95 = v2[((v8 * 5) + 3)][(v7 * 5)];	// L153, [0,2)
        float v96 = v95 * v13;	// L154, [2,6)
        float v97;
        if ((v7 * 5) == 0) {	// L155, [6,6)
          v97 = v94;	// L156, [6,6)
        } else {
          v97 = v93;	// L158, [6,6)
        }
        float v98 = v97 + v96;	// L160, [6,11)
        float v99 = v6[((v8 * 5) + 3)][((v9 * 5) + 1)];	// L161, [0,2)
        float v100 = v99 * v1;	// L162, [2,6)
        float v101 = v95 * v19;	// L163, [2,6)
        float v102;
        if ((v7 * 5) == 0) {	// L164, [6,6)
          v102 = v100;	// L165, [6,6)
        } else {
          v102 = v99;	// L167, [6,6)
        }
        float v103 = v102 + v101;	// L169, [6,11)
        float v104 = v6[((v8 * 5) + 3)][((v9 * 5) + 2)];	// L170, [0,2)
        float v105 = v104 * v1;	// L171, [2,6)
        float v106 = v95 * v25;	// L172, [2,6)
        float v107;
        if ((v7 * 5) == 0) {	// L173, [6,6)
          v107 = v105;	// L174, [6,6)
        } else {
          v107 = v104;	// L176, [6,6)
        }
        float v108 = v107 + v106;	// L178, [6,11)
        float v109 = v6[((v8 * 5) + 3)][((v9 * 5) + 3)];	// L179, [0,2)
        float v110 = v109 * v1;	// L180, [2,6)
        float v111 = v95 * v31;	// L181, [2,6)
        float v112;
        if ((v7 * 5) == 0) {	// L182, [6,6)
          v112 = v110;	// L183, [6,6)
        } else {
          v112 = v109;	// L185, [6,6)
        }
        float v113 = v112 + v111;	// L187, [6,11)
        float v114 = v6[((v8 * 5) + 3)][((v9 * 5) + 4)];	// L188, [0,2)
        float v115 = v114 * v1;	// L189, [2,6)
        float v116 = v95 * v37;	// L190, [2,6)
        float v117;
        if ((v7 * 5) == 0) {	// L191, [6,6)
          v117 = v115;	// L192, [6,6)
        } else {
          v117 = v114;	// L194, [6,6)
        }
        float v118 = v117 + v116;	// L196, [6,11)
        float v119 = v6[((v8 * 5) + 4)][(v9 * 5)];	// L197, [0,2)
        float v120 = v119 * v1;	// L198, [2,6)
        float v121 = v2[((v8 * 5) + 4)][(v7 * 5)];	// L199, [0,2)
        float v122 = v121 * v13;	// L200, [2,6)
        float v123;
        if ((v7 * 5) == 0) {	// L201, [6,6)
          v123 = v120;	// L202, [6,6)
        } else {
          v123 = v119;	// L204, [6,6)
        }
        float v124 = v123 + v122;	// L206, [6,11)
        float v125 = v6[((v8 * 5) + 4)][((v9 * 5) + 1)];	// L207, [0,2)
        float v126 = v125 * v1;	// L208, [2,6)
        float v127 = v121 * v19;	// L209, [2,6)
        float v128;
        if ((v7 * 5) == 0) {	// L210, [6,6)
          v128 = v126;	// L211, [6,6)
        } else {
          v128 = v125;	// L213, [6,6)
        }
        float v129 = v128 + v127;	// L215, [6,11)
        float v130 = v6[((v8 * 5) + 4)][((v9 * 5) + 2)];	// L216, [0,2)
        float v131 = v130 * v1;	// L217, [2,6)
        float v132 = v121 * v25;	// L218, [2,6)
        float v133;
        if ((v7 * 5) == 0) {	// L219, [6,6)
          v133 = v131;	// L220, [6,6)
        } else {
          v133 = v130;	// L222, [6,6)
        }
        float v134 = v133 + v132;	// L224, [6,11)
        float v135 = v6[((v8 * 5) + 4)][((v9 * 5) + 3)];	// L225, [0,2)
        float v136 = v135 * v1;	// L226, [2,6)
        float v137 = v121 * v31;	// L227, [2,6)
        float v138;
        if ((v7 * 5) == 0) {	// L228, [6,6)
          v138 = v136;	// L229, [6,6)
        } else {
          v138 = v135;	// L231, [6,6)
        }
        float v139 = v138 + v137;	// L233, [6,11)
        float v140 = v6[((v8 * 5) + 4)][((v9 * 5) + 4)];	// L234, [0,2)
        float v141 = v140 * v1;	// L235, [2,6)
        float v142 = v121 * v37;	// L236, [2,6)
        float v143;
        if ((v7 * 5) == 0) {	// L237, [6,6)
          v143 = v141;	// L238, [6,6)
        } else {
          v143 = v140;	// L240, [6,6)
        }
        float v144 = v143 + v142;	// L242, [6,11)
        float v145 = v2[(v8 * 5)][((v7 * 5) + 1)];	// L243, [5,7)
        float v146 = v5[((v7 * 5) + 1)][(v9 * 5)];	// L244, [5,7)
        float v147 = v145 * v146;	// L245, [7,11)
        float v148 = v16 + v147;	// L246, [11,16)
        float v149 = v5[((v7 * 5) + 1)][((v9 * 5) + 1)];	// L247, [5,7)
        float v150 = v145 * v149;	// L248, [7,11)
        float v151 = v22 + v150;	// L249, [11,16)
        float v152 = v5[((v7 * 5) + 1)][((v9 * 5) + 2)];	// L250, [5,7)
        float v153 = v145 * v152;	// L251, [7,11)
        float v154 = v28 + v153;	// L252, [11,16)
        float v155 = v5[((v7 * 5) + 1)][((v9 * 5) + 3)];	// L253, [5,7)
        float v156 = v145 * v155;	// L254, [7,11)
        float v157 = v34 + v156;	// L255, [11,16)
        float v158 = v5[((v7 * 5) + 1)][((v9 * 5) + 4)];	// L256, [5,7)
        float v159 = v145 * v158;	// L257, [7,11)
        float v160 = v40 + v159;	// L258, [11,16)
        float v161 = v2[((v8 * 5) + 1)][((v7 * 5) + 1)];	// L259, [5,7)
        float v162 = v161 * v146;	// L260, [7,11)
        float v163 = v46 + v162;	// L261, [11,16)
        float v164 = v161 * v149;	// L262, [7,11)
        float v165 = v51 + v164;	// L263, [11,16)
        float v166 = v161 * v152;	// L264, [7,11)
        float v167 = v56 + v166;	// L265, [11,16)
        float v168 = v161 * v155;	// L266, [7,11)
        float v169 = v61 + v168;	// L267, [11,16)
        float v170 = v161 * v158;	// L268, [7,11)
        float v171 = v66 + v170;	// L269, [11,16)
        float v172 = v2[((v8 * 5) + 2)][((v7 * 5) + 1)];	// L270, [5,7)
        float v173 = v172 * v146;	// L271, [7,11)
        float v174 = v72 + v173;	// L272, [11,16)
        float v175 = v172 * v149;	// L273, [7,11)
        float v176 = v77 + v175;	// L274, [11,16)
        float v177 = v172 * v152;	// L275, [7,11)
        float v178 = v82 + v177;	// L276, [11,16)
        float v179 = v172 * v155;	// L277, [7,11)
        float v180 = v87 + v179;	// L278, [11,16)
        float v181 = v172 * v158;	// L279, [7,11)
        float v182 = v92 + v181;	// L280, [11,16)
        float v183 = v2[((v8 * 5) + 3)][((v7 * 5) + 1)];	// L281, [5,7)
        float v184 = v183 * v146;	// L282, [7,11)
        float v185 = v98 + v184;	// L283, [11,16)
        float v186 = v183 * v149;	// L284, [7,11)
        float v187 = v103 + v186;	// L285, [11,16)
        float v188 = v183 * v152;	// L286, [7,11)
        float v189 = v108 + v188;	// L287, [11,16)
        float v190 = v183 * v155;	// L288, [7,11)
        float v191 = v113 + v190;	// L289, [11,16)
        float v192 = v183 * v158;	// L290, [7,11)
        float v193 = v118 + v192;	// L291, [11,16)
        float v194 = v2[((v8 * 5) + 4)][((v7 * 5) + 1)];	// L292, [5,7)
        float v195 = v194 * v146;	// L293, [7,11)
        float v196 = v124 + v195;	// L294, [11,16)
        float v197 = v194 * v149;	// L295, [7,11)
        float v198 = v129 + v197;	// L296, [11,16)
        float v199 = v194 * v152;	// L297, [7,11)
        float v200 = v134 + v199;	// L298, [11,16)
        float v201 = v194 * v155;	// L299, [7,11)
        float v202 = v139 + v201;	// L300, [11,16)
        float v203 = v194 * v158;	// L301, [7,11)
        float v204 = v144 + v203;	// L302, [11,16)
        float v205 = v2[(v8 * 5)][((v7 * 5) + 2)];	// L303, [10,12)
        float v206 = v5[((v7 * 5) + 2)][(v9 * 5)];	// L304, [10,12)
        float v207 = v205 * v206;	// L305, [12,16)
        float v208 = v148 + v207;	// L306, [16,21)
        float v209 = v5[((v7 * 5) + 2)][((v9 * 5) + 1)];	// L307, [10,12)
        float v210 = v205 * v209;	// L308, [12,16)
        float v211 = v151 + v210;	// L309, [16,21)
        float v212 = v5[((v7 * 5) + 2)][((v9 * 5) + 2)];	// L310, [10,12)
        float v213 = v205 * v212;	// L311, [12,16)
        float v214 = v154 + v213;	// L312, [16,21)
        float v215 = v5[((v7 * 5) + 2)][((v9 * 5) + 3)];	// L313, [10,12)
        float v216 = v205 * v215;	// L314, [12,16)
        float v217 = v157 + v216;	// L315, [16,21)
        float v218 = v5[((v7 * 5) + 2)][((v9 * 5) + 4)];	// L316, [10,12)
        float v219 = v205 * v218;	// L317, [12,16)
        float v220 = v160 + v219;	// L318, [16,21)
        float v221 = v2[((v8 * 5) + 1)][((v7 * 5) + 2)];	// L319, [10,12)
        float v222 = v221 * v206;	// L320, [12,16)
        float v223 = v163 + v222;	// L321, [16,21)
        float v224 = v221 * v209;	// L322, [12,16)
        float v225 = v165 + v224;	// L323, [16,21)
        float v226 = v221 * v212;	// L324, [12,16)
        float v227 = v167 + v226;	// L325, [16,21)
        float v228 = v221 * v215;	// L326, [12,16)
        float v229 = v169 + v228;	// L327, [16,21)
        float v230 = v221 * v218;	// L328, [12,16)
        float v231 = v171 + v230;	// L329, [16,21)
        float v232 = v2[((v8 * 5) + 2)][((v7 * 5) + 2)];	// L330, [10,12)
        float v233 = v232 * v206;	// L331, [12,16)
        float v234 = v174 + v233;	// L332, [16,21)
        float v235 = v232 * v209;	// L333, [12,16)
        float v236 = v176 + v235;	// L334, [16,21)
        float v237 = v232 * v212;	// L335, [12,16)
        float v238 = v178 + v237;	// L336, [16,21)
        float v239 = v232 * v215;	// L337, [12,16)
        float v240 = v180 + v239;	// L338, [16,21)
        float v241 = v232 * v218;	// L339, [12,16)
        float v242 = v182 + v241;	// L340, [16,21)
        float v243 = v2[((v8 * 5) + 3)][((v7 * 5) + 2)];	// L341, [10,12)
        float v244 = v243 * v206;	// L342, [12,16)
        float v245 = v185 + v244;	// L343, [16,21)
        float v246 = v243 * v209;	// L344, [12,16)
        float v247 = v187 + v246;	// L345, [16,21)
        float v248 = v243 * v212;	// L346, [12,16)
        float v249 = v189 + v248;	// L347, [16,21)
        float v250 = v243 * v215;	// L348, [12,16)
        float v251 = v191 + v250;	// L349, [16,21)
        float v252 = v243 * v218;	// L350, [12,16)
        float v253 = v193 + v252;	// L351, [16,21)
        float v254 = v2[((v8 * 5) + 4)][((v7 * 5) + 2)];	// L352, [10,12)
        float v255 = v254 * v206;	// L353, [12,16)
        float v256 = v196 + v255;	// L354, [16,21)
        float v257 = v254 * v209;	// L355, [12,16)
        float v258 = v198 + v257;	// L356, [16,21)
        float v259 = v254 * v212;	// L357, [12,16)
        float v260 = v200 + v259;	// L358, [16,21)
        float v261 = v254 * v215;	// L359, [12,16)
        float v262 = v202 + v261;	// L360, [16,21)
        float v263 = v254 * v218;	// L361, [12,16)
        float v264 = v204 + v263;	// L362, [16,21)
        float v265 = v2[(v8 * 5)][((v7 * 5) + 3)];	// L363, [15,17)
        float v266 = v5[((v7 * 5) + 3)][(v9 * 5)];	// L364, [15,17)
        float v267 = v265 * v266;	// L365, [17,21)
        float v268 = v208 + v267;	// L366, [21,26)
        float v269 = v5[((v7 * 5) + 3)][((v9 * 5) + 1)];	// L367, [15,17)
        float v270 = v265 * v269;	// L368, [17,21)
        float v271 = v211 + v270;	// L369, [21,26)
        float v272 = v5[((v7 * 5) + 3)][((v9 * 5) + 2)];	// L370, [15,17)
        float v273 = v265 * v272;	// L371, [17,21)
        float v274 = v214 + v273;	// L372, [21,26)
        float v275 = v5[((v7 * 5) + 3)][((v9 * 5) + 3)];	// L373, [15,17)
        float v276 = v265 * v275;	// L374, [17,21)
        float v277 = v217 + v276;	// L375, [21,26)
        float v278 = v5[((v7 * 5) + 3)][((v9 * 5) + 4)];	// L376, [15,17)
        float v279 = v265 * v278;	// L377, [17,21)
        float v280 = v220 + v279;	// L378, [21,26)
        float v281 = v2[((v8 * 5) + 1)][((v7 * 5) + 3)];	// L379, [15,17)
        float v282 = v281 * v266;	// L380, [17,21)
        float v283 = v223 + v282;	// L381, [21,26)
        float v284 = v281 * v269;	// L382, [17,21)
        float v285 = v225 + v284;	// L383, [21,26)
        float v286 = v281 * v272;	// L384, [17,21)
        float v287 = v227 + v286;	// L385, [21,26)
        float v288 = v281 * v275;	// L386, [17,21)
        float v289 = v229 + v288;	// L387, [21,26)
        float v290 = v281 * v278;	// L388, [17,21)
        float v291 = v231 + v290;	// L389, [21,26)
        float v292 = v2[((v8 * 5) + 2)][((v7 * 5) + 3)];	// L390, [15,17)
        float v293 = v292 * v266;	// L391, [17,21)
        float v294 = v234 + v293;	// L392, [21,26)
        float v295 = v292 * v269;	// L393, [17,21)
        float v296 = v236 + v295;	// L394, [21,26)
        float v297 = v292 * v272;	// L395, [17,21)
        float v298 = v238 + v297;	// L396, [21,26)
        float v299 = v292 * v275;	// L397, [17,21)
        float v300 = v240 + v299;	// L398, [21,26)
        float v301 = v292 * v278;	// L399, [17,21)
        float v302 = v242 + v301;	// L400, [21,26)
        float v303 = v2[((v8 * 5) + 3)][((v7 * 5) + 3)];	// L401, [15,17)
        float v304 = v303 * v266;	// L402, [17,21)
        float v305 = v245 + v304;	// L403, [21,26)
        float v306 = v303 * v269;	// L404, [17,21)
        float v307 = v247 + v306;	// L405, [21,26)
        float v308 = v303 * v272;	// L406, [17,21)
        float v309 = v249 + v308;	// L407, [21,26)
        float v310 = v303 * v275;	// L408, [17,21)
        float v311 = v251 + v310;	// L409, [21,26)
        float v312 = v303 * v278;	// L410, [17,21)
        float v313 = v253 + v312;	// L411, [21,26)
        float v314 = v2[((v8 * 5) + 4)][((v7 * 5) + 3)];	// L412, [15,17)
        float v315 = v314 * v266;	// L413, [17,21)
        float v316 = v256 + v315;	// L414, [21,26)
        float v317 = v314 * v269;	// L415, [17,21)
        float v318 = v258 + v317;	// L416, [21,26)
        float v319 = v314 * v272;	// L417, [17,21)
        float v320 = v260 + v319;	// L418, [21,26)
        float v321 = v314 * v275;	// L419, [17,21)
        float v322 = v262 + v321;	// L420, [21,26)
        float v323 = v314 * v278;	// L421, [17,21)
        float v324 = v264 + v323;	// L422, [21,26)
        float v325 = v2[(v8 * 5)][((v7 * 5) + 4)];	// L423, [20,22)
        float v326 = v5[((v7 * 5) + 4)][(v9 * 5)];	// L424, [20,22)
        float v327 = v325 * v326;	// L425, [22,26)
        float v328 = v268 + v327;	// L426, [26,31)
        v6[(v8 * 5)][(v9 * 5)] = v328;	// L427, [31,32)
        float v329 = v5[((v7 * 5) + 4)][((v9 * 5) + 1)];	// L428, [20,22)
        float v330 = v325 * v329;	// L429, [22,26)
        float v331 = v271 + v330;	// L430, [26,31)
        v6[(v8 * 5)][((v9 * 5) + 1)] = v331;	// L431, [31,32)
        float v332 = v5[((v7 * 5) + 4)][((v9 * 5) + 2)];	// L432, [20,22)
        float v333 = v325 * v332;	// L433, [22,26)
        float v334 = v274 + v333;	// L434, [26,31)
        v6[(v8 * 5)][((v9 * 5) + 2)] = v334;	// L435, [31,32)
        float v335 = v5[((v7 * 5) + 4)][((v9 * 5) + 3)];	// L436, [20,22)
        float v336 = v325 * v335;	// L437, [22,26)
        float v337 = v277 + v336;	// L438, [26,31)
        v6[(v8 * 5)][((v9 * 5) + 3)] = v337;	// L439, [31,32)
        float v338 = v5[((v7 * 5) + 4)][((v9 * 5) + 4)];	// L440, [20,22)
        float v339 = v325 * v338;	// L441, [22,26)
        float v340 = v280 + v339;	// L442, [26,31)
        v6[(v8 * 5)][((v9 * 5) + 4)] = v340;	// L443, [31,32)
        float v341 = v2[((v8 * 5) + 1)][((v7 * 5) + 4)];	// L444, [20,22)
        float v342 = v341 * v326;	// L445, [22,26)
        float v343 = v283 + v342;	// L446, [26,31)
        v6[((v8 * 5) + 1)][(v9 * 5)] = v343;	// L447, [31,32)
        float v344 = v341 * v329;	// L448, [22,26)
        float v345 = v285 + v344;	// L449, [26,31)
        v6[((v8 * 5) + 1)][((v9 * 5) + 1)] = v345;	// L450, [31,32)
        float v346 = v341 * v332;	// L451, [22,26)
        float v347 = v287 + v346;	// L452, [26,31)
        v6[((v8 * 5) + 1)][((v9 * 5) + 2)] = v347;	// L453, [31,32)
        float v348 = v341 * v335;	// L454, [22,26)
        float v349 = v289 + v348;	// L455, [26,31)
        v6[((v8 * 5) + 1)][((v9 * 5) + 3)] = v349;	// L456, [31,32)
        float v350 = v341 * v338;	// L457, [22,26)
        float v351 = v291 + v350;	// L458, [26,31)
        v6[((v8 * 5) + 1)][((v9 * 5) + 4)] = v351;	// L459, [31,32)
        float v352 = v2[((v8 * 5) + 2)][((v7 * 5) + 4)];	// L460, [20,22)
        float v353 = v352 * v326;	// L461, [22,26)
        float v354 = v294 + v353;	// L462, [26,31)
        v6[((v8 * 5) + 2)][(v9 * 5)] = v354;	// L463, [31,32)
        float v355 = v352 * v329;	// L464, [22,26)
        float v356 = v296 + v355;	// L465, [26,31)
        v6[((v8 * 5) + 2)][((v9 * 5) + 1)] = v356;	// L466, [31,32)
        float v357 = v352 * v332;	// L467, [22,26)
        float v358 = v298 + v357;	// L468, [26,31)
        v6[((v8 * 5) + 2)][((v9 * 5) + 2)] = v358;	// L469, [31,32)
        float v359 = v352 * v335;	// L470, [22,26)
        float v360 = v300 + v359;	// L471, [26,31)
        v6[((v8 * 5) + 2)][((v9 * 5) + 3)] = v360;	// L472, [31,32)
        float v361 = v352 * v338;	// L473, [22,26)
        float v362 = v302 + v361;	// L474, [26,31)
        v6[((v8 * 5) + 2)][((v9 * 5) + 4)] = v362;	// L475, [31,32)
        float v363 = v2[((v8 * 5) + 3)][((v7 * 5) + 4)];	// L476, [20,22)
        float v364 = v363 * v326;	// L477, [22,26)
        float v365 = v305 + v364;	// L478, [26,31)
        v6[((v8 * 5) + 3)][(v9 * 5)] = v365;	// L479, [31,32)
        float v366 = v363 * v329;	// L480, [22,26)
        float v367 = v307 + v366;	// L481, [26,31)
        v6[((v8 * 5) + 3)][((v9 * 5) + 1)] = v367;	// L482, [31,32)
        float v368 = v363 * v332;	// L483, [22,26)
        float v369 = v309 + v368;	// L484, [26,31)
        v6[((v8 * 5) + 3)][((v9 * 5) + 2)] = v369;	// L485, [31,32)
        float v370 = v363 * v335;	// L486, [22,26)
        float v371 = v311 + v370;	// L487, [26,31)
        v6[((v8 * 5) + 3)][((v9 * 5) + 3)] = v371;	// L488, [31,32)
        float v372 = v363 * v338;	// L489, [22,26)
        float v373 = v313 + v372;	// L490, [26,31)
        v6[((v8 * 5) + 3)][((v9 * 5) + 4)] = v373;	// L491, [31,32)
        float v374 = v2[((v8 * 5) + 4)][((v7 * 5) + 4)];	// L492, [20,22)
        float v375 = v374 * v326;	// L493, [22,26)
        float v376 = v316 + v375;	// L494, [26,31)
        v6[((v8 * 5) + 4)][(v9 * 5)] = v376;	// L495, [31,32)
        float v377 = v374 * v329;	// L496, [22,26)
        float v378 = v318 + v377;	// L497, [26,31)
        v6[((v8 * 5) + 4)][((v9 * 5) + 1)] = v378;	// L498, [31,32)
        float v379 = v374 * v332;	// L499, [22,26)
        float v380 = v320 + v379;	// L500, [26,31)
        v6[((v8 * 5) + 4)][((v9 * 5) + 2)] = v380;	// L501, [31,32)
        float v381 = v374 * v335;	// L502, [22,26)
        float v382 = v322 + v381;	// L503, [26,31)
        v6[((v8 * 5) + 4)][((v9 * 5) + 3)] = v382;	// L504, [31,32)
        float v383 = v374 * v338;	// L505, [22,26)
        float v384 = v324 + v383;	// L506, [26,31)
        v6[((v8 * 5) + 4)][((v9 * 5) + 4)] = v384;	// L507, [31,32)
      }
    }
  }
}

