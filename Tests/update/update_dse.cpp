
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=909, interval=909
/// DSP=80, BRAM=0
void update_weights(
  double v0[832],
  double v1[4096],
  double v2[192],
  double v3[832],
  double v4[4096],
  double v5[192],
  double v6[64],
  double v7[64],
  double v8[3],
  double v9[64],
  double v10[64],
  double v11[3],
  double v12
) {	// L6, [0,909)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5
  #pragma HLS interface bram port=v6
  #pragma HLS interface bram port=v7
  #pragma HLS interface bram port=v8
  #pragma HLS interface bram port=v9
  #pragma HLS interface bram port=v10
  #pragma HLS interface bram port=v11
  #pragma HLS interface s_axilite port=v12 bundle=ctrl

  #pragma HLS array_partition variable=v0 cyclic factor=16 dim=1
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=16 dim=1
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=24 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=16 dim=1
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=16 dim=1
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=24 dim=1
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  #pragma HLS array_partition variable=v6 cyclic factor=8 dim=1
  #pragma HLS resource variable=v6 core=ram_s2p_bram

  #pragma HLS array_partition variable=v7 cyclic factor=8 dim=1
  #pragma HLS resource variable=v7 core=ram_s2p_bram

  #pragma HLS resource variable=v8 core=ram_s2p_bram

  #pragma HLS array_partition variable=v9 cyclic factor=8 dim=1
  #pragma HLS resource variable=v9 core=ram_s2p_bram

  #pragma HLS array_partition variable=v10 cyclic factor=8 dim=1
  #pragma HLS resource variable=v10 core=ram_s2p_bram

  #pragma HLS resource variable=v11 core=ram_s2p_bram

  for (int v13 = 0; v13 < 13; v13 += 1) {	// L8, [0,65), iterCycle=12, II=1
    for (int v14 = 0; v14 < 4; v14 += 1) {	// L9, [842,859), iterCycle=12, II=1
      #pragma HLS pipeline II=1
      double v15 = v3[((v13 * 64) + (v14 * 16))];	// L10, [0,2)
      double v16 = v15 * 0.010000;	// L11, [2,6)
      double v17 = v0[((v13 * 64) + (v14 * 16))];	// L12, [4,6)
      double v18 = v17 - v16;	// L13, [6,11)
      v0[((v13 * 64) + (v14 * 16))] = v18;	// L14, [11,12)
      double v19 = v3[(((v13 * 64) + (v14 * 16)) + 1)];	// L15, [0,2)
      double v20 = v19 * 0.010000;	// L16, [2,6)
      double v21 = v0[(((v13 * 64) + (v14 * 16)) + 1)];	// L17, [4,6)
      double v22 = v21 - v20;	// L18, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 1)] = v22;	// L19, [11,12)
      double v23 = v3[(((v13 * 64) + (v14 * 16)) + 2)];	// L20, [0,2)
      double v24 = v23 * 0.010000;	// L21, [2,6)
      double v25 = v0[(((v13 * 64) + (v14 * 16)) + 2)];	// L22, [4,6)
      double v26 = v25 - v24;	// L23, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 2)] = v26;	// L24, [11,12)
      double v27 = v3[(((v13 * 64) + (v14 * 16)) + 3)];	// L25, [0,2)
      double v28 = v27 * 0.010000;	// L26, [2,6)
      double v29 = v0[(((v13 * 64) + (v14 * 16)) + 3)];	// L27, [4,6)
      double v30 = v29 - v28;	// L28, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 3)] = v30;	// L29, [11,12)
      double v31 = v3[(((v13 * 64) + (v14 * 16)) + 4)];	// L30, [0,2)
      double v32 = v31 * 0.010000;	// L31, [2,6)
      double v33 = v0[(((v13 * 64) + (v14 * 16)) + 4)];	// L32, [4,6)
      double v34 = v33 - v32;	// L33, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 4)] = v34;	// L34, [11,12)
      double v35 = v3[(((v13 * 64) + (v14 * 16)) + 5)];	// L35, [0,2)
      double v36 = v35 * 0.010000;	// L36, [2,6)
      double v37 = v0[(((v13 * 64) + (v14 * 16)) + 5)];	// L37, [4,6)
      double v38 = v37 - v36;	// L38, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 5)] = v38;	// L39, [11,12)
      double v39 = v3[(((v13 * 64) + (v14 * 16)) + 6)];	// L40, [0,2)
      double v40 = v39 * 0.010000;	// L41, [2,6)
      double v41 = v0[(((v13 * 64) + (v14 * 16)) + 6)];	// L42, [4,6)
      double v42 = v41 - v40;	// L43, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 6)] = v42;	// L44, [11,12)
      double v43 = v3[(((v13 * 64) + (v14 * 16)) + 7)];	// L45, [0,2)
      double v44 = v43 * 0.010000;	// L46, [2,6)
      double v45 = v0[(((v13 * 64) + (v14 * 16)) + 7)];	// L47, [4,6)
      double v46 = v45 - v44;	// L48, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 7)] = v46;	// L49, [11,12)
      double v47 = v3[(((v13 * 64) + (v14 * 16)) + 8)];	// L50, [0,2)
      double v48 = v47 * 0.010000;	// L51, [2,6)
      double v49 = v0[(((v13 * 64) + (v14 * 16)) + 8)];	// L52, [4,6)
      double v50 = v49 - v48;	// L53, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 8)] = v50;	// L54, [11,12)
      double v51 = v3[(((v13 * 64) + (v14 * 16)) + 9)];	// L55, [0,2)
      double v52 = v51 * 0.010000;	// L56, [2,6)
      double v53 = v0[(((v13 * 64) + (v14 * 16)) + 9)];	// L57, [4,6)
      double v54 = v53 - v52;	// L58, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 9)] = v54;	// L59, [11,12)
      double v55 = v3[(((v13 * 64) + (v14 * 16)) + 10)];	// L60, [0,2)
      double v56 = v55 * 0.010000;	// L61, [2,6)
      double v57 = v0[(((v13 * 64) + (v14 * 16)) + 10)];	// L62, [4,6)
      double v58 = v57 - v56;	// L63, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 10)] = v58;	// L64, [11,12)
      double v59 = v3[(((v13 * 64) + (v14 * 16)) + 11)];	// L65, [0,2)
      double v60 = v59 * 0.010000;	// L66, [2,6)
      double v61 = v0[(((v13 * 64) + (v14 * 16)) + 11)];	// L67, [4,6)
      double v62 = v61 - v60;	// L68, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 11)] = v62;	// L69, [11,12)
      double v63 = v3[(((v13 * 64) + (v14 * 16)) + 12)];	// L70, [0,2)
      double v64 = v63 * 0.010000;	// L71, [2,6)
      double v65 = v0[(((v13 * 64) + (v14 * 16)) + 12)];	// L72, [4,6)
      double v66 = v65 - v64;	// L73, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 12)] = v66;	// L74, [11,12)
      double v67 = v3[(((v13 * 64) + (v14 * 16)) + 13)];	// L75, [0,2)
      double v68 = v67 * 0.010000;	// L76, [2,6)
      double v69 = v0[(((v13 * 64) + (v14 * 16)) + 13)];	// L77, [4,6)
      double v70 = v69 - v68;	// L78, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 13)] = v70;	// L79, [11,12)
      double v71 = v3[(((v13 * 64) + (v14 * 16)) + 14)];	// L80, [0,2)
      double v72 = v71 * 0.010000;	// L81, [2,6)
      double v73 = v0[(((v13 * 64) + (v14 * 16)) + 14)];	// L82, [4,6)
      double v74 = v73 - v72;	// L83, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 14)] = v74;	// L84, [11,12)
      double v75 = v3[(((v13 * 64) + (v14 * 16)) + 15)];	// L85, [0,2)
      double v76 = v75 * 0.010000;	// L86, [2,6)
      double v77 = v0[(((v13 * 64) + (v14 * 16)) + 15)];	// L87, [4,6)
      double v78 = v77 - v76;	// L88, [6,11)
      v0[(((v13 * 64) + (v14 * 16)) + 15)] = v78;	// L89, [11,12)
    }
  }
  for (int v79 = 0; v79 < 8; v79 += 1) {	// L92, [65,93), iterCycle=12, II=2
    #pragma HLS pipeline II=2
    double v80 = v9[(v79 * 8)];	// L93, [0,2)
    double v81 = v80 * 0.010000;	// L94, [2,6)
    double v82 = v6[(v79 * 8)];	// L95, [4,6)
    double v83 = v82 - v81;	// L96, [6,11)
    v6[(v79 * 8)] = v83;	// L97, [11,12)
    double v84 = v9[((v79 * 8) + 1)];	// L98, [0,2)
    double v85 = v84 * 0.010000;	// L99, [2,6)
    double v86 = v6[((v79 * 8) + 1)];	// L100, [4,6)
    double v87 = v86 - v85;	// L101, [6,11)
    v6[((v79 * 8) + 1)] = v87;	// L102, [11,12)
    double v88 = v9[((v79 * 8) + 2)];	// L103, [0,2)
    double v89 = v88 * 0.010000;	// L104, [2,6)
    double v90 = v6[((v79 * 8) + 2)];	// L105, [4,6)
    double v91 = v90 - v89;	// L106, [6,11)
    v6[((v79 * 8) + 2)] = v91;	// L107, [11,12)
    double v92 = v9[((v79 * 8) + 3)];	// L108, [0,2)
    double v93 = v92 * 0.010000;	// L109, [2,6)
    double v94 = v6[((v79 * 8) + 3)];	// L110, [4,6)
    double v95 = v94 - v93;	// L111, [6,11)
    v6[((v79 * 8) + 3)] = v95;	// L112, [11,12)
    double v96 = v9[((v79 * 8) + 4)];	// L113, [0,2)
    double v97 = v96 * 0.010000;	// L114, [2,6)
    double v98 = v6[((v79 * 8) + 4)];	// L115, [4,6)
    double v99 = v98 - v97;	// L116, [6,11)
    v6[((v79 * 8) + 4)] = v99;	// L117, [11,12)
    double v100 = v9[((v79 * 8) + 5)];	// L118, [0,2)
    double v101 = v100 * 0.010000;	// L119, [2,6)
    double v102 = v6[((v79 * 8) + 5)];	// L120, [4,6)
    double v103 = v102 - v101;	// L121, [6,11)
    v6[((v79 * 8) + 5)] = v103;	// L122, [11,12)
    double v104 = v9[((v79 * 8) + 6)];	// L123, [0,2)
    double v105 = v104 * 0.010000;	// L124, [2,6)
    double v106 = v6[((v79 * 8) + 6)];	// L125, [4,6)
    double v107 = v106 - v105;	// L126, [6,11)
    v6[((v79 * 8) + 6)] = v107;	// L127, [11,12)
    double v108 = v9[((v79 * 8) + 7)];	// L128, [0,2)
    double v109 = v108 * 0.010000;	// L129, [2,6)
    double v110 = v6[((v79 * 8) + 7)];	// L130, [4,6)
    double v111 = v110 - v109;	// L131, [6,11)
    v6[((v79 * 8) + 7)] = v111;	// L132, [11,12)
  }
  for (int v112 = 0; v112 < 13; v112 += 1) {	// L134, [93,165), iterCycle=19, II=1
    for (int v113 = 0; v113 < 4; v113 += 1) {	// L135, [742,766), iterCycle=19, II=1
      #pragma HLS pipeline II=1
      double v114 = v0[((v112 * 64) + (v113 * 16))];	// L136, [0,2)
      double v115 = v114 / v12;	// L137, [2,18)
      v0[((v112 * 64) + (v113 * 16))] = v115;	// L138, [18,19)
      double v116 = v0[(((v112 * 64) + (v113 * 16)) + 1)];	// L139, [0,2)
      double v117 = v116 / v12;	// L140, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 1)] = v117;	// L141, [18,19)
      double v118 = v0[(((v112 * 64) + (v113 * 16)) + 2)];	// L142, [0,2)
      double v119 = v118 / v12;	// L143, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 2)] = v119;	// L144, [18,19)
      double v120 = v0[(((v112 * 64) + (v113 * 16)) + 3)];	// L145, [0,2)
      double v121 = v120 / v12;	// L146, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 3)] = v121;	// L147, [18,19)
      double v122 = v0[(((v112 * 64) + (v113 * 16)) + 4)];	// L148, [0,2)
      double v123 = v122 / v12;	// L149, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 4)] = v123;	// L150, [18,19)
      double v124 = v0[(((v112 * 64) + (v113 * 16)) + 5)];	// L151, [0,2)
      double v125 = v124 / v12;	// L152, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 5)] = v125;	// L153, [18,19)
      double v126 = v0[(((v112 * 64) + (v113 * 16)) + 6)];	// L154, [0,2)
      double v127 = v126 / v12;	// L155, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 6)] = v127;	// L156, [18,19)
      double v128 = v0[(((v112 * 64) + (v113 * 16)) + 7)];	// L157, [0,2)
      double v129 = v128 / v12;	// L158, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 7)] = v129;	// L159, [18,19)
      double v130 = v0[(((v112 * 64) + (v113 * 16)) + 8)];	// L160, [0,2)
      double v131 = v130 / v12;	// L161, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 8)] = v131;	// L162, [18,19)
      double v132 = v0[(((v112 * 64) + (v113 * 16)) + 9)];	// L163, [0,2)
      double v133 = v132 / v12;	// L164, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 9)] = v133;	// L165, [18,19)
      double v134 = v0[(((v112 * 64) + (v113 * 16)) + 10)];	// L166, [0,2)
      double v135 = v134 / v12;	// L167, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 10)] = v135;	// L168, [18,19)
      double v136 = v0[(((v112 * 64) + (v113 * 16)) + 11)];	// L169, [0,2)
      double v137 = v136 / v12;	// L170, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 11)] = v137;	// L171, [18,19)
      double v138 = v0[(((v112 * 64) + (v113 * 16)) + 12)];	// L172, [0,2)
      double v139 = v138 / v12;	// L173, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 12)] = v139;	// L174, [18,19)
      double v140 = v0[(((v112 * 64) + (v113 * 16)) + 13)];	// L175, [0,2)
      double v141 = v140 / v12;	// L176, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 13)] = v141;	// L177, [18,19)
      double v142 = v0[(((v112 * 64) + (v113 * 16)) + 14)];	// L178, [0,2)
      double v143 = v142 / v12;	// L179, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 14)] = v143;	// L180, [18,19)
      double v144 = v0[(((v112 * 64) + (v113 * 16)) + 15)];	// L181, [0,2)
      double v145 = v144 / v12;	// L182, [2,18)
      v0[(((v112 * 64) + (v113 * 16)) + 15)] = v145;	// L183, [18,19)
    }
  }
  for (int v146 = 0; v146 < 8; v146 += 1) {	// L186, [165,193), iterCycle=19, II=1
    #pragma HLS pipeline II=1
    double v147 = v6[(v146 * 8)];	// L187, [0,2)
    double v148 = v147 / v12;	// L188, [2,18)
    v6[(v146 * 8)] = v148;	// L189, [18,19)
    double v149 = v6[((v146 * 8) + 1)];	// L190, [0,2)
    double v150 = v149 / v12;	// L191, [2,18)
    v6[((v146 * 8) + 1)] = v150;	// L192, [18,19)
    double v151 = v6[((v146 * 8) + 2)];	// L193, [0,2)
    double v152 = v151 / v12;	// L194, [2,18)
    v6[((v146 * 8) + 2)] = v152;	// L195, [18,19)
    double v153 = v6[((v146 * 8) + 3)];	// L196, [0,2)
    double v154 = v153 / v12;	// L197, [2,18)
    v6[((v146 * 8) + 3)] = v154;	// L198, [18,19)
    double v155 = v6[((v146 * 8) + 4)];	// L199, [0,2)
    double v156 = v155 / v12;	// L200, [2,18)
    v6[((v146 * 8) + 4)] = v156;	// L201, [18,19)
    double v157 = v6[((v146 * 8) + 5)];	// L202, [0,2)
    double v158 = v157 / v12;	// L203, [2,18)
    v6[((v146 * 8) + 5)] = v158;	// L204, [18,19)
    double v159 = v6[((v146 * 8) + 6)];	// L205, [0,2)
    double v160 = v159 / v12;	// L206, [2,18)
    v6[((v146 * 8) + 6)] = v160;	// L207, [18,19)
    double v161 = v6[((v146 * 8) + 7)];	// L208, [0,2)
    double v162 = v161 / v12;	// L209, [2,18)
    v6[((v146 * 8) + 7)] = v162;	// L210, [18,19)
  }
  for (int v163 = 0; v163 < 64; v163 += 1) {	// L212, [193,462), iterCycle=12, II=1
    for (int v164 = 0; v164 < 4; v164 += 1) {	// L213, [445,462), iterCycle=12, II=1
      #pragma HLS pipeline II=1
      double v165 = v4[((v163 * 64) + (v164 * 16))];	// L214, [0,2)
      double v166 = v165 * 0.010000;	// L215, [2,6)
      double v167 = v1[((v163 * 64) + (v164 * 16))];	// L216, [4,6)
      double v168 = v167 - v166;	// L217, [6,11)
      v1[((v163 * 64) + (v164 * 16))] = v168;	// L218, [11,12)
      double v169 = v4[(((v163 * 64) + (v164 * 16)) + 1)];	// L219, [0,2)
      double v170 = v169 * 0.010000;	// L220, [2,6)
      double v171 = v1[(((v163 * 64) + (v164 * 16)) + 1)];	// L221, [4,6)
      double v172 = v171 - v170;	// L222, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 1)] = v172;	// L223, [11,12)
      double v173 = v4[(((v163 * 64) + (v164 * 16)) + 2)];	// L224, [0,2)
      double v174 = v173 * 0.010000;	// L225, [2,6)
      double v175 = v1[(((v163 * 64) + (v164 * 16)) + 2)];	// L226, [4,6)
      double v176 = v175 - v174;	// L227, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 2)] = v176;	// L228, [11,12)
      double v177 = v4[(((v163 * 64) + (v164 * 16)) + 3)];	// L229, [0,2)
      double v178 = v177 * 0.010000;	// L230, [2,6)
      double v179 = v1[(((v163 * 64) + (v164 * 16)) + 3)];	// L231, [4,6)
      double v180 = v179 - v178;	// L232, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 3)] = v180;	// L233, [11,12)
      double v181 = v4[(((v163 * 64) + (v164 * 16)) + 4)];	// L234, [0,2)
      double v182 = v181 * 0.010000;	// L235, [2,6)
      double v183 = v1[(((v163 * 64) + (v164 * 16)) + 4)];	// L236, [4,6)
      double v184 = v183 - v182;	// L237, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 4)] = v184;	// L238, [11,12)
      double v185 = v4[(((v163 * 64) + (v164 * 16)) + 5)];	// L239, [0,2)
      double v186 = v185 * 0.010000;	// L240, [2,6)
      double v187 = v1[(((v163 * 64) + (v164 * 16)) + 5)];	// L241, [4,6)
      double v188 = v187 - v186;	// L242, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 5)] = v188;	// L243, [11,12)
      double v189 = v4[(((v163 * 64) + (v164 * 16)) + 6)];	// L244, [0,2)
      double v190 = v189 * 0.010000;	// L245, [2,6)
      double v191 = v1[(((v163 * 64) + (v164 * 16)) + 6)];	// L246, [4,6)
      double v192 = v191 - v190;	// L247, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 6)] = v192;	// L248, [11,12)
      double v193 = v4[(((v163 * 64) + (v164 * 16)) + 7)];	// L249, [0,2)
      double v194 = v193 * 0.010000;	// L250, [2,6)
      double v195 = v1[(((v163 * 64) + (v164 * 16)) + 7)];	// L251, [4,6)
      double v196 = v195 - v194;	// L252, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 7)] = v196;	// L253, [11,12)
      double v197 = v4[(((v163 * 64) + (v164 * 16)) + 8)];	// L254, [0,2)
      double v198 = v197 * 0.010000;	// L255, [2,6)
      double v199 = v1[(((v163 * 64) + (v164 * 16)) + 8)];	// L256, [4,6)
      double v200 = v199 - v198;	// L257, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 8)] = v200;	// L258, [11,12)
      double v201 = v4[(((v163 * 64) + (v164 * 16)) + 9)];	// L259, [0,2)
      double v202 = v201 * 0.010000;	// L260, [2,6)
      double v203 = v1[(((v163 * 64) + (v164 * 16)) + 9)];	// L261, [4,6)
      double v204 = v203 - v202;	// L262, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 9)] = v204;	// L263, [11,12)
      double v205 = v4[(((v163 * 64) + (v164 * 16)) + 10)];	// L264, [0,2)
      double v206 = v205 * 0.010000;	// L265, [2,6)
      double v207 = v1[(((v163 * 64) + (v164 * 16)) + 10)];	// L266, [4,6)
      double v208 = v207 - v206;	// L267, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 10)] = v208;	// L268, [11,12)
      double v209 = v4[(((v163 * 64) + (v164 * 16)) + 11)];	// L269, [0,2)
      double v210 = v209 * 0.010000;	// L270, [2,6)
      double v211 = v1[(((v163 * 64) + (v164 * 16)) + 11)];	// L271, [4,6)
      double v212 = v211 - v210;	// L272, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 11)] = v212;	// L273, [11,12)
      double v213 = v4[(((v163 * 64) + (v164 * 16)) + 12)];	// L274, [0,2)
      double v214 = v213 * 0.010000;	// L275, [2,6)
      double v215 = v1[(((v163 * 64) + (v164 * 16)) + 12)];	// L276, [4,6)
      double v216 = v215 - v214;	// L277, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 12)] = v216;	// L278, [11,12)
      double v217 = v4[(((v163 * 64) + (v164 * 16)) + 13)];	// L279, [0,2)
      double v218 = v217 * 0.010000;	// L280, [2,6)
      double v219 = v1[(((v163 * 64) + (v164 * 16)) + 13)];	// L281, [4,6)
      double v220 = v219 - v218;	// L282, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 13)] = v220;	// L283, [11,12)
      double v221 = v4[(((v163 * 64) + (v164 * 16)) + 14)];	// L284, [0,2)
      double v222 = v221 * 0.010000;	// L285, [2,6)
      double v223 = v1[(((v163 * 64) + (v164 * 16)) + 14)];	// L286, [4,6)
      double v224 = v223 - v222;	// L287, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 14)] = v224;	// L288, [11,12)
      double v225 = v4[(((v163 * 64) + (v164 * 16)) + 15)];	// L289, [0,2)
      double v226 = v225 * 0.010000;	// L290, [2,6)
      double v227 = v1[(((v163 * 64) + (v164 * 16)) + 15)];	// L291, [4,6)
      double v228 = v227 - v226;	// L292, [6,11)
      v1[(((v163 * 64) + (v164 * 16)) + 15)] = v228;	// L293, [11,12)
    }
  }
  for (int v229 = 0; v229 < 8; v229 += 1) {	// L296, [462,490), iterCycle=12, II=2
    #pragma HLS pipeline II=2
    double v230 = v10[(v229 * 8)];	// L297, [0,2)
    double v231 = v230 * 0.010000;	// L298, [2,6)
    double v232 = v7[(v229 * 8)];	// L299, [4,6)
    double v233 = v232 - v231;	// L300, [6,11)
    v7[(v229 * 8)] = v233;	// L301, [11,12)
    double v234 = v10[((v229 * 8) + 1)];	// L302, [0,2)
    double v235 = v234 * 0.010000;	// L303, [2,6)
    double v236 = v7[((v229 * 8) + 1)];	// L304, [4,6)
    double v237 = v236 - v235;	// L305, [6,11)
    v7[((v229 * 8) + 1)] = v237;	// L306, [11,12)
    double v238 = v10[((v229 * 8) + 2)];	// L307, [0,2)
    double v239 = v238 * 0.010000;	// L308, [2,6)
    double v240 = v7[((v229 * 8) + 2)];	// L309, [4,6)
    double v241 = v240 - v239;	// L310, [6,11)
    v7[((v229 * 8) + 2)] = v241;	// L311, [11,12)
    double v242 = v10[((v229 * 8) + 3)];	// L312, [0,2)
    double v243 = v242 * 0.010000;	// L313, [2,6)
    double v244 = v7[((v229 * 8) + 3)];	// L314, [4,6)
    double v245 = v244 - v243;	// L315, [6,11)
    v7[((v229 * 8) + 3)] = v245;	// L316, [11,12)
    double v246 = v10[((v229 * 8) + 4)];	// L317, [0,2)
    double v247 = v246 * 0.010000;	// L318, [2,6)
    double v248 = v7[((v229 * 8) + 4)];	// L319, [4,6)
    double v249 = v248 - v247;	// L320, [6,11)
    v7[((v229 * 8) + 4)] = v249;	// L321, [11,12)
    double v250 = v10[((v229 * 8) + 5)];	// L322, [0,2)
    double v251 = v250 * 0.010000;	// L323, [2,6)
    double v252 = v7[((v229 * 8) + 5)];	// L324, [4,6)
    double v253 = v252 - v251;	// L325, [6,11)
    v7[((v229 * 8) + 5)] = v253;	// L326, [11,12)
    double v254 = v10[((v229 * 8) + 6)];	// L327, [0,2)
    double v255 = v254 * 0.010000;	// L328, [2,6)
    double v256 = v7[((v229 * 8) + 6)];	// L329, [4,6)
    double v257 = v256 - v255;	// L330, [6,11)
    v7[((v229 * 8) + 6)] = v257;	// L331, [11,12)
    double v258 = v10[((v229 * 8) + 7)];	// L332, [0,2)
    double v259 = v258 * 0.010000;	// L333, [2,6)
    double v260 = v7[((v229 * 8) + 7)];	// L334, [4,6)
    double v261 = v260 - v259;	// L335, [6,11)
    v7[((v229 * 8) + 7)] = v261;	// L336, [11,12)
  }
  for (int v262 = 0; v262 < 64; v262 += 1) {	// L338, [490,766), iterCycle=19, II=1
    for (int v263 = 0; v263 < 4; v263 += 1) {	// L339, [141,165), iterCycle=19, II=1
      #pragma HLS pipeline II=1
      double v264 = v1[((v262 * 64) + (v263 * 16))];	// L340, [0,2)
      double v265 = v264 / v12;	// L341, [2,18)
      v1[((v262 * 64) + (v263 * 16))] = v265;	// L342, [18,19)
      double v266 = v1[(((v262 * 64) + (v263 * 16)) + 1)];	// L343, [0,2)
      double v267 = v266 / v12;	// L344, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 1)] = v267;	// L345, [18,19)
      double v268 = v1[(((v262 * 64) + (v263 * 16)) + 2)];	// L346, [0,2)
      double v269 = v268 / v12;	// L347, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 2)] = v269;	// L348, [18,19)
      double v270 = v1[(((v262 * 64) + (v263 * 16)) + 3)];	// L349, [0,2)
      double v271 = v270 / v12;	// L350, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 3)] = v271;	// L351, [18,19)
      double v272 = v1[(((v262 * 64) + (v263 * 16)) + 4)];	// L352, [0,2)
      double v273 = v272 / v12;	// L353, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 4)] = v273;	// L354, [18,19)
      double v274 = v1[(((v262 * 64) + (v263 * 16)) + 5)];	// L355, [0,2)
      double v275 = v274 / v12;	// L356, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 5)] = v275;	// L357, [18,19)
      double v276 = v1[(((v262 * 64) + (v263 * 16)) + 6)];	// L358, [0,2)
      double v277 = v276 / v12;	// L359, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 6)] = v277;	// L360, [18,19)
      double v278 = v1[(((v262 * 64) + (v263 * 16)) + 7)];	// L361, [0,2)
      double v279 = v278 / v12;	// L362, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 7)] = v279;	// L363, [18,19)
      double v280 = v1[(((v262 * 64) + (v263 * 16)) + 8)];	// L364, [0,2)
      double v281 = v280 / v12;	// L365, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 8)] = v281;	// L366, [18,19)
      double v282 = v1[(((v262 * 64) + (v263 * 16)) + 9)];	// L367, [0,2)
      double v283 = v282 / v12;	// L368, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 9)] = v283;	// L369, [18,19)
      double v284 = v1[(((v262 * 64) + (v263 * 16)) + 10)];	// L370, [0,2)
      double v285 = v284 / v12;	// L371, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 10)] = v285;	// L372, [18,19)
      double v286 = v1[(((v262 * 64) + (v263 * 16)) + 11)];	// L373, [0,2)
      double v287 = v286 / v12;	// L374, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 11)] = v287;	// L375, [18,19)
      double v288 = v1[(((v262 * 64) + (v263 * 16)) + 12)];	// L376, [0,2)
      double v289 = v288 / v12;	// L377, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 12)] = v289;	// L378, [18,19)
      double v290 = v1[(((v262 * 64) + (v263 * 16)) + 13)];	// L379, [0,2)
      double v291 = v290 / v12;	// L380, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 13)] = v291;	// L381, [18,19)
      double v292 = v1[(((v262 * 64) + (v263 * 16)) + 14)];	// L382, [0,2)
      double v293 = v292 / v12;	// L383, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 14)] = v293;	// L384, [18,19)
      double v294 = v1[(((v262 * 64) + (v263 * 16)) + 15)];	// L385, [0,2)
      double v295 = v294 / v12;	// L386, [2,18)
      v1[(((v262 * 64) + (v263 * 16)) + 15)] = v295;	// L387, [18,19)
    }
  }
  for (int v296 = 0; v296 < 8; v296 += 1) {	// L390, [766,794), iterCycle=19, II=1
    #pragma HLS pipeline II=1
    double v297 = v7[(v296 * 8)];	// L391, [0,2)
    double v298 = v297 / v12;	// L392, [2,18)
    v7[(v296 * 8)] = v298;	// L393, [18,19)
    double v299 = v7[((v296 * 8) + 1)];	// L394, [0,2)
    double v300 = v299 / v12;	// L395, [2,18)
    v7[((v296 * 8) + 1)] = v300;	// L396, [18,19)
    double v301 = v7[((v296 * 8) + 2)];	// L397, [0,2)
    double v302 = v301 / v12;	// L398, [2,18)
    v7[((v296 * 8) + 2)] = v302;	// L399, [18,19)
    double v303 = v7[((v296 * 8) + 3)];	// L400, [0,2)
    double v304 = v303 / v12;	// L401, [2,18)
    v7[((v296 * 8) + 3)] = v304;	// L402, [18,19)
    double v305 = v7[((v296 * 8) + 4)];	// L403, [0,2)
    double v306 = v305 / v12;	// L404, [2,18)
    v7[((v296 * 8) + 4)] = v306;	// L405, [18,19)
    double v307 = v7[((v296 * 8) + 5)];	// L406, [0,2)
    double v308 = v307 / v12;	// L407, [2,18)
    v7[((v296 * 8) + 5)] = v308;	// L408, [18,19)
    double v309 = v7[((v296 * 8) + 6)];	// L409, [0,2)
    double v310 = v309 / v12;	// L410, [2,18)
    v7[((v296 * 8) + 6)] = v310;	// L411, [18,19)
    double v311 = v7[((v296 * 8) + 7)];	// L412, [0,2)
    double v312 = v311 / v12;	// L413, [2,18)
    v7[((v296 * 8) + 7)] = v312;	// L414, [18,19)
  }
  for (int v313 = 0; v313 < 8; v313 += 1) {	// L416, [794,836), iterCycle=12, II=4
    #pragma HLS pipeline II=4
    double v314 = v5[(v313 * 24)];	// L417, [0,2)
    double v315 = v314 * 0.010000;	// L418, [2,6)
    double v316 = v2[(v313 * 24)];	// L419, [4,6)
    double v317 = v316 - v315;	// L420, [6,11)
    v2[(v313 * 24)] = v317;	// L421, [11,12)
    double v318 = v5[((v313 * 24) + 1)];	// L422, [0,2)
    double v319 = v318 * 0.010000;	// L423, [2,6)
    double v320 = v2[((v313 * 24) + 1)];	// L424, [4,6)
    double v321 = v320 - v319;	// L425, [6,11)
    v2[((v313 * 24) + 1)] = v321;	// L426, [11,12)
    double v322 = v5[((v313 * 24) + 2)];	// L427, [0,2)
    double v323 = v322 * 0.010000;	// L428, [2,6)
    double v324 = v2[((v313 * 24) + 2)];	// L429, [4,6)
    double v325 = v324 - v323;	// L430, [6,11)
    v2[((v313 * 24) + 2)] = v325;	// L431, [11,12)
    double v326 = v5[((v313 * 24) + 3)];	// L432, [0,2)
    double v327 = v326 * 0.010000;	// L433, [2,6)
    double v328 = v2[((v313 * 24) + 3)];	// L434, [4,6)
    double v329 = v328 - v327;	// L435, [6,11)
    v2[((v313 * 24) + 3)] = v329;	// L436, [11,12)
    double v330 = v5[((v313 * 24) + 4)];	// L437, [0,2)
    double v331 = v330 * 0.010000;	// L438, [2,6)
    double v332 = v2[((v313 * 24) + 4)];	// L439, [4,6)
    double v333 = v332 - v331;	// L440, [6,11)
    v2[((v313 * 24) + 4)] = v333;	// L441, [11,12)
    double v334 = v5[((v313 * 24) + 5)];	// L442, [0,2)
    double v335 = v334 * 0.010000;	// L443, [2,6)
    double v336 = v2[((v313 * 24) + 5)];	// L444, [4,6)
    double v337 = v336 - v335;	// L445, [6,11)
    v2[((v313 * 24) + 5)] = v337;	// L446, [11,12)
    double v338 = v5[((v313 * 24) + 6)];	// L447, [0,2)
    double v339 = v338 * 0.010000;	// L448, [2,6)
    double v340 = v2[((v313 * 24) + 6)];	// L449, [4,6)
    double v341 = v340 - v339;	// L450, [6,11)
    v2[((v313 * 24) + 6)] = v341;	// L451, [11,12)
    double v342 = v5[((v313 * 24) + 7)];	// L452, [0,2)
    double v343 = v342 * 0.010000;	// L453, [2,6)
    double v344 = v2[((v313 * 24) + 7)];	// L454, [4,6)
    double v345 = v344 - v343;	// L455, [6,11)
    v2[((v313 * 24) + 7)] = v345;	// L456, [11,12)
    double v346 = v5[((v313 * 24) + 8)];	// L457, [0,2)
    double v347 = v346 * 0.010000;	// L458, [2,6)
    double v348 = v2[((v313 * 24) + 8)];	// L459, [4,6)
    double v349 = v348 - v347;	// L460, [6,11)
    v2[((v313 * 24) + 8)] = v349;	// L461, [11,12)
    double v350 = v5[((v313 * 24) + 9)];	// L462, [0,2)
    double v351 = v350 * 0.010000;	// L463, [2,6)
    double v352 = v2[((v313 * 24) + 9)];	// L464, [4,6)
    double v353 = v352 - v351;	// L465, [6,11)
    v2[((v313 * 24) + 9)] = v353;	// L466, [11,12)
    double v354 = v5[((v313 * 24) + 10)];	// L467, [0,2)
    double v355 = v354 * 0.010000;	// L468, [2,6)
    double v356 = v2[((v313 * 24) + 10)];	// L469, [4,6)
    double v357 = v356 - v355;	// L470, [6,11)
    v2[((v313 * 24) + 10)] = v357;	// L471, [11,12)
    double v358 = v5[((v313 * 24) + 11)];	// L472, [0,2)
    double v359 = v358 * 0.010000;	// L473, [2,6)
    double v360 = v2[((v313 * 24) + 11)];	// L474, [4,6)
    double v361 = v360 - v359;	// L475, [6,11)
    v2[((v313 * 24) + 11)] = v361;	// L476, [11,12)
    double v362 = v5[((v313 * 24) + 12)];	// L477, [0,2)
    double v363 = v362 * 0.010000;	// L478, [2,6)
    double v364 = v2[((v313 * 24) + 12)];	// L479, [4,6)
    double v365 = v364 - v363;	// L480, [6,11)
    v2[((v313 * 24) + 12)] = v365;	// L481, [11,12)
    double v366 = v5[((v313 * 24) + 13)];	// L482, [0,2)
    double v367 = v366 * 0.010000;	// L483, [2,6)
    double v368 = v2[((v313 * 24) + 13)];	// L484, [4,6)
    double v369 = v368 - v367;	// L485, [6,11)
    v2[((v313 * 24) + 13)] = v369;	// L486, [11,12)
    double v370 = v5[((v313 * 24) + 14)];	// L487, [0,2)
    double v371 = v370 * 0.010000;	// L488, [2,6)
    double v372 = v2[((v313 * 24) + 14)];	// L489, [4,6)
    double v373 = v372 - v371;	// L490, [6,11)
    v2[((v313 * 24) + 14)] = v373;	// L491, [11,12)
    double v374 = v5[((v313 * 24) + 15)];	// L492, [0,2)
    double v375 = v374 * 0.010000;	// L493, [2,6)
    double v376 = v2[((v313 * 24) + 15)];	// L494, [4,6)
    double v377 = v376 - v375;	// L495, [6,11)
    v2[((v313 * 24) + 15)] = v377;	// L496, [11,12)
    double v378 = v5[((v313 * 24) + 16)];	// L497, [0,2)
    double v379 = v378 * 0.010000;	// L498, [2,6)
    double v380 = v2[((v313 * 24) + 16)];	// L499, [4,6)
    double v381 = v380 - v379;	// L500, [6,11)
    v2[((v313 * 24) + 16)] = v381;	// L501, [11,12)
    double v382 = v5[((v313 * 24) + 17)];	// L502, [0,2)
    double v383 = v382 * 0.010000;	// L503, [2,6)
    double v384 = v2[((v313 * 24) + 17)];	// L504, [4,6)
    double v385 = v384 - v383;	// L505, [6,11)
    v2[((v313 * 24) + 17)] = v385;	// L506, [11,12)
    double v386 = v5[((v313 * 24) + 18)];	// L507, [0,2)
    double v387 = v386 * 0.010000;	// L508, [2,6)
    double v388 = v2[((v313 * 24) + 18)];	// L509, [4,6)
    double v389 = v388 - v387;	// L510, [6,11)
    v2[((v313 * 24) + 18)] = v389;	// L511, [11,12)
    double v390 = v5[((v313 * 24) + 19)];	// L512, [0,2)
    double v391 = v390 * 0.010000;	// L513, [2,6)
    double v392 = v2[((v313 * 24) + 19)];	// L514, [4,6)
    double v393 = v392 - v391;	// L515, [6,11)
    v2[((v313 * 24) + 19)] = v393;	// L516, [11,12)
    double v394 = v5[((v313 * 24) + 20)];	// L517, [0,2)
    double v395 = v394 * 0.010000;	// L518, [2,6)
    double v396 = v2[((v313 * 24) + 20)];	// L519, [4,6)
    double v397 = v396 - v395;	// L520, [6,11)
    v2[((v313 * 24) + 20)] = v397;	// L521, [11,12)
    double v398 = v5[((v313 * 24) + 21)];	// L522, [0,2)
    double v399 = v398 * 0.010000;	// L523, [2,6)
    double v400 = v2[((v313 * 24) + 21)];	// L524, [4,6)
    double v401 = v400 - v399;	// L525, [6,11)
    v2[((v313 * 24) + 21)] = v401;	// L526, [11,12)
    double v402 = v5[((v313 * 24) + 22)];	// L527, [0,2)
    double v403 = v402 * 0.010000;	// L528, [2,6)
    double v404 = v2[((v313 * 24) + 22)];	// L529, [4,6)
    double v405 = v404 - v403;	// L530, [6,11)
    v2[((v313 * 24) + 22)] = v405;	// L531, [11,12)
    double v406 = v5[((v313 * 24) + 23)];	// L532, [0,2)
    double v407 = v406 * 0.010000;	// L533, [2,6)
    double v408 = v2[((v313 * 24) + 23)];	// L534, [4,6)
    double v409 = v408 - v407;	// L535, [6,11)
    v2[((v313 * 24) + 23)] = v409;	// L536, [11,12)
  }
  for (int v410 = 0; v410 < 3; v410 += 1) {	// L538, [836,856), iterCycle=12, II=3
    #pragma HLS pipeline II=3
    double v411 = v11[v410];	// L539, [0,2)
    double v412 = v411 * 0.010000;	// L540, [2,6)
    double v413 = v8[v410];	// L541, [4,6)
    double v414 = v413 - v412;	// L542, [6,11)
    v8[v410] = v414;	// L543, [11,12)
  }
  for (int v415 = 0; v415 < 8; v415 += 1) {	// L545, [856,884), iterCycle=19, II=1
    #pragma HLS pipeline II=1
    double v416 = v2[(v415 * 24)];	// L546, [0,2)
    double v417 = v416 / v12;	// L547, [2,18)
    v2[(v415 * 24)] = v417;	// L548, [18,19)
    double v418 = v2[((v415 * 24) + 1)];	// L549, [0,2)
    double v419 = v418 / v12;	// L550, [2,18)
    v2[((v415 * 24) + 1)] = v419;	// L551, [18,19)
    double v420 = v2[((v415 * 24) + 2)];	// L552, [0,2)
    double v421 = v420 / v12;	// L553, [2,18)
    v2[((v415 * 24) + 2)] = v421;	// L554, [18,19)
    double v422 = v2[((v415 * 24) + 3)];	// L555, [0,2)
    double v423 = v422 / v12;	// L556, [2,18)
    v2[((v415 * 24) + 3)] = v423;	// L557, [18,19)
    double v424 = v2[((v415 * 24) + 4)];	// L558, [0,2)
    double v425 = v424 / v12;	// L559, [2,18)
    v2[((v415 * 24) + 4)] = v425;	// L560, [18,19)
    double v426 = v2[((v415 * 24) + 5)];	// L561, [0,2)
    double v427 = v426 / v12;	// L562, [2,18)
    v2[((v415 * 24) + 5)] = v427;	// L563, [18,19)
    double v428 = v2[((v415 * 24) + 6)];	// L564, [0,2)
    double v429 = v428 / v12;	// L565, [2,18)
    v2[((v415 * 24) + 6)] = v429;	// L566, [18,19)
    double v430 = v2[((v415 * 24) + 7)];	// L567, [0,2)
    double v431 = v430 / v12;	// L568, [2,18)
    v2[((v415 * 24) + 7)] = v431;	// L569, [18,19)
    double v432 = v2[((v415 * 24) + 8)];	// L570, [0,2)
    double v433 = v432 / v12;	// L571, [2,18)
    v2[((v415 * 24) + 8)] = v433;	// L572, [18,19)
    double v434 = v2[((v415 * 24) + 9)];	// L573, [0,2)
    double v435 = v434 / v12;	// L574, [2,18)
    v2[((v415 * 24) + 9)] = v435;	// L575, [18,19)
    double v436 = v2[((v415 * 24) + 10)];	// L576, [0,2)
    double v437 = v436 / v12;	// L577, [2,18)
    v2[((v415 * 24) + 10)] = v437;	// L578, [18,19)
    double v438 = v2[((v415 * 24) + 11)];	// L579, [0,2)
    double v439 = v438 / v12;	// L580, [2,18)
    v2[((v415 * 24) + 11)] = v439;	// L581, [18,19)
    double v440 = v2[((v415 * 24) + 12)];	// L582, [0,2)
    double v441 = v440 / v12;	// L583, [2,18)
    v2[((v415 * 24) + 12)] = v441;	// L584, [18,19)
    double v442 = v2[((v415 * 24) + 13)];	// L585, [0,2)
    double v443 = v442 / v12;	// L586, [2,18)
    v2[((v415 * 24) + 13)] = v443;	// L587, [18,19)
    double v444 = v2[((v415 * 24) + 14)];	// L588, [0,2)
    double v445 = v444 / v12;	// L589, [2,18)
    v2[((v415 * 24) + 14)] = v445;	// L590, [18,19)
    double v446 = v2[((v415 * 24) + 15)];	// L591, [0,2)
    double v447 = v446 / v12;	// L592, [2,18)
    v2[((v415 * 24) + 15)] = v447;	// L593, [18,19)
    double v448 = v2[((v415 * 24) + 16)];	// L594, [0,2)
    double v449 = v448 / v12;	// L595, [2,18)
    v2[((v415 * 24) + 16)] = v449;	// L596, [18,19)
    double v450 = v2[((v415 * 24) + 17)];	// L597, [0,2)
    double v451 = v450 / v12;	// L598, [2,18)
    v2[((v415 * 24) + 17)] = v451;	// L599, [18,19)
    double v452 = v2[((v415 * 24) + 18)];	// L600, [0,2)
    double v453 = v452 / v12;	// L601, [2,18)
    v2[((v415 * 24) + 18)] = v453;	// L602, [18,19)
    double v454 = v2[((v415 * 24) + 19)];	// L603, [0,2)
    double v455 = v454 / v12;	// L604, [2,18)
    v2[((v415 * 24) + 19)] = v455;	// L605, [18,19)
    double v456 = v2[((v415 * 24) + 20)];	// L606, [0,2)
    double v457 = v456 / v12;	// L607, [2,18)
    v2[((v415 * 24) + 20)] = v457;	// L608, [18,19)
    double v458 = v2[((v415 * 24) + 21)];	// L609, [0,2)
    double v459 = v458 / v12;	// L610, [2,18)
    v2[((v415 * 24) + 21)] = v459;	// L611, [18,19)
    double v460 = v2[((v415 * 24) + 22)];	// L612, [0,2)
    double v461 = v460 / v12;	// L613, [2,18)
    v2[((v415 * 24) + 22)] = v461;	// L614, [18,19)
    double v462 = v2[((v415 * 24) + 23)];	// L615, [0,2)
    double v463 = v462 / v12;	// L616, [2,18)
    v2[((v415 * 24) + 23)] = v463;	// L617, [18,19)
  }
  for (int v464 = 0; v464 < 3; v464 += 1) {	// L619, [884,907), iterCycle=19, II=1
    #pragma HLS pipeline II=1
    double v465 = v8[v464];	// L620, [0,2)
    double v466 = v465 / v12;	// L621, [2,18)
    v8[v464] = v466;	// L622, [18,19)
  }
}

