# 1 "digitrec_soc.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "digitrec_soc.cpp"
# 9 "digitrec_soc.cpp"
# 1 "../typedefs.h" 1
# 19 "../typedefs.h"
typedef unsigned long long DigitType;
typedef unsigned LabelType;
# 10 "digitrec_soc.cpp" 2


int popcount(WholeDigitType x)
{


  int cnt = 0;
  for (int i = 0; i < 256; i ++ )
    cnt = cnt + x[i];

  return cnt;
}




void update_knn( WholeDigitType test_inst, WholeDigitType train_inst, int min_distances[3] )
{
#pragma HLS inline


  WholeDigitType diff = test_inst ^ train_inst;

  int dist = 0;

  dist = popcount(diff);

  int max_dist = 0;
  int max_dist_id = 3 +1;
  int k = 0;


  FIND_MAX_DIST: for ( int k = 0; k < 3; ++k )
  {
    if ( min_distances[k] > max_dist )
    {
      max_dist = min_distances[k];
      max_dist_id = k;
    }
  }


  if ( dist < max_dist )
    min_distances[max_dist_id] = dist;

  return;
}





LabelType knn_vote( int knn_set[40 * 3] )
{
#pragma HLS inline




  int min_distance_list[3];
#pragma HLS array_partition variable=min_distance_list complete dim=0

  int label_list[3];
#pragma HLS array_partition variable=label_list complete dim=0

  int vote_list[10];
#pragma HLS array_partition variable=vote_list complete dim=0

  int pos = 1000;


  INIT_1: for (int i = 0;i < 3; i ++ )
  {
#pragma HLS unroll
    min_distance_list[i] = 256;
    label_list[i] = 9;
  }

  INIT_2: for (int i = 0;i < 10; i ++ )
  {
#pragma HLS unroll
    vote_list[i] = 0;
  }



  LANES: for (int i = 0; i < 40; i ++ )
  {
    INSERTION_SORT_OUTER: for (int j = 0; j < 3; j ++ )
    {
#pragma HLS pipeline
      pos = 1000;
      INSERTION_SORT_INNER: for (int r = 0; r < 3; r ++ )
      {
#pragma HLS unroll
        pos = ((knn_set[i*3 +j] < min_distance_list[r]) && (pos > 3)) ? r : pos;
      }

      INSERT: for (int r = 3 ;r > 0; r -- )
      {
#pragma HLS unroll
        if(r-1 > pos)
        {
          min_distance_list[r-1] = min_distance_list[r-2];
          label_list[r-1] = label_list[r-2];
        }
        else if (r-1 == pos)
        {
          min_distance_list[r-1] = knn_set[i*3 +j];
          label_list[r-1] = i / (40 / 10);
        }
      }
    }
  }


  INCREMENT: for (int i = 0;i < 3; i ++ )
  {
#pragma HLS pipeline
    vote_list[label_list[i]] += 1;
  }

  LabelType max_vote;
  max_vote = 0;


  VOTE: for (int i = 0;i < 10; i ++ )
  {
#pragma HLS unroll
    if(vote_list[i] >= vote_list[max_vote])
    {
      max_vote = i;
    }
  }

  return max_vote;

}




void DigitRec(WholeDigitType global_training_set[18000 / 2], WholeDigitType global_test_set[2000], LabelType global_results[2000], int run)
{


  int knn_set[40 * 3];
#pragma HLS array_partition variable=knn_set complete dim=0

  static WholeDigitType training_set [18000];

  const int unroll_factor = 40;
#pragma HLS array_partition variable=training_set block factor=unroll_factor dim=0

  static WholeDigitType test_set [2000];
  static LabelType results [2000];


  if (run == 0)
  {

    for (int i = 0; i < 18000 / 2; i ++ )
#pragma HLS pipeline
      training_set[i] = global_training_set[i];
    return;
  }


  for (int i = 0; i < 18000 / 2; i ++ )
#pragma HLS pipeline
    training_set[i + 18000 / 2] = global_training_set[i];

  for (int i = 0; i < 2000; i ++ )
#pragma HLS pipeline
    test_set[i] = global_test_set[i];


  TEST_LOOP: for (int t = 0; t < 2000; ++t)
  {

    WholeDigitType test_instance = test_set[t];


    SET_KNN_SET: for ( int i = 0; i < 3 * 40 ; ++i )
    {
#pragma HLS unroll

      knn_set[i] = 256;
    }

    TRAINING_LOOP : for ( int i = 0; i < 18000 / 40; ++i )
    {
#pragma HLS pipeline
      LANES : for ( int j = 0; j < 40; j++ )
      {
#pragma HLS unroll

        WholeDigitType training_instance = training_set[j * 18000 / 40 + i];


        update_knn( test_instance, training_instance, &knn_set[j * 3] );
      }
    }

    LabelType max_vote = knn_vote(knn_set);
    results[t] = max_vote;

  }


  for (int i = 0; i < 2000; i ++ )
#pragma HLS pipeline
    global_results[i] = results[i];

}
