
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=11430014, interval=11430014
/// DSP=167
void SgdLR_sw(
  float v0[4608000],
  int32_t v1[4500],
  float v2[1024]
) {	// L1, [0,11430014)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2

  #pragma HLS array_partition variable=v0 cyclic factor=32 dim=1
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=32 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  float v3[1024];	// L5, [0,0)
  #pragma HLS array_partition variable=v3 cyclic factor=32 dim=1
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  for (int v4 = 0; v4 < 5; v4 += 1) {	// L6, [0,11430012), iterCycle=2286002, II=2286002
    for (int v5 = 0; v5 < 4500; v5 += 1) {	// L7, [0,2286002), iterCycle=508, II=508
      float v6[1];	// L8, [0,0)
      v6[0] = 0.000000;	// L9, [0,1)
      float v7[1];	// L10, [0,0)
      v7[0] = 0.000000;	// L11, [0,1)
      for (int v8 = 0; v8 < 32; v8 += 1) {	// L12, [1,387), iterCycle=167, II=7
        #pragma HLS pipeline II=7
        float v9 = v2[(v8 * 32)];	// L13, [0,2)
        float v10 = v0[((v5 * 1024) + (v8 * 32))];	// L14, [0,2)
        float v11 = v9 * v10;	// L15, [2,6)
        float v12 = v2[((v8 * 32) + 1)];	// L16, [0,2)
        float v13 = v0[(((v5 * 1024) + (v8 * 32)) + 1)];	// L17, [0,2)
        float v14 = v12 * v13;	// L18, [2,6)
        float v15 = v11 + v14;	// L19, [6,11)
        float v16 = v2[((v8 * 32) + 2)];	// L20, [5,7)
        float v17 = v0[(((v5 * 1024) + (v8 * 32)) + 2)];	// L21, [5,7)
        float v18 = v16 * v17;	// L22, [7,11)
        float v19 = v15 + v18;	// L23, [11,16)
        float v20 = v2[((v8 * 32) + 3)];	// L24, [10,12)
        float v21 = v0[(((v5 * 1024) + (v8 * 32)) + 3)];	// L25, [10,12)
        float v22 = v20 * v21;	// L26, [12,16)
        float v23 = v19 + v22;	// L27, [16,21)
        float v24 = v2[((v8 * 32) + 4)];	// L28, [15,17)
        float v25 = v0[(((v5 * 1024) + (v8 * 32)) + 4)];	// L29, [15,17)
        float v26 = v24 * v25;	// L30, [17,21)
        float v27 = v23 + v26;	// L31, [21,26)
        float v28 = v2[((v8 * 32) + 5)];	// L32, [20,22)
        float v29 = v0[(((v5 * 1024) + (v8 * 32)) + 5)];	// L33, [20,22)
        float v30 = v28 * v29;	// L34, [22,26)
        float v31 = v27 + v30;	// L35, [26,31)
        float v32 = v2[((v8 * 32) + 6)];	// L36, [25,27)
        float v33 = v0[(((v5 * 1024) + (v8 * 32)) + 6)];	// L37, [25,27)
        float v34 = v32 * v33;	// L38, [27,31)
        float v35 = v31 + v34;	// L39, [31,36)
        float v36 = v2[((v8 * 32) + 7)];	// L40, [30,32)
        float v37 = v0[(((v5 * 1024) + (v8 * 32)) + 7)];	// L41, [30,32)
        float v38 = v36 * v37;	// L42, [32,36)
        float v39 = v35 + v38;	// L43, [36,41)
        float v40 = v2[((v8 * 32) + 8)];	// L44, [35,37)
        float v41 = v0[(((v5 * 1024) + (v8 * 32)) + 8)];	// L45, [35,37)
        float v42 = v40 * v41;	// L46, [37,41)
        float v43 = v39 + v42;	// L47, [41,46)
        float v44 = v2[((v8 * 32) + 9)];	// L48, [40,42)
        float v45 = v0[(((v5 * 1024) + (v8 * 32)) + 9)];	// L49, [40,42)
        float v46 = v44 * v45;	// L50, [42,46)
        float v47 = v43 + v46;	// L51, [46,51)
        float v48 = v2[((v8 * 32) + 10)];	// L52, [45,47)
        float v49 = v0[(((v5 * 1024) + (v8 * 32)) + 10)];	// L53, [45,47)
        float v50 = v48 * v49;	// L54, [47,51)
        float v51 = v47 + v50;	// L55, [51,56)
        float v52 = v2[((v8 * 32) + 11)];	// L56, [50,52)
        float v53 = v0[(((v5 * 1024) + (v8 * 32)) + 11)];	// L57, [50,52)
        float v54 = v52 * v53;	// L58, [52,56)
        float v55 = v51 + v54;	// L59, [56,61)
        float v56 = v2[((v8 * 32) + 12)];	// L60, [55,57)
        float v57 = v0[(((v5 * 1024) + (v8 * 32)) + 12)];	// L61, [55,57)
        float v58 = v56 * v57;	// L62, [57,61)
        float v59 = v55 + v58;	// L63, [61,66)
        float v60 = v2[((v8 * 32) + 13)];	// L64, [60,62)
        float v61 = v0[(((v5 * 1024) + (v8 * 32)) + 13)];	// L65, [60,62)
        float v62 = v60 * v61;	// L66, [62,66)
        float v63 = v59 + v62;	// L67, [66,71)
        float v64 = v2[((v8 * 32) + 14)];	// L68, [65,67)
        float v65 = v0[(((v5 * 1024) + (v8 * 32)) + 14)];	// L69, [65,67)
        float v66 = v64 * v65;	// L70, [67,71)
        float v67 = v63 + v66;	// L71, [71,76)
        float v68 = v2[((v8 * 32) + 15)];	// L72, [70,72)
        float v69 = v0[(((v5 * 1024) + (v8 * 32)) + 15)];	// L73, [70,72)
        float v70 = v68 * v69;	// L74, [72,76)
        float v71 = v67 + v70;	// L75, [76,81)
        float v72 = v2[((v8 * 32) + 16)];	// L76, [75,77)
        float v73 = v0[(((v5 * 1024) + (v8 * 32)) + 16)];	// L77, [75,77)
        float v74 = v72 * v73;	// L78, [77,81)
        float v75 = v71 + v74;	// L79, [81,86)
        float v76 = v2[((v8 * 32) + 17)];	// L80, [80,82)
        float v77 = v0[(((v5 * 1024) + (v8 * 32)) + 17)];	// L81, [80,82)
        float v78 = v76 * v77;	// L82, [82,86)
        float v79 = v75 + v78;	// L83, [86,91)
        float v80 = v2[((v8 * 32) + 18)];	// L84, [85,87)
        float v81 = v0[(((v5 * 1024) + (v8 * 32)) + 18)];	// L85, [85,87)
        float v82 = v80 * v81;	// L86, [87,91)
        float v83 = v79 + v82;	// L87, [91,96)
        float v84 = v2[((v8 * 32) + 19)];	// L88, [90,92)
        float v85 = v0[(((v5 * 1024) + (v8 * 32)) + 19)];	// L89, [90,92)
        float v86 = v84 * v85;	// L90, [92,96)
        float v87 = v83 + v86;	// L91, [96,101)
        float v88 = v2[((v8 * 32) + 20)];	// L92, [95,97)
        float v89 = v0[(((v5 * 1024) + (v8 * 32)) + 20)];	// L93, [95,97)
        float v90 = v88 * v89;	// L94, [97,101)
        float v91 = v87 + v90;	// L95, [101,106)
        float v92 = v2[((v8 * 32) + 21)];	// L96, [100,102)
        float v93 = v0[(((v5 * 1024) + (v8 * 32)) + 21)];	// L97, [100,102)
        float v94 = v92 * v93;	// L98, [102,106)
        float v95 = v91 + v94;	// L99, [106,111)
        float v96 = v2[((v8 * 32) + 22)];	// L100, [105,107)
        float v97 = v0[(((v5 * 1024) + (v8 * 32)) + 22)];	// L101, [105,107)
        float v98 = v96 * v97;	// L102, [107,111)
        float v99 = v95 + v98;	// L103, [111,116)
        float v100 = v2[((v8 * 32) + 23)];	// L104, [110,112)
        float v101 = v0[(((v5 * 1024) + (v8 * 32)) + 23)];	// L105, [110,112)
        float v102 = v100 * v101;	// L106, [112,116)
        float v103 = v99 + v102;	// L107, [116,121)
        float v104 = v2[((v8 * 32) + 24)];	// L108, [115,117)
        float v105 = v0[(((v5 * 1024) + (v8 * 32)) + 24)];	// L109, [115,117)
        float v106 = v104 * v105;	// L110, [117,121)
        float v107 = v103 + v106;	// L111, [121,126)
        float v108 = v2[((v8 * 32) + 25)];	// L112, [120,122)
        float v109 = v0[(((v5 * 1024) + (v8 * 32)) + 25)];	// L113, [120,122)
        float v110 = v108 * v109;	// L114, [122,126)
        float v111 = v107 + v110;	// L115, [126,131)
        float v112 = v2[((v8 * 32) + 26)];	// L116, [125,127)
        float v113 = v0[(((v5 * 1024) + (v8 * 32)) + 26)];	// L117, [125,127)
        float v114 = v112 * v113;	// L118, [127,131)
        float v115 = v111 + v114;	// L119, [131,136)
        float v116 = v2[((v8 * 32) + 27)];	// L120, [130,132)
        float v117 = v0[(((v5 * 1024) + (v8 * 32)) + 27)];	// L121, [130,132)
        float v118 = v116 * v117;	// L122, [132,136)
        float v119 = v115 + v118;	// L123, [136,141)
        float v120 = v2[((v8 * 32) + 28)];	// L124, [135,137)
        float v121 = v0[(((v5 * 1024) + (v8 * 32)) + 28)];	// L125, [135,137)
        float v122 = v120 * v121;	// L126, [137,141)
        float v123 = v119 + v122;	// L127, [141,146)
        float v124 = v2[((v8 * 32) + 29)];	// L128, [140,142)
        float v125 = v0[(((v5 * 1024) + (v8 * 32)) + 29)];	// L129, [140,142)
        float v126 = v124 * v125;	// L130, [142,146)
        float v127 = v123 + v126;	// L131, [146,151)
        float v128 = v2[((v8 * 32) + 30)];	// L132, [145,147)
        float v129 = v0[(((v5 * 1024) + (v8 * 32)) + 30)];	// L133, [145,147)
        float v130 = v128 * v129;	// L134, [147,151)
        float v131 = v127 + v130;	// L135, [151,156)
        float v132 = v2[((v8 * 32) + 31)];	// L136, [150,152)
        float v133 = v0[(((v5 * 1024) + (v8 * 32)) + 31)];	// L137, [150,152)
        float v134 = v132 * v133;	// L138, [152,156)
        float v135 = v131 + v134;	// L139, [156,161)
        float v136 = v6[0];	// L140, [160,161)
        float v137 = v136 + v135;	// L141, [161,166)
        v6[0] = v137;	// L142, [166,167)
        v7[0] = v137;	// L143, [166,167)
      }
      float v138 = v7[0];	// L145, [387,388)
      float v139 = -(v138);	// L146, [388,388)
      float v140 = exp(v139);	// L147, [388,397)
      float v141 = 1.000000 + v140;	// L148, [397,402)
      float v142 = 1.000000 / v141;	// L149, [402,418)
      for (int v143 = 0; v143 < 32; v143 += 1) {	// L150, [418,463), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        int32_t v144 = v1[v5];	// L151, [0,2)
        float v145 = v144;	// L152, [2,2)
        float v146 = v142 - v145;	// L153, [2,7)
        float v147 = v0[((v5 * 1024) + (v143 * 32))];	// L154, [5,7)
        float v148 = v146 * v147;	// L155, [7,11)
        v3[(v143 * 32)] = v148;	// L156, [11,12)
        float v149 = v0[(((v5 * 1024) + (v143 * 32)) + 1)];	// L157, [5,7)
        float v150 = v146 * v149;	// L158, [7,11)
        v3[((v143 * 32) + 1)] = v150;	// L159, [11,12)
        float v151 = v0[(((v5 * 1024) + (v143 * 32)) + 2)];	// L160, [5,7)
        float v152 = v146 * v151;	// L161, [7,11)
        v3[((v143 * 32) + 2)] = v152;	// L162, [11,12)
        float v153 = v0[(((v5 * 1024) + (v143 * 32)) + 3)];	// L163, [5,7)
        float v154 = v146 * v153;	// L164, [7,11)
        v3[((v143 * 32) + 3)] = v154;	// L165, [11,12)
        float v155 = v0[(((v5 * 1024) + (v143 * 32)) + 4)];	// L166, [5,7)
        float v156 = v146 * v155;	// L167, [7,11)
        v3[((v143 * 32) + 4)] = v156;	// L168, [11,12)
        float v157 = v0[(((v5 * 1024) + (v143 * 32)) + 5)];	// L169, [5,7)
        float v158 = v146 * v157;	// L170, [7,11)
        v3[((v143 * 32) + 5)] = v158;	// L171, [11,12)
        float v159 = v0[(((v5 * 1024) + (v143 * 32)) + 6)];	// L172, [5,7)
        float v160 = v146 * v159;	// L173, [7,11)
        v3[((v143 * 32) + 6)] = v160;	// L174, [11,12)
        float v161 = v0[(((v5 * 1024) + (v143 * 32)) + 7)];	// L175, [5,7)
        float v162 = v146 * v161;	// L176, [7,11)
        v3[((v143 * 32) + 7)] = v162;	// L177, [11,12)
        float v163 = v0[(((v5 * 1024) + (v143 * 32)) + 8)];	// L178, [5,7)
        float v164 = v146 * v163;	// L179, [7,11)
        v3[((v143 * 32) + 8)] = v164;	// L180, [11,12)
        float v165 = v0[(((v5 * 1024) + (v143 * 32)) + 9)];	// L181, [5,7)
        float v166 = v146 * v165;	// L182, [7,11)
        v3[((v143 * 32) + 9)] = v166;	// L183, [11,12)
        float v167 = v0[(((v5 * 1024) + (v143 * 32)) + 10)];	// L184, [5,7)
        float v168 = v146 * v167;	// L185, [7,11)
        v3[((v143 * 32) + 10)] = v168;	// L186, [11,12)
        float v169 = v0[(((v5 * 1024) + (v143 * 32)) + 11)];	// L187, [5,7)
        float v170 = v146 * v169;	// L188, [7,11)
        v3[((v143 * 32) + 11)] = v170;	// L189, [11,12)
        float v171 = v0[(((v5 * 1024) + (v143 * 32)) + 12)];	// L190, [5,7)
        float v172 = v146 * v171;	// L191, [7,11)
        v3[((v143 * 32) + 12)] = v172;	// L192, [11,12)
        float v173 = v0[(((v5 * 1024) + (v143 * 32)) + 13)];	// L193, [5,7)
        float v174 = v146 * v173;	// L194, [7,11)
        v3[((v143 * 32) + 13)] = v174;	// L195, [11,12)
        float v175 = v0[(((v5 * 1024) + (v143 * 32)) + 14)];	// L196, [5,7)
        float v176 = v146 * v175;	// L197, [7,11)
        v3[((v143 * 32) + 14)] = v176;	// L198, [11,12)
        float v177 = v0[(((v5 * 1024) + (v143 * 32)) + 15)];	// L199, [5,7)
        float v178 = v146 * v177;	// L200, [7,11)
        v3[((v143 * 32) + 15)] = v178;	// L201, [11,12)
        float v179 = v0[(((v5 * 1024) + (v143 * 32)) + 16)];	// L202, [5,7)
        float v180 = v146 * v179;	// L203, [7,11)
        v3[((v143 * 32) + 16)] = v180;	// L204, [11,12)
        float v181 = v0[(((v5 * 1024) + (v143 * 32)) + 17)];	// L205, [5,7)
        float v182 = v146 * v181;	// L206, [7,11)
        v3[((v143 * 32) + 17)] = v182;	// L207, [11,12)
        float v183 = v0[(((v5 * 1024) + (v143 * 32)) + 18)];	// L208, [5,7)
        float v184 = v146 * v183;	// L209, [7,11)
        v3[((v143 * 32) + 18)] = v184;	// L210, [11,12)
        float v185 = v0[(((v5 * 1024) + (v143 * 32)) + 19)];	// L211, [5,7)
        float v186 = v146 * v185;	// L212, [7,11)
        v3[((v143 * 32) + 19)] = v186;	// L213, [11,12)
        float v187 = v0[(((v5 * 1024) + (v143 * 32)) + 20)];	// L214, [5,7)
        float v188 = v146 * v187;	// L215, [7,11)
        v3[((v143 * 32) + 20)] = v188;	// L216, [11,12)
        float v189 = v0[(((v5 * 1024) + (v143 * 32)) + 21)];	// L217, [5,7)
        float v190 = v146 * v189;	// L218, [7,11)
        v3[((v143 * 32) + 21)] = v190;	// L219, [11,12)
        float v191 = v0[(((v5 * 1024) + (v143 * 32)) + 22)];	// L220, [5,7)
        float v192 = v146 * v191;	// L221, [7,11)
        v3[((v143 * 32) + 22)] = v192;	// L222, [11,12)
        float v193 = v0[(((v5 * 1024) + (v143 * 32)) + 23)];	// L223, [5,7)
        float v194 = v146 * v193;	// L224, [7,11)
        v3[((v143 * 32) + 23)] = v194;	// L225, [11,12)
        float v195 = v0[(((v5 * 1024) + (v143 * 32)) + 24)];	// L226, [5,7)
        float v196 = v146 * v195;	// L227, [7,11)
        v3[((v143 * 32) + 24)] = v196;	// L228, [11,12)
        float v197 = v0[(((v5 * 1024) + (v143 * 32)) + 25)];	// L229, [5,7)
        float v198 = v146 * v197;	// L230, [7,11)
        v3[((v143 * 32) + 25)] = v198;	// L231, [11,12)
        float v199 = v0[(((v5 * 1024) + (v143 * 32)) + 26)];	// L232, [5,7)
        float v200 = v146 * v199;	// L233, [7,11)
        v3[((v143 * 32) + 26)] = v200;	// L234, [11,12)
        float v201 = v0[(((v5 * 1024) + (v143 * 32)) + 27)];	// L235, [5,7)
        float v202 = v146 * v201;	// L236, [7,11)
        v3[((v143 * 32) + 27)] = v202;	// L237, [11,12)
        float v203 = v0[(((v5 * 1024) + (v143 * 32)) + 28)];	// L238, [5,7)
        float v204 = v146 * v203;	// L239, [7,11)
        v3[((v143 * 32) + 28)] = v204;	// L240, [11,12)
        float v205 = v0[(((v5 * 1024) + (v143 * 32)) + 29)];	// L241, [5,7)
        float v206 = v146 * v205;	// L242, [7,11)
        v3[((v143 * 32) + 29)] = v206;	// L243, [11,12)
        float v207 = v0[(((v5 * 1024) + (v143 * 32)) + 30)];	// L244, [5,7)
        float v208 = v146 * v207;	// L245, [7,11)
        v3[((v143 * 32) + 30)] = v208;	// L246, [11,12)
        float v209 = v0[(((v5 * 1024) + (v143 * 32)) + 31)];	// L247, [5,7)
        float v210 = v146 * v209;	// L248, [7,11)
        v3[((v143 * 32) + 31)] = v210;	// L249, [11,12)
      }
      for (int v211 = 0; v211 < 32; v211 += 1) {	// L251, [463,508), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v212 = v3[(v211 * 32)];	// L252, [0,2)
        float v213 = -60000.000000 * v212;	// L253, [2,6)
        float v214 = v2[(v211 * 32)];	// L254, [4,6)
        float v215 = v214 + v213;	// L255, [6,11)
        v2[(v211 * 32)] = v215;	// L256, [11,12)
        float v216 = v3[((v211 * 32) + 1)];	// L257, [0,2)
        float v217 = -60000.000000 * v216;	// L258, [2,6)
        float v218 = v2[((v211 * 32) + 1)];	// L259, [4,6)
        float v219 = v218 + v217;	// L260, [6,11)
        v2[((v211 * 32) + 1)] = v219;	// L261, [11,12)
        float v220 = v3[((v211 * 32) + 2)];	// L262, [0,2)
        float v221 = -60000.000000 * v220;	// L263, [2,6)
        float v222 = v2[((v211 * 32) + 2)];	// L264, [4,6)
        float v223 = v222 + v221;	// L265, [6,11)
        v2[((v211 * 32) + 2)] = v223;	// L266, [11,12)
        float v224 = v3[((v211 * 32) + 3)];	// L267, [0,2)
        float v225 = -60000.000000 * v224;	// L268, [2,6)
        float v226 = v2[((v211 * 32) + 3)];	// L269, [4,6)
        float v227 = v226 + v225;	// L270, [6,11)
        v2[((v211 * 32) + 3)] = v227;	// L271, [11,12)
        float v228 = v3[((v211 * 32) + 4)];	// L272, [0,2)
        float v229 = -60000.000000 * v228;	// L273, [2,6)
        float v230 = v2[((v211 * 32) + 4)];	// L274, [4,6)
        float v231 = v230 + v229;	// L275, [6,11)
        v2[((v211 * 32) + 4)] = v231;	// L276, [11,12)
        float v232 = v3[((v211 * 32) + 5)];	// L277, [0,2)
        float v233 = -60000.000000 * v232;	// L278, [2,6)
        float v234 = v2[((v211 * 32) + 5)];	// L279, [4,6)
        float v235 = v234 + v233;	// L280, [6,11)
        v2[((v211 * 32) + 5)] = v235;	// L281, [11,12)
        float v236 = v3[((v211 * 32) + 6)];	// L282, [0,2)
        float v237 = -60000.000000 * v236;	// L283, [2,6)
        float v238 = v2[((v211 * 32) + 6)];	// L284, [4,6)
        float v239 = v238 + v237;	// L285, [6,11)
        v2[((v211 * 32) + 6)] = v239;	// L286, [11,12)
        float v240 = v3[((v211 * 32) + 7)];	// L287, [0,2)
        float v241 = -60000.000000 * v240;	// L288, [2,6)
        float v242 = v2[((v211 * 32) + 7)];	// L289, [4,6)
        float v243 = v242 + v241;	// L290, [6,11)
        v2[((v211 * 32) + 7)] = v243;	// L291, [11,12)
        float v244 = v3[((v211 * 32) + 8)];	// L292, [0,2)
        float v245 = -60000.000000 * v244;	// L293, [2,6)
        float v246 = v2[((v211 * 32) + 8)];	// L294, [4,6)
        float v247 = v246 + v245;	// L295, [6,11)
        v2[((v211 * 32) + 8)] = v247;	// L296, [11,12)
        float v248 = v3[((v211 * 32) + 9)];	// L297, [0,2)
        float v249 = -60000.000000 * v248;	// L298, [2,6)
        float v250 = v2[((v211 * 32) + 9)];	// L299, [4,6)
        float v251 = v250 + v249;	// L300, [6,11)
        v2[((v211 * 32) + 9)] = v251;	// L301, [11,12)
        float v252 = v3[((v211 * 32) + 10)];	// L302, [0,2)
        float v253 = -60000.000000 * v252;	// L303, [2,6)
        float v254 = v2[((v211 * 32) + 10)];	// L304, [4,6)
        float v255 = v254 + v253;	// L305, [6,11)
        v2[((v211 * 32) + 10)] = v255;	// L306, [11,12)
        float v256 = v3[((v211 * 32) + 11)];	// L307, [0,2)
        float v257 = -60000.000000 * v256;	// L308, [2,6)
        float v258 = v2[((v211 * 32) + 11)];	// L309, [4,6)
        float v259 = v258 + v257;	// L310, [6,11)
        v2[((v211 * 32) + 11)] = v259;	// L311, [11,12)
        float v260 = v3[((v211 * 32) + 12)];	// L312, [0,2)
        float v261 = -60000.000000 * v260;	// L313, [2,6)
        float v262 = v2[((v211 * 32) + 12)];	// L314, [4,6)
        float v263 = v262 + v261;	// L315, [6,11)
        v2[((v211 * 32) + 12)] = v263;	// L316, [11,12)
        float v264 = v3[((v211 * 32) + 13)];	// L317, [0,2)
        float v265 = -60000.000000 * v264;	// L318, [2,6)
        float v266 = v2[((v211 * 32) + 13)];	// L319, [4,6)
        float v267 = v266 + v265;	// L320, [6,11)
        v2[((v211 * 32) + 13)] = v267;	// L321, [11,12)
        float v268 = v3[((v211 * 32) + 14)];	// L322, [0,2)
        float v269 = -60000.000000 * v268;	// L323, [2,6)
        float v270 = v2[((v211 * 32) + 14)];	// L324, [4,6)
        float v271 = v270 + v269;	// L325, [6,11)
        v2[((v211 * 32) + 14)] = v271;	// L326, [11,12)
        float v272 = v3[((v211 * 32) + 15)];	// L327, [0,2)
        float v273 = -60000.000000 * v272;	// L328, [2,6)
        float v274 = v2[((v211 * 32) + 15)];	// L329, [4,6)
        float v275 = v274 + v273;	// L330, [6,11)
        v2[((v211 * 32) + 15)] = v275;	// L331, [11,12)
        float v276 = v3[((v211 * 32) + 16)];	// L332, [0,2)
        float v277 = -60000.000000 * v276;	// L333, [2,6)
        float v278 = v2[((v211 * 32) + 16)];	// L334, [4,6)
        float v279 = v278 + v277;	// L335, [6,11)
        v2[((v211 * 32) + 16)] = v279;	// L336, [11,12)
        float v280 = v3[((v211 * 32) + 17)];	// L337, [0,2)
        float v281 = -60000.000000 * v280;	// L338, [2,6)
        float v282 = v2[((v211 * 32) + 17)];	// L339, [4,6)
        float v283 = v282 + v281;	// L340, [6,11)
        v2[((v211 * 32) + 17)] = v283;	// L341, [11,12)
        float v284 = v3[((v211 * 32) + 18)];	// L342, [0,2)
        float v285 = -60000.000000 * v284;	// L343, [2,6)
        float v286 = v2[((v211 * 32) + 18)];	// L344, [4,6)
        float v287 = v286 + v285;	// L345, [6,11)
        v2[((v211 * 32) + 18)] = v287;	// L346, [11,12)
        float v288 = v3[((v211 * 32) + 19)];	// L347, [0,2)
        float v289 = -60000.000000 * v288;	// L348, [2,6)
        float v290 = v2[((v211 * 32) + 19)];	// L349, [4,6)
        float v291 = v290 + v289;	// L350, [6,11)
        v2[((v211 * 32) + 19)] = v291;	// L351, [11,12)
        float v292 = v3[((v211 * 32) + 20)];	// L352, [0,2)
        float v293 = -60000.000000 * v292;	// L353, [2,6)
        float v294 = v2[((v211 * 32) + 20)];	// L354, [4,6)
        float v295 = v294 + v293;	// L355, [6,11)
        v2[((v211 * 32) + 20)] = v295;	// L356, [11,12)
        float v296 = v3[((v211 * 32) + 21)];	// L357, [0,2)
        float v297 = -60000.000000 * v296;	// L358, [2,6)
        float v298 = v2[((v211 * 32) + 21)];	// L359, [4,6)
        float v299 = v298 + v297;	// L360, [6,11)
        v2[((v211 * 32) + 21)] = v299;	// L361, [11,12)
        float v300 = v3[((v211 * 32) + 22)];	// L362, [0,2)
        float v301 = -60000.000000 * v300;	// L363, [2,6)
        float v302 = v2[((v211 * 32) + 22)];	// L364, [4,6)
        float v303 = v302 + v301;	// L365, [6,11)
        v2[((v211 * 32) + 22)] = v303;	// L366, [11,12)
        float v304 = v3[((v211 * 32) + 23)];	// L367, [0,2)
        float v305 = -60000.000000 * v304;	// L368, [2,6)
        float v306 = v2[((v211 * 32) + 23)];	// L369, [4,6)
        float v307 = v306 + v305;	// L370, [6,11)
        v2[((v211 * 32) + 23)] = v307;	// L371, [11,12)
        float v308 = v3[((v211 * 32) + 24)];	// L372, [0,2)
        float v309 = -60000.000000 * v308;	// L373, [2,6)
        float v310 = v2[((v211 * 32) + 24)];	// L374, [4,6)
        float v311 = v310 + v309;	// L375, [6,11)
        v2[((v211 * 32) + 24)] = v311;	// L376, [11,12)
        float v312 = v3[((v211 * 32) + 25)];	// L377, [0,2)
        float v313 = -60000.000000 * v312;	// L378, [2,6)
        float v314 = v2[((v211 * 32) + 25)];	// L379, [4,6)
        float v315 = v314 + v313;	// L380, [6,11)
        v2[((v211 * 32) + 25)] = v315;	// L381, [11,12)
        float v316 = v3[((v211 * 32) + 26)];	// L382, [0,2)
        float v317 = -60000.000000 * v316;	// L383, [2,6)
        float v318 = v2[((v211 * 32) + 26)];	// L384, [4,6)
        float v319 = v318 + v317;	// L385, [6,11)
        v2[((v211 * 32) + 26)] = v319;	// L386, [11,12)
        float v320 = v3[((v211 * 32) + 27)];	// L387, [0,2)
        float v321 = -60000.000000 * v320;	// L388, [2,6)
        float v322 = v2[((v211 * 32) + 27)];	// L389, [4,6)
        float v323 = v322 + v321;	// L390, [6,11)
        v2[((v211 * 32) + 27)] = v323;	// L391, [11,12)
        float v324 = v3[((v211 * 32) + 28)];	// L392, [0,2)
        float v325 = -60000.000000 * v324;	// L393, [2,6)
        float v326 = v2[((v211 * 32) + 28)];	// L394, [4,6)
        float v327 = v326 + v325;	// L395, [6,11)
        v2[((v211 * 32) + 28)] = v327;	// L396, [11,12)
        float v328 = v3[((v211 * 32) + 29)];	// L397, [0,2)
        float v329 = -60000.000000 * v328;	// L398, [2,6)
        float v330 = v2[((v211 * 32) + 29)];	// L399, [4,6)
        float v331 = v330 + v329;	// L400, [6,11)
        v2[((v211 * 32) + 29)] = v331;	// L401, [11,12)
        float v332 = v3[((v211 * 32) + 30)];	// L402, [0,2)
        float v333 = -60000.000000 * v332;	// L403, [2,6)
        float v334 = v2[((v211 * 32) + 30)];	// L404, [4,6)
        float v335 = v334 + v333;	// L405, [6,11)
        v2[((v211 * 32) + 30)] = v335;	// L406, [11,12)
        float v336 = v3[((v211 * 32) + 31)];	// L407, [0,2)
        float v337 = -60000.000000 * v336;	// L408, [2,6)
        float v338 = v2[((v211 * 32) + 31)];	// L409, [4,6)
        float v339 = v338 + v337;	// L410, [6,11)
        v2[((v211 * 32) + 31)] = v339;	// L411, [11,12)
      }
    }
  }
}

