
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=23053, interval=23053
/// DSP=180
void process_180(
  float v0[1920][1080]
) {	// L3, [0,23053)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0

  #pragma HLS array_partition variable=v0 cyclic factor=10 dim=1
  #pragma HLS array_partition variable=v0 cyclic factor=9 dim=2
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  for (int v1 = 0; v1 < 192; v1 += 1) {	// L6, [0,23051), iterCycle=10, II=1
    for (int v2 = 0; v2 < 120; v2 += 1) {	// L7, [0,131), iterCycle=10, II=1
      #pragma HLS pipeline II=1
      float v3 = v0[(v1 * 10)][(v2 * 9)];	// L8, [0,2)
      bool v4 = v3 < 0.000000;	// L9, [2,4)
      if (v4) {	// L10, [4,10)
        float v5 = v3 + 180.000000;	// L11, [4,9)
        v0[(v1 * 10)][(v2 * 9)] = v5;	// L12, [9,10)
      }
      float v6 = v0[(v1 * 10)][((v2 * 9) + 1)];	// L14, [0,2)
      bool v7 = v6 < 0.000000;	// L15, [2,4)
      if (v7) {	// L16, [4,10)
        float v8 = v6 + 180.000000;	// L17, [4,9)
        v0[(v1 * 10)][((v2 * 9) + 1)] = v8;	// L18, [9,10)
      }
      float v9 = v0[(v1 * 10)][((v2 * 9) + 2)];	// L20, [0,2)
      bool v10 = v9 < 0.000000;	// L21, [2,4)
      if (v10) {	// L22, [4,10)
        float v11 = v9 + 180.000000;	// L23, [4,9)
        v0[(v1 * 10)][((v2 * 9) + 2)] = v11;	// L24, [9,10)
      }
      float v12 = v0[(v1 * 10)][((v2 * 9) + 3)];	// L26, [0,2)
      bool v13 = v12 < 0.000000;	// L27, [2,4)
      if (v13) {	// L28, [4,10)
        float v14 = v12 + 180.000000;	// L29, [4,9)
        v0[(v1 * 10)][((v2 * 9) + 3)] = v14;	// L30, [9,10)
      }
      float v15 = v0[(v1 * 10)][((v2 * 9) + 4)];	// L32, [0,2)
      bool v16 = v15 < 0.000000;	// L33, [2,4)
      if (v16) {	// L34, [4,10)
        float v17 = v15 + 180.000000;	// L35, [4,9)
        v0[(v1 * 10)][((v2 * 9) + 4)] = v17;	// L36, [9,10)
      }
      float v18 = v0[(v1 * 10)][((v2 * 9) + 5)];	// L38, [0,2)
      bool v19 = v18 < 0.000000;	// L39, [2,4)
      if (v19) {	// L40, [4,10)
        float v20 = v18 + 180.000000;	// L41, [4,9)
        v0[(v1 * 10)][((v2 * 9) + 5)] = v20;	// L42, [9,10)
      }
      float v21 = v0[(v1 * 10)][((v2 * 9) + 6)];	// L44, [0,2)
      bool v22 = v21 < 0.000000;	// L45, [2,4)
      if (v22) {	// L46, [4,10)
        float v23 = v21 + 180.000000;	// L47, [4,9)
        v0[(v1 * 10)][((v2 * 9) + 6)] = v23;	// L48, [9,10)
      }
      float v24 = v0[(v1 * 10)][((v2 * 9) + 7)];	// L50, [0,2)
      bool v25 = v24 < 0.000000;	// L51, [2,4)
      if (v25) {	// L52, [4,10)
        float v26 = v24 + 180.000000;	// L53, [4,9)
        v0[(v1 * 10)][((v2 * 9) + 7)] = v26;	// L54, [9,10)
      }
      float v27 = v0[(v1 * 10)][((v2 * 9) + 8)];	// L56, [0,2)
      bool v28 = v27 < 0.000000;	// L57, [2,4)
      if (v28) {	// L58, [4,10)
        float v29 = v27 + 180.000000;	// L59, [4,9)
        v0[(v1 * 10)][((v2 * 9) + 8)] = v29;	// L60, [9,10)
      }
      float v30 = v0[((v1 * 10) + 1)][(v2 * 9)];	// L62, [0,2)
      bool v31 = v30 < 0.000000;	// L63, [2,4)
      if (v31) {	// L64, [4,10)
        float v32 = v30 + 180.000000;	// L65, [4,9)
        v0[((v1 * 10) + 1)][(v2 * 9)] = v32;	// L66, [9,10)
      }
      float v33 = v0[((v1 * 10) + 1)][((v2 * 9) + 1)];	// L68, [0,2)
      bool v34 = v33 < 0.000000;	// L69, [2,4)
      if (v34) {	// L70, [4,10)
        float v35 = v33 + 180.000000;	// L71, [4,9)
        v0[((v1 * 10) + 1)][((v2 * 9) + 1)] = v35;	// L72, [9,10)
      }
      float v36 = v0[((v1 * 10) + 1)][((v2 * 9) + 2)];	// L74, [0,2)
      bool v37 = v36 < 0.000000;	// L75, [2,4)
      if (v37) {	// L76, [4,10)
        float v38 = v36 + 180.000000;	// L77, [4,9)
        v0[((v1 * 10) + 1)][((v2 * 9) + 2)] = v38;	// L78, [9,10)
      }
      float v39 = v0[((v1 * 10) + 1)][((v2 * 9) + 3)];	// L80, [0,2)
      bool v40 = v39 < 0.000000;	// L81, [2,4)
      if (v40) {	// L82, [4,10)
        float v41 = v39 + 180.000000;	// L83, [4,9)
        v0[((v1 * 10) + 1)][((v2 * 9) + 3)] = v41;	// L84, [9,10)
      }
      float v42 = v0[((v1 * 10) + 1)][((v2 * 9) + 4)];	// L86, [0,2)
      bool v43 = v42 < 0.000000;	// L87, [2,4)
      if (v43) {	// L88, [4,10)
        float v44 = v42 + 180.000000;	// L89, [4,9)
        v0[((v1 * 10) + 1)][((v2 * 9) + 4)] = v44;	// L90, [9,10)
      }
      float v45 = v0[((v1 * 10) + 1)][((v2 * 9) + 5)];	// L92, [0,2)
      bool v46 = v45 < 0.000000;	// L93, [2,4)
      if (v46) {	// L94, [4,10)
        float v47 = v45 + 180.000000;	// L95, [4,9)
        v0[((v1 * 10) + 1)][((v2 * 9) + 5)] = v47;	// L96, [9,10)
      }
      float v48 = v0[((v1 * 10) + 1)][((v2 * 9) + 6)];	// L98, [0,2)
      bool v49 = v48 < 0.000000;	// L99, [2,4)
      if (v49) {	// L100, [4,10)
        float v50 = v48 + 180.000000;	// L101, [4,9)
        v0[((v1 * 10) + 1)][((v2 * 9) + 6)] = v50;	// L102, [9,10)
      }
      float v51 = v0[((v1 * 10) + 1)][((v2 * 9) + 7)];	// L104, [0,2)
      bool v52 = v51 < 0.000000;	// L105, [2,4)
      if (v52) {	// L106, [4,10)
        float v53 = v51 + 180.000000;	// L107, [4,9)
        v0[((v1 * 10) + 1)][((v2 * 9) + 7)] = v53;	// L108, [9,10)
      }
      float v54 = v0[((v1 * 10) + 1)][((v2 * 9) + 8)];	// L110, [0,2)
      bool v55 = v54 < 0.000000;	// L111, [2,4)
      if (v55) {	// L112, [4,10)
        float v56 = v54 + 180.000000;	// L113, [4,9)
        v0[((v1 * 10) + 1)][((v2 * 9) + 8)] = v56;	// L114, [9,10)
      }
      float v57 = v0[((v1 * 10) + 2)][(v2 * 9)];	// L116, [0,2)
      bool v58 = v57 < 0.000000;	// L117, [2,4)
      if (v58) {	// L118, [4,10)
        float v59 = v57 + 180.000000;	// L119, [4,9)
        v0[((v1 * 10) + 2)][(v2 * 9)] = v59;	// L120, [9,10)
      }
      float v60 = v0[((v1 * 10) + 2)][((v2 * 9) + 1)];	// L122, [0,2)
      bool v61 = v60 < 0.000000;	// L123, [2,4)
      if (v61) {	// L124, [4,10)
        float v62 = v60 + 180.000000;	// L125, [4,9)
        v0[((v1 * 10) + 2)][((v2 * 9) + 1)] = v62;	// L126, [9,10)
      }
      float v63 = v0[((v1 * 10) + 2)][((v2 * 9) + 2)];	// L128, [0,2)
      bool v64 = v63 < 0.000000;	// L129, [2,4)
      if (v64) {	// L130, [4,10)
        float v65 = v63 + 180.000000;	// L131, [4,9)
        v0[((v1 * 10) + 2)][((v2 * 9) + 2)] = v65;	// L132, [9,10)
      }
      float v66 = v0[((v1 * 10) + 2)][((v2 * 9) + 3)];	// L134, [0,2)
      bool v67 = v66 < 0.000000;	// L135, [2,4)
      if (v67) {	// L136, [4,10)
        float v68 = v66 + 180.000000;	// L137, [4,9)
        v0[((v1 * 10) + 2)][((v2 * 9) + 3)] = v68;	// L138, [9,10)
      }
      float v69 = v0[((v1 * 10) + 2)][((v2 * 9) + 4)];	// L140, [0,2)
      bool v70 = v69 < 0.000000;	// L141, [2,4)
      if (v70) {	// L142, [4,10)
        float v71 = v69 + 180.000000;	// L143, [4,9)
        v0[((v1 * 10) + 2)][((v2 * 9) + 4)] = v71;	// L144, [9,10)
      }
      float v72 = v0[((v1 * 10) + 2)][((v2 * 9) + 5)];	// L146, [0,2)
      bool v73 = v72 < 0.000000;	// L147, [2,4)
      if (v73) {	// L148, [4,10)
        float v74 = v72 + 180.000000;	// L149, [4,9)
        v0[((v1 * 10) + 2)][((v2 * 9) + 5)] = v74;	// L150, [9,10)
      }
      float v75 = v0[((v1 * 10) + 2)][((v2 * 9) + 6)];	// L152, [0,2)
      bool v76 = v75 < 0.000000;	// L153, [2,4)
      if (v76) {	// L154, [4,10)
        float v77 = v75 + 180.000000;	// L155, [4,9)
        v0[((v1 * 10) + 2)][((v2 * 9) + 6)] = v77;	// L156, [9,10)
      }
      float v78 = v0[((v1 * 10) + 2)][((v2 * 9) + 7)];	// L158, [0,2)
      bool v79 = v78 < 0.000000;	// L159, [2,4)
      if (v79) {	// L160, [4,10)
        float v80 = v78 + 180.000000;	// L161, [4,9)
        v0[((v1 * 10) + 2)][((v2 * 9) + 7)] = v80;	// L162, [9,10)
      }
      float v81 = v0[((v1 * 10) + 2)][((v2 * 9) + 8)];	// L164, [0,2)
      bool v82 = v81 < 0.000000;	// L165, [2,4)
      if (v82) {	// L166, [4,10)
        float v83 = v81 + 180.000000;	// L167, [4,9)
        v0[((v1 * 10) + 2)][((v2 * 9) + 8)] = v83;	// L168, [9,10)
      }
      float v84 = v0[((v1 * 10) + 3)][(v2 * 9)];	// L170, [0,2)
      bool v85 = v84 < 0.000000;	// L171, [2,4)
      if (v85) {	// L172, [4,10)
        float v86 = v84 + 180.000000;	// L173, [4,9)
        v0[((v1 * 10) + 3)][(v2 * 9)] = v86;	// L174, [9,10)
      }
      float v87 = v0[((v1 * 10) + 3)][((v2 * 9) + 1)];	// L176, [0,2)
      bool v88 = v87 < 0.000000;	// L177, [2,4)
      if (v88) {	// L178, [4,10)
        float v89 = v87 + 180.000000;	// L179, [4,9)
        v0[((v1 * 10) + 3)][((v2 * 9) + 1)] = v89;	// L180, [9,10)
      }
      float v90 = v0[((v1 * 10) + 3)][((v2 * 9) + 2)];	// L182, [0,2)
      bool v91 = v90 < 0.000000;	// L183, [2,4)
      if (v91) {	// L184, [4,10)
        float v92 = v90 + 180.000000;	// L185, [4,9)
        v0[((v1 * 10) + 3)][((v2 * 9) + 2)] = v92;	// L186, [9,10)
      }
      float v93 = v0[((v1 * 10) + 3)][((v2 * 9) + 3)];	// L188, [0,2)
      bool v94 = v93 < 0.000000;	// L189, [2,4)
      if (v94) {	// L190, [4,10)
        float v95 = v93 + 180.000000;	// L191, [4,9)
        v0[((v1 * 10) + 3)][((v2 * 9) + 3)] = v95;	// L192, [9,10)
      }
      float v96 = v0[((v1 * 10) + 3)][((v2 * 9) + 4)];	// L194, [0,2)
      bool v97 = v96 < 0.000000;	// L195, [2,4)
      if (v97) {	// L196, [4,10)
        float v98 = v96 + 180.000000;	// L197, [4,9)
        v0[((v1 * 10) + 3)][((v2 * 9) + 4)] = v98;	// L198, [9,10)
      }
      float v99 = v0[((v1 * 10) + 3)][((v2 * 9) + 5)];	// L200, [0,2)
      bool v100 = v99 < 0.000000;	// L201, [2,4)
      if (v100) {	// L202, [4,10)
        float v101 = v99 + 180.000000;	// L203, [4,9)
        v0[((v1 * 10) + 3)][((v2 * 9) + 5)] = v101;	// L204, [9,10)
      }
      float v102 = v0[((v1 * 10) + 3)][((v2 * 9) + 6)];	// L206, [0,2)
      bool v103 = v102 < 0.000000;	// L207, [2,4)
      if (v103) {	// L208, [4,10)
        float v104 = v102 + 180.000000;	// L209, [4,9)
        v0[((v1 * 10) + 3)][((v2 * 9) + 6)] = v104;	// L210, [9,10)
      }
      float v105 = v0[((v1 * 10) + 3)][((v2 * 9) + 7)];	// L212, [0,2)
      bool v106 = v105 < 0.000000;	// L213, [2,4)
      if (v106) {	// L214, [4,10)
        float v107 = v105 + 180.000000;	// L215, [4,9)
        v0[((v1 * 10) + 3)][((v2 * 9) + 7)] = v107;	// L216, [9,10)
      }
      float v108 = v0[((v1 * 10) + 3)][((v2 * 9) + 8)];	// L218, [0,2)
      bool v109 = v108 < 0.000000;	// L219, [2,4)
      if (v109) {	// L220, [4,10)
        float v110 = v108 + 180.000000;	// L221, [4,9)
        v0[((v1 * 10) + 3)][((v2 * 9) + 8)] = v110;	// L222, [9,10)
      }
      float v111 = v0[((v1 * 10) + 4)][(v2 * 9)];	// L224, [0,2)
      bool v112 = v111 < 0.000000;	// L225, [2,4)
      if (v112) {	// L226, [4,10)
        float v113 = v111 + 180.000000;	// L227, [4,9)
        v0[((v1 * 10) + 4)][(v2 * 9)] = v113;	// L228, [9,10)
      }
      float v114 = v0[((v1 * 10) + 4)][((v2 * 9) + 1)];	// L230, [0,2)
      bool v115 = v114 < 0.000000;	// L231, [2,4)
      if (v115) {	// L232, [4,10)
        float v116 = v114 + 180.000000;	// L233, [4,9)
        v0[((v1 * 10) + 4)][((v2 * 9) + 1)] = v116;	// L234, [9,10)
      }
      float v117 = v0[((v1 * 10) + 4)][((v2 * 9) + 2)];	// L236, [0,2)
      bool v118 = v117 < 0.000000;	// L237, [2,4)
      if (v118) {	// L238, [4,10)
        float v119 = v117 + 180.000000;	// L239, [4,9)
        v0[((v1 * 10) + 4)][((v2 * 9) + 2)] = v119;	// L240, [9,10)
      }
      float v120 = v0[((v1 * 10) + 4)][((v2 * 9) + 3)];	// L242, [0,2)
      bool v121 = v120 < 0.000000;	// L243, [2,4)
      if (v121) {	// L244, [4,10)
        float v122 = v120 + 180.000000;	// L245, [4,9)
        v0[((v1 * 10) + 4)][((v2 * 9) + 3)] = v122;	// L246, [9,10)
      }
      float v123 = v0[((v1 * 10) + 4)][((v2 * 9) + 4)];	// L248, [0,2)
      bool v124 = v123 < 0.000000;	// L249, [2,4)
      if (v124) {	// L250, [4,10)
        float v125 = v123 + 180.000000;	// L251, [4,9)
        v0[((v1 * 10) + 4)][((v2 * 9) + 4)] = v125;	// L252, [9,10)
      }
      float v126 = v0[((v1 * 10) + 4)][((v2 * 9) + 5)];	// L254, [0,2)
      bool v127 = v126 < 0.000000;	// L255, [2,4)
      if (v127) {	// L256, [4,10)
        float v128 = v126 + 180.000000;	// L257, [4,9)
        v0[((v1 * 10) + 4)][((v2 * 9) + 5)] = v128;	// L258, [9,10)
      }
      float v129 = v0[((v1 * 10) + 4)][((v2 * 9) + 6)];	// L260, [0,2)
      bool v130 = v129 < 0.000000;	// L261, [2,4)
      if (v130) {	// L262, [4,10)
        float v131 = v129 + 180.000000;	// L263, [4,9)
        v0[((v1 * 10) + 4)][((v2 * 9) + 6)] = v131;	// L264, [9,10)
      }
      float v132 = v0[((v1 * 10) + 4)][((v2 * 9) + 7)];	// L266, [0,2)
      bool v133 = v132 < 0.000000;	// L267, [2,4)
      if (v133) {	// L268, [4,10)
        float v134 = v132 + 180.000000;	// L269, [4,9)
        v0[((v1 * 10) + 4)][((v2 * 9) + 7)] = v134;	// L270, [9,10)
      }
      float v135 = v0[((v1 * 10) + 4)][((v2 * 9) + 8)];	// L272, [0,2)
      bool v136 = v135 < 0.000000;	// L273, [2,4)
      if (v136) {	// L274, [4,10)
        float v137 = v135 + 180.000000;	// L275, [4,9)
        v0[((v1 * 10) + 4)][((v2 * 9) + 8)] = v137;	// L276, [9,10)
      }
      float v138 = v0[((v1 * 10) + 5)][(v2 * 9)];	// L278, [0,2)
      bool v139 = v138 < 0.000000;	// L279, [2,4)
      if (v139) {	// L280, [4,10)
        float v140 = v138 + 180.000000;	// L281, [4,9)
        v0[((v1 * 10) + 5)][(v2 * 9)] = v140;	// L282, [9,10)
      }
      float v141 = v0[((v1 * 10) + 5)][((v2 * 9) + 1)];	// L284, [0,2)
      bool v142 = v141 < 0.000000;	// L285, [2,4)
      if (v142) {	// L286, [4,10)
        float v143 = v141 + 180.000000;	// L287, [4,9)
        v0[((v1 * 10) + 5)][((v2 * 9) + 1)] = v143;	// L288, [9,10)
      }
      float v144 = v0[((v1 * 10) + 5)][((v2 * 9) + 2)];	// L290, [0,2)
      bool v145 = v144 < 0.000000;	// L291, [2,4)
      if (v145) {	// L292, [4,10)
        float v146 = v144 + 180.000000;	// L293, [4,9)
        v0[((v1 * 10) + 5)][((v2 * 9) + 2)] = v146;	// L294, [9,10)
      }
      float v147 = v0[((v1 * 10) + 5)][((v2 * 9) + 3)];	// L296, [0,2)
      bool v148 = v147 < 0.000000;	// L297, [2,4)
      if (v148) {	// L298, [4,10)
        float v149 = v147 + 180.000000;	// L299, [4,9)
        v0[((v1 * 10) + 5)][((v2 * 9) + 3)] = v149;	// L300, [9,10)
      }
      float v150 = v0[((v1 * 10) + 5)][((v2 * 9) + 4)];	// L302, [0,2)
      bool v151 = v150 < 0.000000;	// L303, [2,4)
      if (v151) {	// L304, [4,10)
        float v152 = v150 + 180.000000;	// L305, [4,9)
        v0[((v1 * 10) + 5)][((v2 * 9) + 4)] = v152;	// L306, [9,10)
      }
      float v153 = v0[((v1 * 10) + 5)][((v2 * 9) + 5)];	// L308, [0,2)
      bool v154 = v153 < 0.000000;	// L309, [2,4)
      if (v154) {	// L310, [4,10)
        float v155 = v153 + 180.000000;	// L311, [4,9)
        v0[((v1 * 10) + 5)][((v2 * 9) + 5)] = v155;	// L312, [9,10)
      }
      float v156 = v0[((v1 * 10) + 5)][((v2 * 9) + 6)];	// L314, [0,2)
      bool v157 = v156 < 0.000000;	// L315, [2,4)
      if (v157) {	// L316, [4,10)
        float v158 = v156 + 180.000000;	// L317, [4,9)
        v0[((v1 * 10) + 5)][((v2 * 9) + 6)] = v158;	// L318, [9,10)
      }
      float v159 = v0[((v1 * 10) + 5)][((v2 * 9) + 7)];	// L320, [0,2)
      bool v160 = v159 < 0.000000;	// L321, [2,4)
      if (v160) {	// L322, [4,10)
        float v161 = v159 + 180.000000;	// L323, [4,9)
        v0[((v1 * 10) + 5)][((v2 * 9) + 7)] = v161;	// L324, [9,10)
      }
      float v162 = v0[((v1 * 10) + 5)][((v2 * 9) + 8)];	// L326, [0,2)
      bool v163 = v162 < 0.000000;	// L327, [2,4)
      if (v163) {	// L328, [4,10)
        float v164 = v162 + 180.000000;	// L329, [4,9)
        v0[((v1 * 10) + 5)][((v2 * 9) + 8)] = v164;	// L330, [9,10)
      }
      float v165 = v0[((v1 * 10) + 6)][(v2 * 9)];	// L332, [0,2)
      bool v166 = v165 < 0.000000;	// L333, [2,4)
      if (v166) {	// L334, [4,10)
        float v167 = v165 + 180.000000;	// L335, [4,9)
        v0[((v1 * 10) + 6)][(v2 * 9)] = v167;	// L336, [9,10)
      }
      float v168 = v0[((v1 * 10) + 6)][((v2 * 9) + 1)];	// L338, [0,2)
      bool v169 = v168 < 0.000000;	// L339, [2,4)
      if (v169) {	// L340, [4,10)
        float v170 = v168 + 180.000000;	// L341, [4,9)
        v0[((v1 * 10) + 6)][((v2 * 9) + 1)] = v170;	// L342, [9,10)
      }
      float v171 = v0[((v1 * 10) + 6)][((v2 * 9) + 2)];	// L344, [0,2)
      bool v172 = v171 < 0.000000;	// L345, [2,4)
      if (v172) {	// L346, [4,10)
        float v173 = v171 + 180.000000;	// L347, [4,9)
        v0[((v1 * 10) + 6)][((v2 * 9) + 2)] = v173;	// L348, [9,10)
      }
      float v174 = v0[((v1 * 10) + 6)][((v2 * 9) + 3)];	// L350, [0,2)
      bool v175 = v174 < 0.000000;	// L351, [2,4)
      if (v175) {	// L352, [4,10)
        float v176 = v174 + 180.000000;	// L353, [4,9)
        v0[((v1 * 10) + 6)][((v2 * 9) + 3)] = v176;	// L354, [9,10)
      }
      float v177 = v0[((v1 * 10) + 6)][((v2 * 9) + 4)];	// L356, [0,2)
      bool v178 = v177 < 0.000000;	// L357, [2,4)
      if (v178) {	// L358, [4,10)
        float v179 = v177 + 180.000000;	// L359, [4,9)
        v0[((v1 * 10) + 6)][((v2 * 9) + 4)] = v179;	// L360, [9,10)
      }
      float v180 = v0[((v1 * 10) + 6)][((v2 * 9) + 5)];	// L362, [0,2)
      bool v181 = v180 < 0.000000;	// L363, [2,4)
      if (v181) {	// L364, [4,10)
        float v182 = v180 + 180.000000;	// L365, [4,9)
        v0[((v1 * 10) + 6)][((v2 * 9) + 5)] = v182;	// L366, [9,10)
      }
      float v183 = v0[((v1 * 10) + 6)][((v2 * 9) + 6)];	// L368, [0,2)
      bool v184 = v183 < 0.000000;	// L369, [2,4)
      if (v184) {	// L370, [4,10)
        float v185 = v183 + 180.000000;	// L371, [4,9)
        v0[((v1 * 10) + 6)][((v2 * 9) + 6)] = v185;	// L372, [9,10)
      }
      float v186 = v0[((v1 * 10) + 6)][((v2 * 9) + 7)];	// L374, [0,2)
      bool v187 = v186 < 0.000000;	// L375, [2,4)
      if (v187) {	// L376, [4,10)
        float v188 = v186 + 180.000000;	// L377, [4,9)
        v0[((v1 * 10) + 6)][((v2 * 9) + 7)] = v188;	// L378, [9,10)
      }
      float v189 = v0[((v1 * 10) + 6)][((v2 * 9) + 8)];	// L380, [0,2)
      bool v190 = v189 < 0.000000;	// L381, [2,4)
      if (v190) {	// L382, [4,10)
        float v191 = v189 + 180.000000;	// L383, [4,9)
        v0[((v1 * 10) + 6)][((v2 * 9) + 8)] = v191;	// L384, [9,10)
      }
      float v192 = v0[((v1 * 10) + 7)][(v2 * 9)];	// L386, [0,2)
      bool v193 = v192 < 0.000000;	// L387, [2,4)
      if (v193) {	// L388, [4,10)
        float v194 = v192 + 180.000000;	// L389, [4,9)
        v0[((v1 * 10) + 7)][(v2 * 9)] = v194;	// L390, [9,10)
      }
      float v195 = v0[((v1 * 10) + 7)][((v2 * 9) + 1)];	// L392, [0,2)
      bool v196 = v195 < 0.000000;	// L393, [2,4)
      if (v196) {	// L394, [4,10)
        float v197 = v195 + 180.000000;	// L395, [4,9)
        v0[((v1 * 10) + 7)][((v2 * 9) + 1)] = v197;	// L396, [9,10)
      }
      float v198 = v0[((v1 * 10) + 7)][((v2 * 9) + 2)];	// L398, [0,2)
      bool v199 = v198 < 0.000000;	// L399, [2,4)
      if (v199) {	// L400, [4,10)
        float v200 = v198 + 180.000000;	// L401, [4,9)
        v0[((v1 * 10) + 7)][((v2 * 9) + 2)] = v200;	// L402, [9,10)
      }
      float v201 = v0[((v1 * 10) + 7)][((v2 * 9) + 3)];	// L404, [0,2)
      bool v202 = v201 < 0.000000;	// L405, [2,4)
      if (v202) {	// L406, [4,10)
        float v203 = v201 + 180.000000;	// L407, [4,9)
        v0[((v1 * 10) + 7)][((v2 * 9) + 3)] = v203;	// L408, [9,10)
      }
      float v204 = v0[((v1 * 10) + 7)][((v2 * 9) + 4)];	// L410, [0,2)
      bool v205 = v204 < 0.000000;	// L411, [2,4)
      if (v205) {	// L412, [4,10)
        float v206 = v204 + 180.000000;	// L413, [4,9)
        v0[((v1 * 10) + 7)][((v2 * 9) + 4)] = v206;	// L414, [9,10)
      }
      float v207 = v0[((v1 * 10) + 7)][((v2 * 9) + 5)];	// L416, [0,2)
      bool v208 = v207 < 0.000000;	// L417, [2,4)
      if (v208) {	// L418, [4,10)
        float v209 = v207 + 180.000000;	// L419, [4,9)
        v0[((v1 * 10) + 7)][((v2 * 9) + 5)] = v209;	// L420, [9,10)
      }
      float v210 = v0[((v1 * 10) + 7)][((v2 * 9) + 6)];	// L422, [0,2)
      bool v211 = v210 < 0.000000;	// L423, [2,4)
      if (v211) {	// L424, [4,10)
        float v212 = v210 + 180.000000;	// L425, [4,9)
        v0[((v1 * 10) + 7)][((v2 * 9) + 6)] = v212;	// L426, [9,10)
      }
      float v213 = v0[((v1 * 10) + 7)][((v2 * 9) + 7)];	// L428, [0,2)
      bool v214 = v213 < 0.000000;	// L429, [2,4)
      if (v214) {	// L430, [4,10)
        float v215 = v213 + 180.000000;	// L431, [4,9)
        v0[((v1 * 10) + 7)][((v2 * 9) + 7)] = v215;	// L432, [9,10)
      }
      float v216 = v0[((v1 * 10) + 7)][((v2 * 9) + 8)];	// L434, [0,2)
      bool v217 = v216 < 0.000000;	// L435, [2,4)
      if (v217) {	// L436, [4,10)
        float v218 = v216 + 180.000000;	// L437, [4,9)
        v0[((v1 * 10) + 7)][((v2 * 9) + 8)] = v218;	// L438, [9,10)
      }
      float v219 = v0[((v1 * 10) + 8)][(v2 * 9)];	// L440, [0,2)
      bool v220 = v219 < 0.000000;	// L441, [2,4)
      if (v220) {	// L442, [4,10)
        float v221 = v219 + 180.000000;	// L443, [4,9)
        v0[((v1 * 10) + 8)][(v2 * 9)] = v221;	// L444, [9,10)
      }
      float v222 = v0[((v1 * 10) + 8)][((v2 * 9) + 1)];	// L446, [0,2)
      bool v223 = v222 < 0.000000;	// L447, [2,4)
      if (v223) {	// L448, [4,10)
        float v224 = v222 + 180.000000;	// L449, [4,9)
        v0[((v1 * 10) + 8)][((v2 * 9) + 1)] = v224;	// L450, [9,10)
      }
      float v225 = v0[((v1 * 10) + 8)][((v2 * 9) + 2)];	// L452, [0,2)
      bool v226 = v225 < 0.000000;	// L453, [2,4)
      if (v226) {	// L454, [4,10)
        float v227 = v225 + 180.000000;	// L455, [4,9)
        v0[((v1 * 10) + 8)][((v2 * 9) + 2)] = v227;	// L456, [9,10)
      }
      float v228 = v0[((v1 * 10) + 8)][((v2 * 9) + 3)];	// L458, [0,2)
      bool v229 = v228 < 0.000000;	// L459, [2,4)
      if (v229) {	// L460, [4,10)
        float v230 = v228 + 180.000000;	// L461, [4,9)
        v0[((v1 * 10) + 8)][((v2 * 9) + 3)] = v230;	// L462, [9,10)
      }
      float v231 = v0[((v1 * 10) + 8)][((v2 * 9) + 4)];	// L464, [0,2)
      bool v232 = v231 < 0.000000;	// L465, [2,4)
      if (v232) {	// L466, [4,10)
        float v233 = v231 + 180.000000;	// L467, [4,9)
        v0[((v1 * 10) + 8)][((v2 * 9) + 4)] = v233;	// L468, [9,10)
      }
      float v234 = v0[((v1 * 10) + 8)][((v2 * 9) + 5)];	// L470, [0,2)
      bool v235 = v234 < 0.000000;	// L471, [2,4)
      if (v235) {	// L472, [4,10)
        float v236 = v234 + 180.000000;	// L473, [4,9)
        v0[((v1 * 10) + 8)][((v2 * 9) + 5)] = v236;	// L474, [9,10)
      }
      float v237 = v0[((v1 * 10) + 8)][((v2 * 9) + 6)];	// L476, [0,2)
      bool v238 = v237 < 0.000000;	// L477, [2,4)
      if (v238) {	// L478, [4,10)
        float v239 = v237 + 180.000000;	// L479, [4,9)
        v0[((v1 * 10) + 8)][((v2 * 9) + 6)] = v239;	// L480, [9,10)
      }
      float v240 = v0[((v1 * 10) + 8)][((v2 * 9) + 7)];	// L482, [0,2)
      bool v241 = v240 < 0.000000;	// L483, [2,4)
      if (v241) {	// L484, [4,10)
        float v242 = v240 + 180.000000;	// L485, [4,9)
        v0[((v1 * 10) + 8)][((v2 * 9) + 7)] = v242;	// L486, [9,10)
      }
      float v243 = v0[((v1 * 10) + 8)][((v2 * 9) + 8)];	// L488, [0,2)
      bool v244 = v243 < 0.000000;	// L489, [2,4)
      if (v244) {	// L490, [4,10)
        float v245 = v243 + 180.000000;	// L491, [4,9)
        v0[((v1 * 10) + 8)][((v2 * 9) + 8)] = v245;	// L492, [9,10)
      }
      float v246 = v0[((v1 * 10) + 9)][(v2 * 9)];	// L494, [0,2)
      bool v247 = v246 < 0.000000;	// L495, [2,4)
      if (v247) {	// L496, [4,10)
        float v248 = v246 + 180.000000;	// L497, [4,9)
        v0[((v1 * 10) + 9)][(v2 * 9)] = v248;	// L498, [9,10)
      }
      float v249 = v0[((v1 * 10) + 9)][((v2 * 9) + 1)];	// L500, [0,2)
      bool v250 = v249 < 0.000000;	// L501, [2,4)
      if (v250) {	// L502, [4,10)
        float v251 = v249 + 180.000000;	// L503, [4,9)
        v0[((v1 * 10) + 9)][((v2 * 9) + 1)] = v251;	// L504, [9,10)
      }
      float v252 = v0[((v1 * 10) + 9)][((v2 * 9) + 2)];	// L506, [0,2)
      bool v253 = v252 < 0.000000;	// L507, [2,4)
      if (v253) {	// L508, [4,10)
        float v254 = v252 + 180.000000;	// L509, [4,9)
        v0[((v1 * 10) + 9)][((v2 * 9) + 2)] = v254;	// L510, [9,10)
      }
      float v255 = v0[((v1 * 10) + 9)][((v2 * 9) + 3)];	// L512, [0,2)
      bool v256 = v255 < 0.000000;	// L513, [2,4)
      if (v256) {	// L514, [4,10)
        float v257 = v255 + 180.000000;	// L515, [4,9)
        v0[((v1 * 10) + 9)][((v2 * 9) + 3)] = v257;	// L516, [9,10)
      }
      float v258 = v0[((v1 * 10) + 9)][((v2 * 9) + 4)];	// L518, [0,2)
      bool v259 = v258 < 0.000000;	// L519, [2,4)
      if (v259) {	// L520, [4,10)
        float v260 = v258 + 180.000000;	// L521, [4,9)
        v0[((v1 * 10) + 9)][((v2 * 9) + 4)] = v260;	// L522, [9,10)
      }
      float v261 = v0[((v1 * 10) + 9)][((v2 * 9) + 5)];	// L524, [0,2)
      bool v262 = v261 < 0.000000;	// L525, [2,4)
      if (v262) {	// L526, [4,10)
        float v263 = v261 + 180.000000;	// L527, [4,9)
        v0[((v1 * 10) + 9)][((v2 * 9) + 5)] = v263;	// L528, [9,10)
      }
      float v264 = v0[((v1 * 10) + 9)][((v2 * 9) + 6)];	// L530, [0,2)
      bool v265 = v264 < 0.000000;	// L531, [2,4)
      if (v265) {	// L532, [4,10)
        float v266 = v264 + 180.000000;	// L533, [4,9)
        v0[((v1 * 10) + 9)][((v2 * 9) + 6)] = v266;	// L534, [9,10)
      }
      float v267 = v0[((v1 * 10) + 9)][((v2 * 9) + 7)];	// L536, [0,2)
      bool v268 = v267 < 0.000000;	// L537, [2,4)
      if (v268) {	// L538, [4,10)
        float v269 = v267 + 180.000000;	// L539, [4,9)
        v0[((v1 * 10) + 9)][((v2 * 9) + 7)] = v269;	// L540, [9,10)
      }
      float v270 = v0[((v1 * 10) + 9)][((v2 * 9) + 8)];	// L542, [0,2)
      bool v271 = v270 < 0.000000;	// L543, [2,4)
      if (v271) {	// L544, [4,10)
        float v272 = v270 + 180.000000;	// L545, [4,9)
        v0[((v1 * 10) + 9)][((v2 * 9) + 8)] = v272;	// L546, [9,10)
      }
    }
  }
}

