
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=102554, interval=102554
/// DSP=30
void kernel_doitgen(
  int32_t v0,
  int32_t v1,
  int32_t v2,
  float v3[25][20][30],
  float v4[30][30],
  float v5[30]
) {	// L1, [0,102554)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface s_axilite port=v0 bundle=ctrl
  #pragma HLS interface s_axilite port=v1 bundle=ctrl
  #pragma HLS interface s_axilite port=v2 bundle=ctrl
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4

  #pragma HLS array_partition variable=v3 cyclic factor=15 dim=3
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=6 dim=1
  #pragma HLS array_partition variable=v4 cyclic factor=30 dim=2
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=30 dim=1

  for (int v6 = 0; v6 < 25; v6 += 1) {	// L3, [0,102552), iterCycle=4102, II=4102
    for (int v7 = 0; v7 < 20; v7 += 1) {	// L4, [0,4102), iterCycle=205, II=205
      for (int v8 = 0; v8 < 5; v8 += 1) {	// L5, [0,171), iterCycle=37, II=33
        #pragma HLS pipeline II=33
        float v9 = v3[v6][v7][(v8 * 6)];	// L6, [0,2)
        float v10 = v4[(v8 * 6)][0];	// L7, [0,2)
        float v11 = v9 * v10;	// L8, [2,6)
        float v12 = v5[0];	// L9, [4,6)
        float v13;
        if ((v8 * 6) == 0) {	// L10, [6,6)
          v13 = 0.000000;	// L11, [6,6)
        } else {
          v13 = v12;	// L13, [6,6)
        }
        float v14 = v13 + v11;	// L15, [6,11)
        float v15 = v3[v6][v7][((v8 * 6) + 1)];	// L16, [5,7)
        float v16 = v4[((v8 * 6) + 1)][0];	// L17, [5,7)
        float v17 = v15 * v16;	// L18, [7,11)
        float v18 = v14 + v17;	// L19, [11,16)
        float v19 = v3[v6][v7][((v8 * 6) + 2)];	// L20, [10,12)
        float v20 = v4[((v8 * 6) + 2)][0];	// L21, [10,12)
        float v21 = v19 * v20;	// L22, [12,16)
        float v22 = v18 + v21;	// L23, [16,21)
        float v23 = v3[v6][v7][((v8 * 6) + 3)];	// L24, [15,17)
        float v24 = v4[((v8 * 6) + 3)][0];	// L25, [15,17)
        float v25 = v23 * v24;	// L26, [17,21)
        float v26 = v22 + v25;	// L27, [21,26)
        float v27 = v3[v6][v7][((v8 * 6) + 4)];	// L28, [20,22)
        float v28 = v4[((v8 * 6) + 4)][0];	// L29, [20,22)
        float v29 = v27 * v28;	// L30, [22,26)
        float v30 = v26 + v29;	// L31, [26,31)
        float v31 = v3[v6][v7][((v8 * 6) + 5)];	// L32, [25,27)
        float v32 = v4[((v8 * 6) + 5)][0];	// L33, [25,27)
        float v33 = v31 * v32;	// L34, [27,31)
        float v34 = v30 + v33;	// L35, [31,36)
        v5[0] = v34;	// L36, [36,37)
        float v35 = v4[(v8 * 6)][1];	// L37, [0,2)
        float v36 = v9 * v35;	// L38, [2,6)
        float v37 = v5[1];	// L39, [4,6)
        float v38;
        if ((v8 * 6) == 0) {	// L40, [6,6)
          v38 = 0.000000;	// L41, [6,6)
        } else {
          v38 = v37;	// L43, [6,6)
        }
        float v39 = v38 + v36;	// L45, [6,11)
        float v40 = v4[((v8 * 6) + 1)][1];	// L46, [5,7)
        float v41 = v15 * v40;	// L47, [7,11)
        float v42 = v39 + v41;	// L48, [11,16)
        float v43 = v4[((v8 * 6) + 2)][1];	// L49, [10,12)
        float v44 = v19 * v43;	// L50, [12,16)
        float v45 = v42 + v44;	// L51, [16,21)
        float v46 = v4[((v8 * 6) + 3)][1];	// L52, [15,17)
        float v47 = v23 * v46;	// L53, [17,21)
        float v48 = v45 + v47;	// L54, [21,26)
        float v49 = v4[((v8 * 6) + 4)][1];	// L55, [20,22)
        float v50 = v27 * v49;	// L56, [22,26)
        float v51 = v48 + v50;	// L57, [26,31)
        float v52 = v4[((v8 * 6) + 5)][1];	// L58, [25,27)
        float v53 = v31 * v52;	// L59, [27,31)
        float v54 = v51 + v53;	// L60, [31,36)
        v5[1] = v54;	// L61, [36,37)
        float v55 = v4[(v8 * 6)][2];	// L62, [0,2)
        float v56 = v9 * v55;	// L63, [2,6)
        float v57 = v5[2];	// L64, [4,6)
        float v58;
        if ((v8 * 6) == 0) {	// L65, [6,6)
          v58 = 0.000000;	// L66, [6,6)
        } else {
          v58 = v57;	// L68, [6,6)
        }
        float v59 = v58 + v56;	// L70, [6,11)
        float v60 = v4[((v8 * 6) + 1)][2];	// L71, [5,7)
        float v61 = v15 * v60;	// L72, [7,11)
        float v62 = v59 + v61;	// L73, [11,16)
        float v63 = v4[((v8 * 6) + 2)][2];	// L74, [10,12)
        float v64 = v19 * v63;	// L75, [12,16)
        float v65 = v62 + v64;	// L76, [16,21)
        float v66 = v4[((v8 * 6) + 3)][2];	// L77, [15,17)
        float v67 = v23 * v66;	// L78, [17,21)
        float v68 = v65 + v67;	// L79, [21,26)
        float v69 = v4[((v8 * 6) + 4)][2];	// L80, [20,22)
        float v70 = v27 * v69;	// L81, [22,26)
        float v71 = v68 + v70;	// L82, [26,31)
        float v72 = v4[((v8 * 6) + 5)][2];	// L83, [25,27)
        float v73 = v31 * v72;	// L84, [27,31)
        float v74 = v71 + v73;	// L85, [31,36)
        v5[2] = v74;	// L86, [36,37)
        float v75 = v4[(v8 * 6)][3];	// L87, [0,2)
        float v76 = v9 * v75;	// L88, [2,6)
        float v77 = v5[3];	// L89, [4,6)
        float v78;
        if ((v8 * 6) == 0) {	// L90, [6,6)
          v78 = 0.000000;	// L91, [6,6)
        } else {
          v78 = v77;	// L93, [6,6)
        }
        float v79 = v78 + v76;	// L95, [6,11)
        float v80 = v4[((v8 * 6) + 1)][3];	// L96, [5,7)
        float v81 = v15 * v80;	// L97, [7,11)
        float v82 = v79 + v81;	// L98, [11,16)
        float v83 = v4[((v8 * 6) + 2)][3];	// L99, [10,12)
        float v84 = v19 * v83;	// L100, [12,16)
        float v85 = v82 + v84;	// L101, [16,21)
        float v86 = v4[((v8 * 6) + 3)][3];	// L102, [15,17)
        float v87 = v23 * v86;	// L103, [17,21)
        float v88 = v85 + v87;	// L104, [21,26)
        float v89 = v4[((v8 * 6) + 4)][3];	// L105, [20,22)
        float v90 = v27 * v89;	// L106, [22,26)
        float v91 = v88 + v90;	// L107, [26,31)
        float v92 = v4[((v8 * 6) + 5)][3];	// L108, [25,27)
        float v93 = v31 * v92;	// L109, [27,31)
        float v94 = v91 + v93;	// L110, [31,36)
        v5[3] = v94;	// L111, [36,37)
        float v95 = v4[(v8 * 6)][4];	// L112, [0,2)
        float v96 = v9 * v95;	// L113, [2,6)
        float v97 = v5[4];	// L114, [4,6)
        float v98;
        if ((v8 * 6) == 0) {	// L115, [6,6)
          v98 = 0.000000;	// L116, [6,6)
        } else {
          v98 = v97;	// L118, [6,6)
        }
        float v99 = v98 + v96;	// L120, [6,11)
        float v100 = v4[((v8 * 6) + 1)][4];	// L121, [5,7)
        float v101 = v15 * v100;	// L122, [7,11)
        float v102 = v99 + v101;	// L123, [11,16)
        float v103 = v4[((v8 * 6) + 2)][4];	// L124, [10,12)
        float v104 = v19 * v103;	// L125, [12,16)
        float v105 = v102 + v104;	// L126, [16,21)
        float v106 = v4[((v8 * 6) + 3)][4];	// L127, [15,17)
        float v107 = v23 * v106;	// L128, [17,21)
        float v108 = v105 + v107;	// L129, [21,26)
        float v109 = v4[((v8 * 6) + 4)][4];	// L130, [20,22)
        float v110 = v27 * v109;	// L131, [22,26)
        float v111 = v108 + v110;	// L132, [26,31)
        float v112 = v4[((v8 * 6) + 5)][4];	// L133, [25,27)
        float v113 = v31 * v112;	// L134, [27,31)
        float v114 = v111 + v113;	// L135, [31,36)
        v5[4] = v114;	// L136, [36,37)
        float v115 = v4[(v8 * 6)][5];	// L137, [0,2)
        float v116 = v9 * v115;	// L138, [2,6)
        float v117 = v5[5];	// L139, [4,6)
        float v118;
        if ((v8 * 6) == 0) {	// L140, [6,6)
          v118 = 0.000000;	// L141, [6,6)
        } else {
          v118 = v117;	// L143, [6,6)
        }
        float v119 = v118 + v116;	// L145, [6,11)
        float v120 = v4[((v8 * 6) + 1)][5];	// L146, [5,7)
        float v121 = v15 * v120;	// L147, [7,11)
        float v122 = v119 + v121;	// L148, [11,16)
        float v123 = v4[((v8 * 6) + 2)][5];	// L149, [10,12)
        float v124 = v19 * v123;	// L150, [12,16)
        float v125 = v122 + v124;	// L151, [16,21)
        float v126 = v4[((v8 * 6) + 3)][5];	// L152, [15,17)
        float v127 = v23 * v126;	// L153, [17,21)
        float v128 = v125 + v127;	// L154, [21,26)
        float v129 = v4[((v8 * 6) + 4)][5];	// L155, [20,22)
        float v130 = v27 * v129;	// L156, [22,26)
        float v131 = v128 + v130;	// L157, [26,31)
        float v132 = v4[((v8 * 6) + 5)][5];	// L158, [25,27)
        float v133 = v31 * v132;	// L159, [27,31)
        float v134 = v131 + v133;	// L160, [31,36)
        v5[5] = v134;	// L161, [36,37)
        float v135 = v4[(v8 * 6)][6];	// L162, [0,2)
        float v136 = v9 * v135;	// L163, [2,6)
        float v137 = v5[6];	// L164, [4,6)
        float v138;
        if ((v8 * 6) == 0) {	// L165, [6,6)
          v138 = 0.000000;	// L166, [6,6)
        } else {
          v138 = v137;	// L168, [6,6)
        }
        float v139 = v138 + v136;	// L170, [6,11)
        float v140 = v4[((v8 * 6) + 1)][6];	// L171, [5,7)
        float v141 = v15 * v140;	// L172, [7,11)
        float v142 = v139 + v141;	// L173, [11,16)
        float v143 = v4[((v8 * 6) + 2)][6];	// L174, [10,12)
        float v144 = v19 * v143;	// L175, [12,16)
        float v145 = v142 + v144;	// L176, [16,21)
        float v146 = v4[((v8 * 6) + 3)][6];	// L177, [15,17)
        float v147 = v23 * v146;	// L178, [17,21)
        float v148 = v145 + v147;	// L179, [21,26)
        float v149 = v4[((v8 * 6) + 4)][6];	// L180, [20,22)
        float v150 = v27 * v149;	// L181, [22,26)
        float v151 = v148 + v150;	// L182, [26,31)
        float v152 = v4[((v8 * 6) + 5)][6];	// L183, [25,27)
        float v153 = v31 * v152;	// L184, [27,31)
        float v154 = v151 + v153;	// L185, [31,36)
        v5[6] = v154;	// L186, [36,37)
        float v155 = v4[(v8 * 6)][7];	// L187, [0,2)
        float v156 = v9 * v155;	// L188, [2,6)
        float v157 = v5[7];	// L189, [4,6)
        float v158;
        if ((v8 * 6) == 0) {	// L190, [6,6)
          v158 = 0.000000;	// L191, [6,6)
        } else {
          v158 = v157;	// L193, [6,6)
        }
        float v159 = v158 + v156;	// L195, [6,11)
        float v160 = v4[((v8 * 6) + 1)][7];	// L196, [5,7)
        float v161 = v15 * v160;	// L197, [7,11)
        float v162 = v159 + v161;	// L198, [11,16)
        float v163 = v4[((v8 * 6) + 2)][7];	// L199, [10,12)
        float v164 = v19 * v163;	// L200, [12,16)
        float v165 = v162 + v164;	// L201, [16,21)
        float v166 = v4[((v8 * 6) + 3)][7];	// L202, [15,17)
        float v167 = v23 * v166;	// L203, [17,21)
        float v168 = v165 + v167;	// L204, [21,26)
        float v169 = v4[((v8 * 6) + 4)][7];	// L205, [20,22)
        float v170 = v27 * v169;	// L206, [22,26)
        float v171 = v168 + v170;	// L207, [26,31)
        float v172 = v4[((v8 * 6) + 5)][7];	// L208, [25,27)
        float v173 = v31 * v172;	// L209, [27,31)
        float v174 = v171 + v173;	// L210, [31,36)
        v5[7] = v174;	// L211, [36,37)
        float v175 = v4[(v8 * 6)][8];	// L212, [0,2)
        float v176 = v9 * v175;	// L213, [2,6)
        float v177 = v5[8];	// L214, [4,6)
        float v178;
        if ((v8 * 6) == 0) {	// L215, [6,6)
          v178 = 0.000000;	// L216, [6,6)
        } else {
          v178 = v177;	// L218, [6,6)
        }
        float v179 = v178 + v176;	// L220, [6,11)
        float v180 = v4[((v8 * 6) + 1)][8];	// L221, [5,7)
        float v181 = v15 * v180;	// L222, [7,11)
        float v182 = v179 + v181;	// L223, [11,16)
        float v183 = v4[((v8 * 6) + 2)][8];	// L224, [10,12)
        float v184 = v19 * v183;	// L225, [12,16)
        float v185 = v182 + v184;	// L226, [16,21)
        float v186 = v4[((v8 * 6) + 3)][8];	// L227, [15,17)
        float v187 = v23 * v186;	// L228, [17,21)
        float v188 = v185 + v187;	// L229, [21,26)
        float v189 = v4[((v8 * 6) + 4)][8];	// L230, [20,22)
        float v190 = v27 * v189;	// L231, [22,26)
        float v191 = v188 + v190;	// L232, [26,31)
        float v192 = v4[((v8 * 6) + 5)][8];	// L233, [25,27)
        float v193 = v31 * v192;	// L234, [27,31)
        float v194 = v191 + v193;	// L235, [31,36)
        v5[8] = v194;	// L236, [36,37)
        float v195 = v4[(v8 * 6)][9];	// L237, [0,2)
        float v196 = v9 * v195;	// L238, [2,6)
        float v197 = v5[9];	// L239, [4,6)
        float v198;
        if ((v8 * 6) == 0) {	// L240, [6,6)
          v198 = 0.000000;	// L241, [6,6)
        } else {
          v198 = v197;	// L243, [6,6)
        }
        float v199 = v198 + v196;	// L245, [6,11)
        float v200 = v4[((v8 * 6) + 1)][9];	// L246, [5,7)
        float v201 = v15 * v200;	// L247, [7,11)
        float v202 = v199 + v201;	// L248, [11,16)
        float v203 = v4[((v8 * 6) + 2)][9];	// L249, [10,12)
        float v204 = v19 * v203;	// L250, [12,16)
        float v205 = v202 + v204;	// L251, [16,21)
        float v206 = v4[((v8 * 6) + 3)][9];	// L252, [15,17)
        float v207 = v23 * v206;	// L253, [17,21)
        float v208 = v205 + v207;	// L254, [21,26)
        float v209 = v4[((v8 * 6) + 4)][9];	// L255, [20,22)
        float v210 = v27 * v209;	// L256, [22,26)
        float v211 = v208 + v210;	// L257, [26,31)
        float v212 = v4[((v8 * 6) + 5)][9];	// L258, [25,27)
        float v213 = v31 * v212;	// L259, [27,31)
        float v214 = v211 + v213;	// L260, [31,36)
        v5[9] = v214;	// L261, [36,37)
        float v215 = v4[(v8 * 6)][10];	// L262, [0,2)
        float v216 = v9 * v215;	// L263, [2,6)
        float v217 = v5[10];	// L264, [4,6)
        float v218;
        if ((v8 * 6) == 0) {	// L265, [6,6)
          v218 = 0.000000;	// L266, [6,6)
        } else {
          v218 = v217;	// L268, [6,6)
        }
        float v219 = v218 + v216;	// L270, [6,11)
        float v220 = v4[((v8 * 6) + 1)][10];	// L271, [5,7)
        float v221 = v15 * v220;	// L272, [7,11)
        float v222 = v219 + v221;	// L273, [11,16)
        float v223 = v4[((v8 * 6) + 2)][10];	// L274, [10,12)
        float v224 = v19 * v223;	// L275, [12,16)
        float v225 = v222 + v224;	// L276, [16,21)
        float v226 = v4[((v8 * 6) + 3)][10];	// L277, [15,17)
        float v227 = v23 * v226;	// L278, [17,21)
        float v228 = v225 + v227;	// L279, [21,26)
        float v229 = v4[((v8 * 6) + 4)][10];	// L280, [20,22)
        float v230 = v27 * v229;	// L281, [22,26)
        float v231 = v228 + v230;	// L282, [26,31)
        float v232 = v4[((v8 * 6) + 5)][10];	// L283, [25,27)
        float v233 = v31 * v232;	// L284, [27,31)
        float v234 = v231 + v233;	// L285, [31,36)
        v5[10] = v234;	// L286, [36,37)
        float v235 = v4[(v8 * 6)][11];	// L287, [0,2)
        float v236 = v9 * v235;	// L288, [2,6)
        float v237 = v5[11];	// L289, [4,6)
        float v238;
        if ((v8 * 6) == 0) {	// L290, [6,6)
          v238 = 0.000000;	// L291, [6,6)
        } else {
          v238 = v237;	// L293, [6,6)
        }
        float v239 = v238 + v236;	// L295, [6,11)
        float v240 = v4[((v8 * 6) + 1)][11];	// L296, [5,7)
        float v241 = v15 * v240;	// L297, [7,11)
        float v242 = v239 + v241;	// L298, [11,16)
        float v243 = v4[((v8 * 6) + 2)][11];	// L299, [10,12)
        float v244 = v19 * v243;	// L300, [12,16)
        float v245 = v242 + v244;	// L301, [16,21)
        float v246 = v4[((v8 * 6) + 3)][11];	// L302, [15,17)
        float v247 = v23 * v246;	// L303, [17,21)
        float v248 = v245 + v247;	// L304, [21,26)
        float v249 = v4[((v8 * 6) + 4)][11];	// L305, [20,22)
        float v250 = v27 * v249;	// L306, [22,26)
        float v251 = v248 + v250;	// L307, [26,31)
        float v252 = v4[((v8 * 6) + 5)][11];	// L308, [25,27)
        float v253 = v31 * v252;	// L309, [27,31)
        float v254 = v251 + v253;	// L310, [31,36)
        v5[11] = v254;	// L311, [36,37)
        float v255 = v4[(v8 * 6)][12];	// L312, [0,2)
        float v256 = v9 * v255;	// L313, [2,6)
        float v257 = v5[12];	// L314, [4,6)
        float v258;
        if ((v8 * 6) == 0) {	// L315, [6,6)
          v258 = 0.000000;	// L316, [6,6)
        } else {
          v258 = v257;	// L318, [6,6)
        }
        float v259 = v258 + v256;	// L320, [6,11)
        float v260 = v4[((v8 * 6) + 1)][12];	// L321, [5,7)
        float v261 = v15 * v260;	// L322, [7,11)
        float v262 = v259 + v261;	// L323, [11,16)
        float v263 = v4[((v8 * 6) + 2)][12];	// L324, [10,12)
        float v264 = v19 * v263;	// L325, [12,16)
        float v265 = v262 + v264;	// L326, [16,21)
        float v266 = v4[((v8 * 6) + 3)][12];	// L327, [15,17)
        float v267 = v23 * v266;	// L328, [17,21)
        float v268 = v265 + v267;	// L329, [21,26)
        float v269 = v4[((v8 * 6) + 4)][12];	// L330, [20,22)
        float v270 = v27 * v269;	// L331, [22,26)
        float v271 = v268 + v270;	// L332, [26,31)
        float v272 = v4[((v8 * 6) + 5)][12];	// L333, [25,27)
        float v273 = v31 * v272;	// L334, [27,31)
        float v274 = v271 + v273;	// L335, [31,36)
        v5[12] = v274;	// L336, [36,37)
        float v275 = v4[(v8 * 6)][13];	// L337, [0,2)
        float v276 = v9 * v275;	// L338, [2,6)
        float v277 = v5[13];	// L339, [4,6)
        float v278;
        if ((v8 * 6) == 0) {	// L340, [6,6)
          v278 = 0.000000;	// L341, [6,6)
        } else {
          v278 = v277;	// L343, [6,6)
        }
        float v279 = v278 + v276;	// L345, [6,11)
        float v280 = v4[((v8 * 6) + 1)][13];	// L346, [5,7)
        float v281 = v15 * v280;	// L347, [7,11)
        float v282 = v279 + v281;	// L348, [11,16)
        float v283 = v4[((v8 * 6) + 2)][13];	// L349, [10,12)
        float v284 = v19 * v283;	// L350, [12,16)
        float v285 = v282 + v284;	// L351, [16,21)
        float v286 = v4[((v8 * 6) + 3)][13];	// L352, [15,17)
        float v287 = v23 * v286;	// L353, [17,21)
        float v288 = v285 + v287;	// L354, [21,26)
        float v289 = v4[((v8 * 6) + 4)][13];	// L355, [20,22)
        float v290 = v27 * v289;	// L356, [22,26)
        float v291 = v288 + v290;	// L357, [26,31)
        float v292 = v4[((v8 * 6) + 5)][13];	// L358, [25,27)
        float v293 = v31 * v292;	// L359, [27,31)
        float v294 = v291 + v293;	// L360, [31,36)
        v5[13] = v294;	// L361, [36,37)
        float v295 = v4[(v8 * 6)][14];	// L362, [0,2)
        float v296 = v9 * v295;	// L363, [2,6)
        float v297 = v5[14];	// L364, [4,6)
        float v298;
        if ((v8 * 6) == 0) {	// L365, [6,6)
          v298 = 0.000000;	// L366, [6,6)
        } else {
          v298 = v297;	// L368, [6,6)
        }
        float v299 = v298 + v296;	// L370, [6,11)
        float v300 = v4[((v8 * 6) + 1)][14];	// L371, [5,7)
        float v301 = v15 * v300;	// L372, [7,11)
        float v302 = v299 + v301;	// L373, [11,16)
        float v303 = v4[((v8 * 6) + 2)][14];	// L374, [10,12)
        float v304 = v19 * v303;	// L375, [12,16)
        float v305 = v302 + v304;	// L376, [16,21)
        float v306 = v4[((v8 * 6) + 3)][14];	// L377, [15,17)
        float v307 = v23 * v306;	// L378, [17,21)
        float v308 = v305 + v307;	// L379, [21,26)
        float v309 = v4[((v8 * 6) + 4)][14];	// L380, [20,22)
        float v310 = v27 * v309;	// L381, [22,26)
        float v311 = v308 + v310;	// L382, [26,31)
        float v312 = v4[((v8 * 6) + 5)][14];	// L383, [25,27)
        float v313 = v31 * v312;	// L384, [27,31)
        float v314 = v311 + v313;	// L385, [31,36)
        v5[14] = v314;	// L386, [36,37)
        float v315 = v4[(v8 * 6)][15];	// L387, [0,2)
        float v316 = v9 * v315;	// L388, [2,6)
        float v317 = v5[15];	// L389, [4,6)
        float v318;
        if ((v8 * 6) == 0) {	// L390, [6,6)
          v318 = 0.000000;	// L391, [6,6)
        } else {
          v318 = v317;	// L393, [6,6)
        }
        float v319 = v318 + v316;	// L395, [6,11)
        float v320 = v4[((v8 * 6) + 1)][15];	// L396, [5,7)
        float v321 = v15 * v320;	// L397, [7,11)
        float v322 = v319 + v321;	// L398, [11,16)
        float v323 = v4[((v8 * 6) + 2)][15];	// L399, [10,12)
        float v324 = v19 * v323;	// L400, [12,16)
        float v325 = v322 + v324;	// L401, [16,21)
        float v326 = v4[((v8 * 6) + 3)][15];	// L402, [15,17)
        float v327 = v23 * v326;	// L403, [17,21)
        float v328 = v325 + v327;	// L404, [21,26)
        float v329 = v4[((v8 * 6) + 4)][15];	// L405, [20,22)
        float v330 = v27 * v329;	// L406, [22,26)
        float v331 = v328 + v330;	// L407, [26,31)
        float v332 = v4[((v8 * 6) + 5)][15];	// L408, [25,27)
        float v333 = v31 * v332;	// L409, [27,31)
        float v334 = v331 + v333;	// L410, [31,36)
        v5[15] = v334;	// L411, [36,37)
        float v335 = v4[(v8 * 6)][16];	// L412, [0,2)
        float v336 = v9 * v335;	// L413, [2,6)
        float v337 = v5[16];	// L414, [4,6)
        float v338;
        if ((v8 * 6) == 0) {	// L415, [6,6)
          v338 = 0.000000;	// L416, [6,6)
        } else {
          v338 = v337;	// L418, [6,6)
        }
        float v339 = v338 + v336;	// L420, [6,11)
        float v340 = v4[((v8 * 6) + 1)][16];	// L421, [5,7)
        float v341 = v15 * v340;	// L422, [7,11)
        float v342 = v339 + v341;	// L423, [11,16)
        float v343 = v4[((v8 * 6) + 2)][16];	// L424, [10,12)
        float v344 = v19 * v343;	// L425, [12,16)
        float v345 = v342 + v344;	// L426, [16,21)
        float v346 = v4[((v8 * 6) + 3)][16];	// L427, [15,17)
        float v347 = v23 * v346;	// L428, [17,21)
        float v348 = v345 + v347;	// L429, [21,26)
        float v349 = v4[((v8 * 6) + 4)][16];	// L430, [20,22)
        float v350 = v27 * v349;	// L431, [22,26)
        float v351 = v348 + v350;	// L432, [26,31)
        float v352 = v4[((v8 * 6) + 5)][16];	// L433, [25,27)
        float v353 = v31 * v352;	// L434, [27,31)
        float v354 = v351 + v353;	// L435, [31,36)
        v5[16] = v354;	// L436, [36,37)
        float v355 = v4[(v8 * 6)][17];	// L437, [0,2)
        float v356 = v9 * v355;	// L438, [2,6)
        float v357 = v5[17];	// L439, [4,6)
        float v358;
        if ((v8 * 6) == 0) {	// L440, [6,6)
          v358 = 0.000000;	// L441, [6,6)
        } else {
          v358 = v357;	// L443, [6,6)
        }
        float v359 = v358 + v356;	// L445, [6,11)
        float v360 = v4[((v8 * 6) + 1)][17];	// L446, [5,7)
        float v361 = v15 * v360;	// L447, [7,11)
        float v362 = v359 + v361;	// L448, [11,16)
        float v363 = v4[((v8 * 6) + 2)][17];	// L449, [10,12)
        float v364 = v19 * v363;	// L450, [12,16)
        float v365 = v362 + v364;	// L451, [16,21)
        float v366 = v4[((v8 * 6) + 3)][17];	// L452, [15,17)
        float v367 = v23 * v366;	// L453, [17,21)
        float v368 = v365 + v367;	// L454, [21,26)
        float v369 = v4[((v8 * 6) + 4)][17];	// L455, [20,22)
        float v370 = v27 * v369;	// L456, [22,26)
        float v371 = v368 + v370;	// L457, [26,31)
        float v372 = v4[((v8 * 6) + 5)][17];	// L458, [25,27)
        float v373 = v31 * v372;	// L459, [27,31)
        float v374 = v371 + v373;	// L460, [31,36)
        v5[17] = v374;	// L461, [36,37)
        float v375 = v4[(v8 * 6)][18];	// L462, [0,2)
        float v376 = v9 * v375;	// L463, [2,6)
        float v377 = v5[18];	// L464, [4,6)
        float v378;
        if ((v8 * 6) == 0) {	// L465, [6,6)
          v378 = 0.000000;	// L466, [6,6)
        } else {
          v378 = v377;	// L468, [6,6)
        }
        float v379 = v378 + v376;	// L470, [6,11)
        float v380 = v4[((v8 * 6) + 1)][18];	// L471, [5,7)
        float v381 = v15 * v380;	// L472, [7,11)
        float v382 = v379 + v381;	// L473, [11,16)
        float v383 = v4[((v8 * 6) + 2)][18];	// L474, [10,12)
        float v384 = v19 * v383;	// L475, [12,16)
        float v385 = v382 + v384;	// L476, [16,21)
        float v386 = v4[((v8 * 6) + 3)][18];	// L477, [15,17)
        float v387 = v23 * v386;	// L478, [17,21)
        float v388 = v385 + v387;	// L479, [21,26)
        float v389 = v4[((v8 * 6) + 4)][18];	// L480, [20,22)
        float v390 = v27 * v389;	// L481, [22,26)
        float v391 = v388 + v390;	// L482, [26,31)
        float v392 = v4[((v8 * 6) + 5)][18];	// L483, [25,27)
        float v393 = v31 * v392;	// L484, [27,31)
        float v394 = v391 + v393;	// L485, [31,36)
        v5[18] = v394;	// L486, [36,37)
        float v395 = v4[(v8 * 6)][19];	// L487, [0,2)
        float v396 = v9 * v395;	// L488, [2,6)
        float v397 = v5[19];	// L489, [4,6)
        float v398;
        if ((v8 * 6) == 0) {	// L490, [6,6)
          v398 = 0.000000;	// L491, [6,6)
        } else {
          v398 = v397;	// L493, [6,6)
        }
        float v399 = v398 + v396;	// L495, [6,11)
        float v400 = v4[((v8 * 6) + 1)][19];	// L496, [5,7)
        float v401 = v15 * v400;	// L497, [7,11)
        float v402 = v399 + v401;	// L498, [11,16)
        float v403 = v4[((v8 * 6) + 2)][19];	// L499, [10,12)
        float v404 = v19 * v403;	// L500, [12,16)
        float v405 = v402 + v404;	// L501, [16,21)
        float v406 = v4[((v8 * 6) + 3)][19];	// L502, [15,17)
        float v407 = v23 * v406;	// L503, [17,21)
        float v408 = v405 + v407;	// L504, [21,26)
        float v409 = v4[((v8 * 6) + 4)][19];	// L505, [20,22)
        float v410 = v27 * v409;	// L506, [22,26)
        float v411 = v408 + v410;	// L507, [26,31)
        float v412 = v4[((v8 * 6) + 5)][19];	// L508, [25,27)
        float v413 = v31 * v412;	// L509, [27,31)
        float v414 = v411 + v413;	// L510, [31,36)
        v5[19] = v414;	// L511, [36,37)
        float v415 = v4[(v8 * 6)][20];	// L512, [0,2)
        float v416 = v9 * v415;	// L513, [2,6)
        float v417 = v5[20];	// L514, [4,6)
        float v418;
        if ((v8 * 6) == 0) {	// L515, [6,6)
          v418 = 0.000000;	// L516, [6,6)
        } else {
          v418 = v417;	// L518, [6,6)
        }
        float v419 = v418 + v416;	// L520, [6,11)
        float v420 = v4[((v8 * 6) + 1)][20];	// L521, [5,7)
        float v421 = v15 * v420;	// L522, [7,11)
        float v422 = v419 + v421;	// L523, [11,16)
        float v423 = v4[((v8 * 6) + 2)][20];	// L524, [10,12)
        float v424 = v19 * v423;	// L525, [12,16)
        float v425 = v422 + v424;	// L526, [16,21)
        float v426 = v4[((v8 * 6) + 3)][20];	// L527, [15,17)
        float v427 = v23 * v426;	// L528, [17,21)
        float v428 = v425 + v427;	// L529, [21,26)
        float v429 = v4[((v8 * 6) + 4)][20];	// L530, [20,22)
        float v430 = v27 * v429;	// L531, [22,26)
        float v431 = v428 + v430;	// L532, [26,31)
        float v432 = v4[((v8 * 6) + 5)][20];	// L533, [25,27)
        float v433 = v31 * v432;	// L534, [27,31)
        float v434 = v431 + v433;	// L535, [31,36)
        v5[20] = v434;	// L536, [36,37)
        float v435 = v4[(v8 * 6)][21];	// L537, [0,2)
        float v436 = v9 * v435;	// L538, [2,6)
        float v437 = v5[21];	// L539, [4,6)
        float v438;
        if ((v8 * 6) == 0) {	// L540, [6,6)
          v438 = 0.000000;	// L541, [6,6)
        } else {
          v438 = v437;	// L543, [6,6)
        }
        float v439 = v438 + v436;	// L545, [6,11)
        float v440 = v4[((v8 * 6) + 1)][21];	// L546, [5,7)
        float v441 = v15 * v440;	// L547, [7,11)
        float v442 = v439 + v441;	// L548, [11,16)
        float v443 = v4[((v8 * 6) + 2)][21];	// L549, [10,12)
        float v444 = v19 * v443;	// L550, [12,16)
        float v445 = v442 + v444;	// L551, [16,21)
        float v446 = v4[((v8 * 6) + 3)][21];	// L552, [15,17)
        float v447 = v23 * v446;	// L553, [17,21)
        float v448 = v445 + v447;	// L554, [21,26)
        float v449 = v4[((v8 * 6) + 4)][21];	// L555, [20,22)
        float v450 = v27 * v449;	// L556, [22,26)
        float v451 = v448 + v450;	// L557, [26,31)
        float v452 = v4[((v8 * 6) + 5)][21];	// L558, [25,27)
        float v453 = v31 * v452;	// L559, [27,31)
        float v454 = v451 + v453;	// L560, [31,36)
        v5[21] = v454;	// L561, [36,37)
        float v455 = v4[(v8 * 6)][22];	// L562, [0,2)
        float v456 = v9 * v455;	// L563, [2,6)
        float v457 = v5[22];	// L564, [4,6)
        float v458;
        if ((v8 * 6) == 0) {	// L565, [6,6)
          v458 = 0.000000;	// L566, [6,6)
        } else {
          v458 = v457;	// L568, [6,6)
        }
        float v459 = v458 + v456;	// L570, [6,11)
        float v460 = v4[((v8 * 6) + 1)][22];	// L571, [5,7)
        float v461 = v15 * v460;	// L572, [7,11)
        float v462 = v459 + v461;	// L573, [11,16)
        float v463 = v4[((v8 * 6) + 2)][22];	// L574, [10,12)
        float v464 = v19 * v463;	// L575, [12,16)
        float v465 = v462 + v464;	// L576, [16,21)
        float v466 = v4[((v8 * 6) + 3)][22];	// L577, [15,17)
        float v467 = v23 * v466;	// L578, [17,21)
        float v468 = v465 + v467;	// L579, [21,26)
        float v469 = v4[((v8 * 6) + 4)][22];	// L580, [20,22)
        float v470 = v27 * v469;	// L581, [22,26)
        float v471 = v468 + v470;	// L582, [26,31)
        float v472 = v4[((v8 * 6) + 5)][22];	// L583, [25,27)
        float v473 = v31 * v472;	// L584, [27,31)
        float v474 = v471 + v473;	// L585, [31,36)
        v5[22] = v474;	// L586, [36,37)
        float v475 = v4[(v8 * 6)][23];	// L587, [0,2)
        float v476 = v9 * v475;	// L588, [2,6)
        float v477 = v5[23];	// L589, [4,6)
        float v478;
        if ((v8 * 6) == 0) {	// L590, [6,6)
          v478 = 0.000000;	// L591, [6,6)
        } else {
          v478 = v477;	// L593, [6,6)
        }
        float v479 = v478 + v476;	// L595, [6,11)
        float v480 = v4[((v8 * 6) + 1)][23];	// L596, [5,7)
        float v481 = v15 * v480;	// L597, [7,11)
        float v482 = v479 + v481;	// L598, [11,16)
        float v483 = v4[((v8 * 6) + 2)][23];	// L599, [10,12)
        float v484 = v19 * v483;	// L600, [12,16)
        float v485 = v482 + v484;	// L601, [16,21)
        float v486 = v4[((v8 * 6) + 3)][23];	// L602, [15,17)
        float v487 = v23 * v486;	// L603, [17,21)
        float v488 = v485 + v487;	// L604, [21,26)
        float v489 = v4[((v8 * 6) + 4)][23];	// L605, [20,22)
        float v490 = v27 * v489;	// L606, [22,26)
        float v491 = v488 + v490;	// L607, [26,31)
        float v492 = v4[((v8 * 6) + 5)][23];	// L608, [25,27)
        float v493 = v31 * v492;	// L609, [27,31)
        float v494 = v491 + v493;	// L610, [31,36)
        v5[23] = v494;	// L611, [36,37)
        float v495 = v4[(v8 * 6)][24];	// L612, [0,2)
        float v496 = v9 * v495;	// L613, [2,6)
        float v497 = v5[24];	// L614, [4,6)
        float v498;
        if ((v8 * 6) == 0) {	// L615, [6,6)
          v498 = 0.000000;	// L616, [6,6)
        } else {
          v498 = v497;	// L618, [6,6)
        }
        float v499 = v498 + v496;	// L620, [6,11)
        float v500 = v4[((v8 * 6) + 1)][24];	// L621, [5,7)
        float v501 = v15 * v500;	// L622, [7,11)
        float v502 = v499 + v501;	// L623, [11,16)
        float v503 = v4[((v8 * 6) + 2)][24];	// L624, [10,12)
        float v504 = v19 * v503;	// L625, [12,16)
        float v505 = v502 + v504;	// L626, [16,21)
        float v506 = v4[((v8 * 6) + 3)][24];	// L627, [15,17)
        float v507 = v23 * v506;	// L628, [17,21)
        float v508 = v505 + v507;	// L629, [21,26)
        float v509 = v4[((v8 * 6) + 4)][24];	// L630, [20,22)
        float v510 = v27 * v509;	// L631, [22,26)
        float v511 = v508 + v510;	// L632, [26,31)
        float v512 = v4[((v8 * 6) + 5)][24];	// L633, [25,27)
        float v513 = v31 * v512;	// L634, [27,31)
        float v514 = v511 + v513;	// L635, [31,36)
        v5[24] = v514;	// L636, [36,37)
        float v515 = v4[(v8 * 6)][25];	// L637, [0,2)
        float v516 = v9 * v515;	// L638, [2,6)
        float v517 = v5[25];	// L639, [4,6)
        float v518;
        if ((v8 * 6) == 0) {	// L640, [6,6)
          v518 = 0.000000;	// L641, [6,6)
        } else {
          v518 = v517;	// L643, [6,6)
        }
        float v519 = v518 + v516;	// L645, [6,11)
        float v520 = v4[((v8 * 6) + 1)][25];	// L646, [5,7)
        float v521 = v15 * v520;	// L647, [7,11)
        float v522 = v519 + v521;	// L648, [11,16)
        float v523 = v4[((v8 * 6) + 2)][25];	// L649, [10,12)
        float v524 = v19 * v523;	// L650, [12,16)
        float v525 = v522 + v524;	// L651, [16,21)
        float v526 = v4[((v8 * 6) + 3)][25];	// L652, [15,17)
        float v527 = v23 * v526;	// L653, [17,21)
        float v528 = v525 + v527;	// L654, [21,26)
        float v529 = v4[((v8 * 6) + 4)][25];	// L655, [20,22)
        float v530 = v27 * v529;	// L656, [22,26)
        float v531 = v528 + v530;	// L657, [26,31)
        float v532 = v4[((v8 * 6) + 5)][25];	// L658, [25,27)
        float v533 = v31 * v532;	// L659, [27,31)
        float v534 = v531 + v533;	// L660, [31,36)
        v5[25] = v534;	// L661, [36,37)
        float v535 = v4[(v8 * 6)][26];	// L662, [0,2)
        float v536 = v9 * v535;	// L663, [2,6)
        float v537 = v5[26];	// L664, [4,6)
        float v538;
        if ((v8 * 6) == 0) {	// L665, [6,6)
          v538 = 0.000000;	// L666, [6,6)
        } else {
          v538 = v537;	// L668, [6,6)
        }
        float v539 = v538 + v536;	// L670, [6,11)
        float v540 = v4[((v8 * 6) + 1)][26];	// L671, [5,7)
        float v541 = v15 * v540;	// L672, [7,11)
        float v542 = v539 + v541;	// L673, [11,16)
        float v543 = v4[((v8 * 6) + 2)][26];	// L674, [10,12)
        float v544 = v19 * v543;	// L675, [12,16)
        float v545 = v542 + v544;	// L676, [16,21)
        float v546 = v4[((v8 * 6) + 3)][26];	// L677, [15,17)
        float v547 = v23 * v546;	// L678, [17,21)
        float v548 = v545 + v547;	// L679, [21,26)
        float v549 = v4[((v8 * 6) + 4)][26];	// L680, [20,22)
        float v550 = v27 * v549;	// L681, [22,26)
        float v551 = v548 + v550;	// L682, [26,31)
        float v552 = v4[((v8 * 6) + 5)][26];	// L683, [25,27)
        float v553 = v31 * v552;	// L684, [27,31)
        float v554 = v551 + v553;	// L685, [31,36)
        v5[26] = v554;	// L686, [36,37)
        float v555 = v4[(v8 * 6)][27];	// L687, [0,2)
        float v556 = v9 * v555;	// L688, [2,6)
        float v557 = v5[27];	// L689, [4,6)
        float v558;
        if ((v8 * 6) == 0) {	// L690, [6,6)
          v558 = 0.000000;	// L691, [6,6)
        } else {
          v558 = v557;	// L693, [6,6)
        }
        float v559 = v558 + v556;	// L695, [6,11)
        float v560 = v4[((v8 * 6) + 1)][27];	// L696, [5,7)
        float v561 = v15 * v560;	// L697, [7,11)
        float v562 = v559 + v561;	// L698, [11,16)
        float v563 = v4[((v8 * 6) + 2)][27];	// L699, [10,12)
        float v564 = v19 * v563;	// L700, [12,16)
        float v565 = v562 + v564;	// L701, [16,21)
        float v566 = v4[((v8 * 6) + 3)][27];	// L702, [15,17)
        float v567 = v23 * v566;	// L703, [17,21)
        float v568 = v565 + v567;	// L704, [21,26)
        float v569 = v4[((v8 * 6) + 4)][27];	// L705, [20,22)
        float v570 = v27 * v569;	// L706, [22,26)
        float v571 = v568 + v570;	// L707, [26,31)
        float v572 = v4[((v8 * 6) + 5)][27];	// L708, [25,27)
        float v573 = v31 * v572;	// L709, [27,31)
        float v574 = v571 + v573;	// L710, [31,36)
        v5[27] = v574;	// L711, [36,37)
        float v575 = v4[(v8 * 6)][28];	// L712, [0,2)
        float v576 = v9 * v575;	// L713, [2,6)
        float v577 = v5[28];	// L714, [4,6)
        float v578;
        if ((v8 * 6) == 0) {	// L715, [6,6)
          v578 = 0.000000;	// L716, [6,6)
        } else {
          v578 = v577;	// L718, [6,6)
        }
        float v579 = v578 + v576;	// L720, [6,11)
        float v580 = v4[((v8 * 6) + 1)][28];	// L721, [5,7)
        float v581 = v15 * v580;	// L722, [7,11)
        float v582 = v579 + v581;	// L723, [11,16)
        float v583 = v4[((v8 * 6) + 2)][28];	// L724, [10,12)
        float v584 = v19 * v583;	// L725, [12,16)
        float v585 = v582 + v584;	// L726, [16,21)
        float v586 = v4[((v8 * 6) + 3)][28];	// L727, [15,17)
        float v587 = v23 * v586;	// L728, [17,21)
        float v588 = v585 + v587;	// L729, [21,26)
        float v589 = v4[((v8 * 6) + 4)][28];	// L730, [20,22)
        float v590 = v27 * v589;	// L731, [22,26)
        float v591 = v588 + v590;	// L732, [26,31)
        float v592 = v4[((v8 * 6) + 5)][28];	// L733, [25,27)
        float v593 = v31 * v592;	// L734, [27,31)
        float v594 = v591 + v593;	// L735, [31,36)
        v5[28] = v594;	// L736, [36,37)
        float v595 = v4[(v8 * 6)][29];	// L737, [0,2)
        float v596 = v9 * v595;	// L738, [2,6)
        float v597 = v5[29];	// L739, [4,6)
        float v598;
        if ((v8 * 6) == 0) {	// L740, [6,6)
          v598 = 0.000000;	// L741, [6,6)
        } else {
          v598 = v597;	// L743, [6,6)
        }
        float v599 = v598 + v596;	// L745, [6,11)
        float v600 = v4[((v8 * 6) + 1)][29];	// L746, [5,7)
        float v601 = v15 * v600;	// L747, [7,11)
        float v602 = v599 + v601;	// L748, [11,16)
        float v603 = v4[((v8 * 6) + 2)][29];	// L749, [10,12)
        float v604 = v19 * v603;	// L750, [12,16)
        float v605 = v602 + v604;	// L751, [16,21)
        float v606 = v4[((v8 * 6) + 3)][29];	// L752, [15,17)
        float v607 = v23 * v606;	// L753, [17,21)
        float v608 = v605 + v607;	// L754, [21,26)
        float v609 = v4[((v8 * 6) + 4)][29];	// L755, [20,22)
        float v610 = v27 * v609;	// L756, [22,26)
        float v611 = v608 + v610;	// L757, [26,31)
        float v612 = v4[((v8 * 6) + 5)][29];	// L758, [25,27)
        float v613 = v31 * v612;	// L759, [27,31)
        float v614 = v611 + v613;	// L760, [31,36)
        v5[29] = v614;	// L761, [36,37)
      }
      for (int v615 = 0; v615 < 2; v615 += 1) {	// L763, [171,205), iterCycle=17, II=15
        #pragma HLS pipeline II=1
        float v616 = v5[(v615 * 15)];	// L764, [0,2)
        v3[v6][v7][(v615 * 15)] = v616;	// L765, [16,17)
        float v617 = v5[((v615 * 15) + 1)];	// L766, [1,3)
        v3[v6][v7][((v615 * 15) + 1)] = v617;	// L767, [16,17)
        float v618 = v5[((v615 * 15) + 2)];	// L768, [2,4)
        v3[v6][v7][((v615 * 15) + 2)] = v618;	// L769, [16,17)
        float v619 = v5[((v615 * 15) + 3)];	// L770, [3,5)
        v3[v6][v7][((v615 * 15) + 3)] = v619;	// L771, [16,17)
        float v620 = v5[((v615 * 15) + 4)];	// L772, [4,6)
        v3[v6][v7][((v615 * 15) + 4)] = v620;	// L773, [16,17)
        float v621 = v5[((v615 * 15) + 5)];	// L774, [5,7)
        v3[v6][v7][((v615 * 15) + 5)] = v621;	// L775, [16,17)
        float v622 = v5[((v615 * 15) + 6)];	// L776, [6,8)
        v3[v6][v7][((v615 * 15) + 6)] = v622;	// L777, [16,17)
        float v623 = v5[((v615 * 15) + 7)];	// L778, [7,9)
        v3[v6][v7][((v615 * 15) + 7)] = v623;	// L779, [16,17)
        float v624 = v5[((v615 * 15) + 8)];	// L780, [8,10)
        v3[v6][v7][((v615 * 15) + 8)] = v624;	// L781, [16,17)
        float v625 = v5[((v615 * 15) + 9)];	// L782, [9,11)
        v3[v6][v7][((v615 * 15) + 9)] = v625;	// L783, [16,17)
        float v626 = v5[((v615 * 15) + 10)];	// L784, [10,12)
        v3[v6][v7][((v615 * 15) + 10)] = v626;	// L785, [16,17)
        float v627 = v5[((v615 * 15) + 11)];	// L786, [11,13)
        v3[v6][v7][((v615 * 15) + 11)] = v627;	// L787, [16,17)
        float v628 = v5[((v615 * 15) + 12)];	// L788, [12,14)
        v3[v6][v7][((v615 * 15) + 12)] = v628;	// L789, [16,17)
        float v629 = v5[((v615 * 15) + 13)];	// L790, [13,15)
        v3[v6][v7][((v615 * 15) + 13)] = v629;	// L791, [16,17)
        float v630 = v5[((v615 * 15) + 14)];	// L792, [14,16)
        v3[v6][v7][((v615 * 15) + 14)] = v630;	// L793, [16,17)
      }
    }
  }
}

