
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=395, interval=395
/// DSP=323
void get_oracle_activations1(
  double v0[4096],
  double v1[64],
  double v2[64],
  double v3[64]
) {	// L5, [0,395)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3

  #pragma HLS array_partition variable=v0 cyclic factor=256 dim=1
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=64 dim=1

  #pragma HLS array_partition variable=v2 cyclic factor=4 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=4 dim=1
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  for (int v4 = 0; v4 < 16; v4 += 1) {	// L7, [0,393), iterCycle=331, II=4
    #pragma HLS pipeline II=4
    double v5 = v1[0];	// L8, [0,2)
    double v6 = v0[(v4 * 256)];	// L9, [0,2)
    double v7 = v5 * v6;	// L10, [2,6)
    double v8 = v7 + 0.000000;	// L11, [6,11)
    double v9 = v3[(v4 * 4)];	// L12, [324,326)
    double v10 = v0[((v4 * 256) + 64)];	// L13, [0,2)
    double v11 = v5 * v10;	// L14, [2,6)
    double v12 = v11 + 0.000000;	// L15, [6,11)
    double v13 = v3[((v4 * 4) + 1)];	// L16, [324,326)
    double v14 = v0[((v4 * 256) + 128)];	// L17, [0,2)
    double v15 = v5 * v14;	// L18, [2,6)
    double v16 = v15 + 0.000000;	// L19, [6,11)
    double v17 = v3[((v4 * 4) + 2)];	// L20, [324,326)
    double v18 = v0[((v4 * 256) + 192)];	// L21, [0,2)
    double v19 = v5 * v18;	// L22, [2,6)
    double v20 = v19 + 0.000000;	// L23, [6,11)
    double v21 = v3[((v4 * 4) + 3)];	// L24, [324,326)
    double v22 = v1[1];	// L25, [5,7)
    double v23 = v0[((v4 * 256) + 1)];	// L26, [5,7)
    double v24 = v22 * v23;	// L27, [7,11)
    double v25 = v8 + v24;	// L28, [11,16)
    double v26 = v0[((v4 * 256) + 65)];	// L29, [5,7)
    double v27 = v22 * v26;	// L30, [7,11)
    double v28 = v12 + v27;	// L31, [11,16)
    double v29 = v0[((v4 * 256) + 129)];	// L32, [5,7)
    double v30 = v22 * v29;	// L33, [7,11)
    double v31 = v16 + v30;	// L34, [11,16)
    double v32 = v0[((v4 * 256) + 193)];	// L35, [5,7)
    double v33 = v22 * v32;	// L36, [7,11)
    double v34 = v20 + v33;	// L37, [11,16)
    double v35 = v1[2];	// L38, [10,12)
    double v36 = v0[((v4 * 256) + 2)];	// L39, [10,12)
    double v37 = v35 * v36;	// L40, [12,16)
    double v38 = v25 + v37;	// L41, [16,21)
    double v39 = v0[((v4 * 256) + 66)];	// L42, [10,12)
    double v40 = v35 * v39;	// L43, [12,16)
    double v41 = v28 + v40;	// L44, [16,21)
    double v42 = v0[((v4 * 256) + 130)];	// L45, [10,12)
    double v43 = v35 * v42;	// L46, [12,16)
    double v44 = v31 + v43;	// L47, [16,21)
    double v45 = v0[((v4 * 256) + 194)];	// L48, [10,12)
    double v46 = v35 * v45;	// L49, [12,16)
    double v47 = v34 + v46;	// L50, [16,21)
    double v48 = v1[3];	// L51, [15,17)
    double v49 = v0[((v4 * 256) + 3)];	// L52, [15,17)
    double v50 = v48 * v49;	// L53, [17,21)
    double v51 = v38 + v50;	// L54, [21,26)
    double v52 = v0[((v4 * 256) + 67)];	// L55, [15,17)
    double v53 = v48 * v52;	// L56, [17,21)
    double v54 = v41 + v53;	// L57, [21,26)
    double v55 = v0[((v4 * 256) + 131)];	// L58, [15,17)
    double v56 = v48 * v55;	// L59, [17,21)
    double v57 = v44 + v56;	// L60, [21,26)
    double v58 = v0[((v4 * 256) + 195)];	// L61, [15,17)
    double v59 = v48 * v58;	// L62, [17,21)
    double v60 = v47 + v59;	// L63, [21,26)
    double v61 = v1[4];	// L64, [20,22)
    double v62 = v0[((v4 * 256) + 4)];	// L65, [20,22)
    double v63 = v61 * v62;	// L66, [22,26)
    double v64 = v51 + v63;	// L67, [26,31)
    double v65 = v0[((v4 * 256) + 68)];	// L68, [20,22)
    double v66 = v61 * v65;	// L69, [22,26)
    double v67 = v54 + v66;	// L70, [26,31)
    double v68 = v0[((v4 * 256) + 132)];	// L71, [20,22)
    double v69 = v61 * v68;	// L72, [22,26)
    double v70 = v57 + v69;	// L73, [26,31)
    double v71 = v0[((v4 * 256) + 196)];	// L74, [20,22)
    double v72 = v61 * v71;	// L75, [22,26)
    double v73 = v60 + v72;	// L76, [26,31)
    double v74 = v1[5];	// L77, [25,27)
    double v75 = v0[((v4 * 256) + 5)];	// L78, [25,27)
    double v76 = v74 * v75;	// L79, [27,31)
    double v77 = v64 + v76;	// L80, [31,36)
    double v78 = v0[((v4 * 256) + 69)];	// L81, [25,27)
    double v79 = v74 * v78;	// L82, [27,31)
    double v80 = v67 + v79;	// L83, [31,36)
    double v81 = v0[((v4 * 256) + 133)];	// L84, [25,27)
    double v82 = v74 * v81;	// L85, [27,31)
    double v83 = v70 + v82;	// L86, [31,36)
    double v84 = v0[((v4 * 256) + 197)];	// L87, [25,27)
    double v85 = v74 * v84;	// L88, [27,31)
    double v86 = v73 + v85;	// L89, [31,36)
    double v87 = v1[6];	// L90, [30,32)
    double v88 = v0[((v4 * 256) + 6)];	// L91, [30,32)
    double v89 = v87 * v88;	// L92, [32,36)
    double v90 = v77 + v89;	// L93, [36,41)
    double v91 = v0[((v4 * 256) + 70)];	// L94, [30,32)
    double v92 = v87 * v91;	// L95, [32,36)
    double v93 = v80 + v92;	// L96, [36,41)
    double v94 = v0[((v4 * 256) + 134)];	// L97, [30,32)
    double v95 = v87 * v94;	// L98, [32,36)
    double v96 = v83 + v95;	// L99, [36,41)
    double v97 = v0[((v4 * 256) + 198)];	// L100, [30,32)
    double v98 = v87 * v97;	// L101, [32,36)
    double v99 = v86 + v98;	// L102, [36,41)
    double v100 = v1[7];	// L103, [35,37)
    double v101 = v0[((v4 * 256) + 7)];	// L104, [35,37)
    double v102 = v100 * v101;	// L105, [37,41)
    double v103 = v90 + v102;	// L106, [41,46)
    double v104 = v0[((v4 * 256) + 71)];	// L107, [35,37)
    double v105 = v100 * v104;	// L108, [37,41)
    double v106 = v93 + v105;	// L109, [41,46)
    double v107 = v0[((v4 * 256) + 135)];	// L110, [35,37)
    double v108 = v100 * v107;	// L111, [37,41)
    double v109 = v96 + v108;	// L112, [41,46)
    double v110 = v0[((v4 * 256) + 199)];	// L113, [35,37)
    double v111 = v100 * v110;	// L114, [37,41)
    double v112 = v99 + v111;	// L115, [41,46)
    double v113 = v1[8];	// L116, [40,42)
    double v114 = v0[((v4 * 256) + 8)];	// L117, [40,42)
    double v115 = v113 * v114;	// L118, [42,46)
    double v116 = v103 + v115;	// L119, [46,51)
    double v117 = v0[((v4 * 256) + 72)];	// L120, [40,42)
    double v118 = v113 * v117;	// L121, [42,46)
    double v119 = v106 + v118;	// L122, [46,51)
    double v120 = v0[((v4 * 256) + 136)];	// L123, [40,42)
    double v121 = v113 * v120;	// L124, [42,46)
    double v122 = v109 + v121;	// L125, [46,51)
    double v123 = v0[((v4 * 256) + 200)];	// L126, [40,42)
    double v124 = v113 * v123;	// L127, [42,46)
    double v125 = v112 + v124;	// L128, [46,51)
    double v126 = v1[9];	// L129, [45,47)
    double v127 = v0[((v4 * 256) + 9)];	// L130, [45,47)
    double v128 = v126 * v127;	// L131, [47,51)
    double v129 = v116 + v128;	// L132, [51,56)
    double v130 = v0[((v4 * 256) + 73)];	// L133, [45,47)
    double v131 = v126 * v130;	// L134, [47,51)
    double v132 = v119 + v131;	// L135, [51,56)
    double v133 = v0[((v4 * 256) + 137)];	// L136, [45,47)
    double v134 = v126 * v133;	// L137, [47,51)
    double v135 = v122 + v134;	// L138, [51,56)
    double v136 = v0[((v4 * 256) + 201)];	// L139, [45,47)
    double v137 = v126 * v136;	// L140, [47,51)
    double v138 = v125 + v137;	// L141, [51,56)
    double v139 = v1[10];	// L142, [50,52)
    double v140 = v0[((v4 * 256) + 10)];	// L143, [50,52)
    double v141 = v139 * v140;	// L144, [52,56)
    double v142 = v129 + v141;	// L145, [56,61)
    double v143 = v0[((v4 * 256) + 74)];	// L146, [50,52)
    double v144 = v139 * v143;	// L147, [52,56)
    double v145 = v132 + v144;	// L148, [56,61)
    double v146 = v0[((v4 * 256) + 138)];	// L149, [50,52)
    double v147 = v139 * v146;	// L150, [52,56)
    double v148 = v135 + v147;	// L151, [56,61)
    double v149 = v0[((v4 * 256) + 202)];	// L152, [50,52)
    double v150 = v139 * v149;	// L153, [52,56)
    double v151 = v138 + v150;	// L154, [56,61)
    double v152 = v1[11];	// L155, [55,57)
    double v153 = v0[((v4 * 256) + 11)];	// L156, [55,57)
    double v154 = v152 * v153;	// L157, [57,61)
    double v155 = v142 + v154;	// L158, [61,66)
    double v156 = v0[((v4 * 256) + 75)];	// L159, [55,57)
    double v157 = v152 * v156;	// L160, [57,61)
    double v158 = v145 + v157;	// L161, [61,66)
    double v159 = v0[((v4 * 256) + 139)];	// L162, [55,57)
    double v160 = v152 * v159;	// L163, [57,61)
    double v161 = v148 + v160;	// L164, [61,66)
    double v162 = v0[((v4 * 256) + 203)];	// L165, [55,57)
    double v163 = v152 * v162;	// L166, [57,61)
    double v164 = v151 + v163;	// L167, [61,66)
    double v165 = v1[12];	// L168, [60,62)
    double v166 = v0[((v4 * 256) + 12)];	// L169, [60,62)
    double v167 = v165 * v166;	// L170, [62,66)
    double v168 = v155 + v167;	// L171, [66,71)
    double v169 = v0[((v4 * 256) + 76)];	// L172, [60,62)
    double v170 = v165 * v169;	// L173, [62,66)
    double v171 = v158 + v170;	// L174, [66,71)
    double v172 = v0[((v4 * 256) + 140)];	// L175, [60,62)
    double v173 = v165 * v172;	// L176, [62,66)
    double v174 = v161 + v173;	// L177, [66,71)
    double v175 = v0[((v4 * 256) + 204)];	// L178, [60,62)
    double v176 = v165 * v175;	// L179, [62,66)
    double v177 = v164 + v176;	// L180, [66,71)
    double v178 = v1[13];	// L181, [65,67)
    double v179 = v0[((v4 * 256) + 13)];	// L182, [65,67)
    double v180 = v178 * v179;	// L183, [67,71)
    double v181 = v168 + v180;	// L184, [71,76)
    double v182 = v0[((v4 * 256) + 77)];	// L185, [65,67)
    double v183 = v178 * v182;	// L186, [67,71)
    double v184 = v171 + v183;	// L187, [71,76)
    double v185 = v0[((v4 * 256) + 141)];	// L188, [65,67)
    double v186 = v178 * v185;	// L189, [67,71)
    double v187 = v174 + v186;	// L190, [71,76)
    double v188 = v0[((v4 * 256) + 205)];	// L191, [65,67)
    double v189 = v178 * v188;	// L192, [67,71)
    double v190 = v177 + v189;	// L193, [71,76)
    double v191 = v1[14];	// L194, [70,72)
    double v192 = v0[((v4 * 256) + 14)];	// L195, [70,72)
    double v193 = v191 * v192;	// L196, [72,76)
    double v194 = v181 + v193;	// L197, [76,81)
    double v195 = v0[((v4 * 256) + 78)];	// L198, [70,72)
    double v196 = v191 * v195;	// L199, [72,76)
    double v197 = v184 + v196;	// L200, [76,81)
    double v198 = v0[((v4 * 256) + 142)];	// L201, [70,72)
    double v199 = v191 * v198;	// L202, [72,76)
    double v200 = v187 + v199;	// L203, [76,81)
    double v201 = v0[((v4 * 256) + 206)];	// L204, [70,72)
    double v202 = v191 * v201;	// L205, [72,76)
    double v203 = v190 + v202;	// L206, [76,81)
    double v204 = v1[15];	// L207, [75,77)
    double v205 = v0[((v4 * 256) + 15)];	// L208, [75,77)
    double v206 = v204 * v205;	// L209, [77,81)
    double v207 = v194 + v206;	// L210, [81,86)
    double v208 = v0[((v4 * 256) + 79)];	// L211, [75,77)
    double v209 = v204 * v208;	// L212, [77,81)
    double v210 = v197 + v209;	// L213, [81,86)
    double v211 = v0[((v4 * 256) + 143)];	// L214, [75,77)
    double v212 = v204 * v211;	// L215, [77,81)
    double v213 = v200 + v212;	// L216, [81,86)
    double v214 = v0[((v4 * 256) + 207)];	// L217, [75,77)
    double v215 = v204 * v214;	// L218, [77,81)
    double v216 = v203 + v215;	// L219, [81,86)
    double v217 = v1[16];	// L220, [80,82)
    double v218 = v0[((v4 * 256) + 16)];	// L221, [80,82)
    double v219 = v217 * v218;	// L222, [82,86)
    double v220 = v207 + v219;	// L223, [86,91)
    double v221 = v0[((v4 * 256) + 80)];	// L224, [80,82)
    double v222 = v217 * v221;	// L225, [82,86)
    double v223 = v210 + v222;	// L226, [86,91)
    double v224 = v0[((v4 * 256) + 144)];	// L227, [80,82)
    double v225 = v217 * v224;	// L228, [82,86)
    double v226 = v213 + v225;	// L229, [86,91)
    double v227 = v0[((v4 * 256) + 208)];	// L230, [80,82)
    double v228 = v217 * v227;	// L231, [82,86)
    double v229 = v216 + v228;	// L232, [86,91)
    double v230 = v1[17];	// L233, [85,87)
    double v231 = v0[((v4 * 256) + 17)];	// L234, [85,87)
    double v232 = v230 * v231;	// L235, [87,91)
    double v233 = v220 + v232;	// L236, [91,96)
    double v234 = v0[((v4 * 256) + 81)];	// L237, [85,87)
    double v235 = v230 * v234;	// L238, [87,91)
    double v236 = v223 + v235;	// L239, [91,96)
    double v237 = v0[((v4 * 256) + 145)];	// L240, [85,87)
    double v238 = v230 * v237;	// L241, [87,91)
    double v239 = v226 + v238;	// L242, [91,96)
    double v240 = v0[((v4 * 256) + 209)];	// L243, [85,87)
    double v241 = v230 * v240;	// L244, [87,91)
    double v242 = v229 + v241;	// L245, [91,96)
    double v243 = v1[18];	// L246, [90,92)
    double v244 = v0[((v4 * 256) + 18)];	// L247, [90,92)
    double v245 = v243 * v244;	// L248, [92,96)
    double v246 = v233 + v245;	// L249, [96,101)
    double v247 = v0[((v4 * 256) + 82)];	// L250, [90,92)
    double v248 = v243 * v247;	// L251, [92,96)
    double v249 = v236 + v248;	// L252, [96,101)
    double v250 = v0[((v4 * 256) + 146)];	// L253, [90,92)
    double v251 = v243 * v250;	// L254, [92,96)
    double v252 = v239 + v251;	// L255, [96,101)
    double v253 = v0[((v4 * 256) + 210)];	// L256, [90,92)
    double v254 = v243 * v253;	// L257, [92,96)
    double v255 = v242 + v254;	// L258, [96,101)
    double v256 = v1[19];	// L259, [95,97)
    double v257 = v0[((v4 * 256) + 19)];	// L260, [95,97)
    double v258 = v256 * v257;	// L261, [97,101)
    double v259 = v246 + v258;	// L262, [101,106)
    double v260 = v0[((v4 * 256) + 83)];	// L263, [95,97)
    double v261 = v256 * v260;	// L264, [97,101)
    double v262 = v249 + v261;	// L265, [101,106)
    double v263 = v0[((v4 * 256) + 147)];	// L266, [95,97)
    double v264 = v256 * v263;	// L267, [97,101)
    double v265 = v252 + v264;	// L268, [101,106)
    double v266 = v0[((v4 * 256) + 211)];	// L269, [95,97)
    double v267 = v256 * v266;	// L270, [97,101)
    double v268 = v255 + v267;	// L271, [101,106)
    double v269 = v1[20];	// L272, [100,102)
    double v270 = v0[((v4 * 256) + 20)];	// L273, [100,102)
    double v271 = v269 * v270;	// L274, [102,106)
    double v272 = v259 + v271;	// L275, [106,111)
    double v273 = v0[((v4 * 256) + 84)];	// L276, [100,102)
    double v274 = v269 * v273;	// L277, [102,106)
    double v275 = v262 + v274;	// L278, [106,111)
    double v276 = v0[((v4 * 256) + 148)];	// L279, [100,102)
    double v277 = v269 * v276;	// L280, [102,106)
    double v278 = v265 + v277;	// L281, [106,111)
    double v279 = v0[((v4 * 256) + 212)];	// L282, [100,102)
    double v280 = v269 * v279;	// L283, [102,106)
    double v281 = v268 + v280;	// L284, [106,111)
    double v282 = v1[21];	// L285, [105,107)
    double v283 = v0[((v4 * 256) + 21)];	// L286, [105,107)
    double v284 = v282 * v283;	// L287, [107,111)
    double v285 = v272 + v284;	// L288, [111,116)
    double v286 = v0[((v4 * 256) + 85)];	// L289, [105,107)
    double v287 = v282 * v286;	// L290, [107,111)
    double v288 = v275 + v287;	// L291, [111,116)
    double v289 = v0[((v4 * 256) + 149)];	// L292, [105,107)
    double v290 = v282 * v289;	// L293, [107,111)
    double v291 = v278 + v290;	// L294, [111,116)
    double v292 = v0[((v4 * 256) + 213)];	// L295, [105,107)
    double v293 = v282 * v292;	// L296, [107,111)
    double v294 = v281 + v293;	// L297, [111,116)
    double v295 = v1[22];	// L298, [110,112)
    double v296 = v0[((v4 * 256) + 22)];	// L299, [110,112)
    double v297 = v295 * v296;	// L300, [112,116)
    double v298 = v285 + v297;	// L301, [116,121)
    double v299 = v0[((v4 * 256) + 86)];	// L302, [110,112)
    double v300 = v295 * v299;	// L303, [112,116)
    double v301 = v288 + v300;	// L304, [116,121)
    double v302 = v0[((v4 * 256) + 150)];	// L305, [110,112)
    double v303 = v295 * v302;	// L306, [112,116)
    double v304 = v291 + v303;	// L307, [116,121)
    double v305 = v0[((v4 * 256) + 214)];	// L308, [110,112)
    double v306 = v295 * v305;	// L309, [112,116)
    double v307 = v294 + v306;	// L310, [116,121)
    double v308 = v1[23];	// L311, [115,117)
    double v309 = v0[((v4 * 256) + 23)];	// L312, [115,117)
    double v310 = v308 * v309;	// L313, [117,121)
    double v311 = v298 + v310;	// L314, [121,126)
    double v312 = v0[((v4 * 256) + 87)];	// L315, [115,117)
    double v313 = v308 * v312;	// L316, [117,121)
    double v314 = v301 + v313;	// L317, [121,126)
    double v315 = v0[((v4 * 256) + 151)];	// L318, [115,117)
    double v316 = v308 * v315;	// L319, [117,121)
    double v317 = v304 + v316;	// L320, [121,126)
    double v318 = v0[((v4 * 256) + 215)];	// L321, [115,117)
    double v319 = v308 * v318;	// L322, [117,121)
    double v320 = v307 + v319;	// L323, [121,126)
    double v321 = v1[24];	// L324, [120,122)
    double v322 = v0[((v4 * 256) + 24)];	// L325, [120,122)
    double v323 = v321 * v322;	// L326, [122,126)
    double v324 = v311 + v323;	// L327, [126,131)
    double v325 = v0[((v4 * 256) + 88)];	// L328, [120,122)
    double v326 = v321 * v325;	// L329, [122,126)
    double v327 = v314 + v326;	// L330, [126,131)
    double v328 = v0[((v4 * 256) + 152)];	// L331, [120,122)
    double v329 = v321 * v328;	// L332, [122,126)
    double v330 = v317 + v329;	// L333, [126,131)
    double v331 = v0[((v4 * 256) + 216)];	// L334, [120,122)
    double v332 = v321 * v331;	// L335, [122,126)
    double v333 = v320 + v332;	// L336, [126,131)
    double v334 = v1[25];	// L337, [125,127)
    double v335 = v0[((v4 * 256) + 25)];	// L338, [125,127)
    double v336 = v334 * v335;	// L339, [127,131)
    double v337 = v324 + v336;	// L340, [131,136)
    double v338 = v0[((v4 * 256) + 89)];	// L341, [125,127)
    double v339 = v334 * v338;	// L342, [127,131)
    double v340 = v327 + v339;	// L343, [131,136)
    double v341 = v0[((v4 * 256) + 153)];	// L344, [125,127)
    double v342 = v334 * v341;	// L345, [127,131)
    double v343 = v330 + v342;	// L346, [131,136)
    double v344 = v0[((v4 * 256) + 217)];	// L347, [125,127)
    double v345 = v334 * v344;	// L348, [127,131)
    double v346 = v333 + v345;	// L349, [131,136)
    double v347 = v1[26];	// L350, [130,132)
    double v348 = v0[((v4 * 256) + 26)];	// L351, [130,132)
    double v349 = v347 * v348;	// L352, [132,136)
    double v350 = v337 + v349;	// L353, [136,141)
    double v351 = v0[((v4 * 256) + 90)];	// L354, [130,132)
    double v352 = v347 * v351;	// L355, [132,136)
    double v353 = v340 + v352;	// L356, [136,141)
    double v354 = v0[((v4 * 256) + 154)];	// L357, [130,132)
    double v355 = v347 * v354;	// L358, [132,136)
    double v356 = v343 + v355;	// L359, [136,141)
    double v357 = v0[((v4 * 256) + 218)];	// L360, [130,132)
    double v358 = v347 * v357;	// L361, [132,136)
    double v359 = v346 + v358;	// L362, [136,141)
    double v360 = v1[27];	// L363, [135,137)
    double v361 = v0[((v4 * 256) + 27)];	// L364, [135,137)
    double v362 = v360 * v361;	// L365, [137,141)
    double v363 = v350 + v362;	// L366, [141,146)
    double v364 = v0[((v4 * 256) + 91)];	// L367, [135,137)
    double v365 = v360 * v364;	// L368, [137,141)
    double v366 = v353 + v365;	// L369, [141,146)
    double v367 = v0[((v4 * 256) + 155)];	// L370, [135,137)
    double v368 = v360 * v367;	// L371, [137,141)
    double v369 = v356 + v368;	// L372, [141,146)
    double v370 = v0[((v4 * 256) + 219)];	// L373, [135,137)
    double v371 = v360 * v370;	// L374, [137,141)
    double v372 = v359 + v371;	// L375, [141,146)
    double v373 = v1[28];	// L376, [140,142)
    double v374 = v0[((v4 * 256) + 28)];	// L377, [140,142)
    double v375 = v373 * v374;	// L378, [142,146)
    double v376 = v363 + v375;	// L379, [146,151)
    double v377 = v0[((v4 * 256) + 92)];	// L380, [140,142)
    double v378 = v373 * v377;	// L381, [142,146)
    double v379 = v366 + v378;	// L382, [146,151)
    double v380 = v0[((v4 * 256) + 156)];	// L383, [140,142)
    double v381 = v373 * v380;	// L384, [142,146)
    double v382 = v369 + v381;	// L385, [146,151)
    double v383 = v0[((v4 * 256) + 220)];	// L386, [140,142)
    double v384 = v373 * v383;	// L387, [142,146)
    double v385 = v372 + v384;	// L388, [146,151)
    double v386 = v1[29];	// L389, [145,147)
    double v387 = v0[((v4 * 256) + 29)];	// L390, [145,147)
    double v388 = v386 * v387;	// L391, [147,151)
    double v389 = v376 + v388;	// L392, [151,156)
    double v390 = v0[((v4 * 256) + 93)];	// L393, [145,147)
    double v391 = v386 * v390;	// L394, [147,151)
    double v392 = v379 + v391;	// L395, [151,156)
    double v393 = v0[((v4 * 256) + 157)];	// L396, [145,147)
    double v394 = v386 * v393;	// L397, [147,151)
    double v395 = v382 + v394;	// L398, [151,156)
    double v396 = v0[((v4 * 256) + 221)];	// L399, [145,147)
    double v397 = v386 * v396;	// L400, [147,151)
    double v398 = v385 + v397;	// L401, [151,156)
    double v399 = v1[30];	// L402, [150,152)
    double v400 = v0[((v4 * 256) + 30)];	// L403, [150,152)
    double v401 = v399 * v400;	// L404, [152,156)
    double v402 = v389 + v401;	// L405, [156,161)
    double v403 = v0[((v4 * 256) + 94)];	// L406, [150,152)
    double v404 = v399 * v403;	// L407, [152,156)
    double v405 = v392 + v404;	// L408, [156,161)
    double v406 = v0[((v4 * 256) + 158)];	// L409, [150,152)
    double v407 = v399 * v406;	// L410, [152,156)
    double v408 = v395 + v407;	// L411, [156,161)
    double v409 = v0[((v4 * 256) + 222)];	// L412, [150,152)
    double v410 = v399 * v409;	// L413, [152,156)
    double v411 = v398 + v410;	// L414, [156,161)
    double v412 = v1[31];	// L415, [155,157)
    double v413 = v0[((v4 * 256) + 31)];	// L416, [155,157)
    double v414 = v412 * v413;	// L417, [157,161)
    double v415 = v402 + v414;	// L418, [161,166)
    double v416 = v0[((v4 * 256) + 95)];	// L419, [155,157)
    double v417 = v412 * v416;	// L420, [157,161)
    double v418 = v405 + v417;	// L421, [161,166)
    double v419 = v0[((v4 * 256) + 159)];	// L422, [155,157)
    double v420 = v412 * v419;	// L423, [157,161)
    double v421 = v408 + v420;	// L424, [161,166)
    double v422 = v0[((v4 * 256) + 223)];	// L425, [155,157)
    double v423 = v412 * v422;	// L426, [157,161)
    double v424 = v411 + v423;	// L427, [161,166)
    double v425 = v1[32];	// L428, [160,162)
    double v426 = v0[((v4 * 256) + 32)];	// L429, [160,162)
    double v427 = v425 * v426;	// L430, [162,166)
    double v428 = v415 + v427;	// L431, [166,171)
    double v429 = v0[((v4 * 256) + 96)];	// L432, [160,162)
    double v430 = v425 * v429;	// L433, [162,166)
    double v431 = v418 + v430;	// L434, [166,171)
    double v432 = v0[((v4 * 256) + 160)];	// L435, [160,162)
    double v433 = v425 * v432;	// L436, [162,166)
    double v434 = v421 + v433;	// L437, [166,171)
    double v435 = v0[((v4 * 256) + 224)];	// L438, [160,162)
    double v436 = v425 * v435;	// L439, [162,166)
    double v437 = v424 + v436;	// L440, [166,171)
    double v438 = v1[33];	// L441, [165,167)
    double v439 = v0[((v4 * 256) + 33)];	// L442, [165,167)
    double v440 = v438 * v439;	// L443, [167,171)
    double v441 = v428 + v440;	// L444, [171,176)
    double v442 = v0[((v4 * 256) + 97)];	// L445, [165,167)
    double v443 = v438 * v442;	// L446, [167,171)
    double v444 = v431 + v443;	// L447, [171,176)
    double v445 = v0[((v4 * 256) + 161)];	// L448, [165,167)
    double v446 = v438 * v445;	// L449, [167,171)
    double v447 = v434 + v446;	// L450, [171,176)
    double v448 = v0[((v4 * 256) + 225)];	// L451, [165,167)
    double v449 = v438 * v448;	// L452, [167,171)
    double v450 = v437 + v449;	// L453, [171,176)
    double v451 = v1[34];	// L454, [170,172)
    double v452 = v0[((v4 * 256) + 34)];	// L455, [170,172)
    double v453 = v451 * v452;	// L456, [172,176)
    double v454 = v441 + v453;	// L457, [176,181)
    double v455 = v0[((v4 * 256) + 98)];	// L458, [170,172)
    double v456 = v451 * v455;	// L459, [172,176)
    double v457 = v444 + v456;	// L460, [176,181)
    double v458 = v0[((v4 * 256) + 162)];	// L461, [170,172)
    double v459 = v451 * v458;	// L462, [172,176)
    double v460 = v447 + v459;	// L463, [176,181)
    double v461 = v0[((v4 * 256) + 226)];	// L464, [170,172)
    double v462 = v451 * v461;	// L465, [172,176)
    double v463 = v450 + v462;	// L466, [176,181)
    double v464 = v1[35];	// L467, [175,177)
    double v465 = v0[((v4 * 256) + 35)];	// L468, [175,177)
    double v466 = v464 * v465;	// L469, [177,181)
    double v467 = v454 + v466;	// L470, [181,186)
    double v468 = v0[((v4 * 256) + 99)];	// L471, [175,177)
    double v469 = v464 * v468;	// L472, [177,181)
    double v470 = v457 + v469;	// L473, [181,186)
    double v471 = v0[((v4 * 256) + 163)];	// L474, [175,177)
    double v472 = v464 * v471;	// L475, [177,181)
    double v473 = v460 + v472;	// L476, [181,186)
    double v474 = v0[((v4 * 256) + 227)];	// L477, [175,177)
    double v475 = v464 * v474;	// L478, [177,181)
    double v476 = v463 + v475;	// L479, [181,186)
    double v477 = v1[36];	// L480, [180,182)
    double v478 = v0[((v4 * 256) + 36)];	// L481, [180,182)
    double v479 = v477 * v478;	// L482, [182,186)
    double v480 = v467 + v479;	// L483, [186,191)
    double v481 = v0[((v4 * 256) + 100)];	// L484, [180,182)
    double v482 = v477 * v481;	// L485, [182,186)
    double v483 = v470 + v482;	// L486, [186,191)
    double v484 = v0[((v4 * 256) + 164)];	// L487, [180,182)
    double v485 = v477 * v484;	// L488, [182,186)
    double v486 = v473 + v485;	// L489, [186,191)
    double v487 = v0[((v4 * 256) + 228)];	// L490, [180,182)
    double v488 = v477 * v487;	// L491, [182,186)
    double v489 = v476 + v488;	// L492, [186,191)
    double v490 = v1[37];	// L493, [185,187)
    double v491 = v0[((v4 * 256) + 37)];	// L494, [185,187)
    double v492 = v490 * v491;	// L495, [187,191)
    double v493 = v480 + v492;	// L496, [191,196)
    double v494 = v0[((v4 * 256) + 101)];	// L497, [185,187)
    double v495 = v490 * v494;	// L498, [187,191)
    double v496 = v483 + v495;	// L499, [191,196)
    double v497 = v0[((v4 * 256) + 165)];	// L500, [185,187)
    double v498 = v490 * v497;	// L501, [187,191)
    double v499 = v486 + v498;	// L502, [191,196)
    double v500 = v0[((v4 * 256) + 229)];	// L503, [185,187)
    double v501 = v490 * v500;	// L504, [187,191)
    double v502 = v489 + v501;	// L505, [191,196)
    double v503 = v1[38];	// L506, [190,192)
    double v504 = v0[((v4 * 256) + 38)];	// L507, [190,192)
    double v505 = v503 * v504;	// L508, [192,196)
    double v506 = v493 + v505;	// L509, [196,201)
    double v507 = v0[((v4 * 256) + 102)];	// L510, [190,192)
    double v508 = v503 * v507;	// L511, [192,196)
    double v509 = v496 + v508;	// L512, [196,201)
    double v510 = v0[((v4 * 256) + 166)];	// L513, [190,192)
    double v511 = v503 * v510;	// L514, [192,196)
    double v512 = v499 + v511;	// L515, [196,201)
    double v513 = v0[((v4 * 256) + 230)];	// L516, [190,192)
    double v514 = v503 * v513;	// L517, [192,196)
    double v515 = v502 + v514;	// L518, [196,201)
    double v516 = v1[39];	// L519, [195,197)
    double v517 = v0[((v4 * 256) + 39)];	// L520, [195,197)
    double v518 = v516 * v517;	// L521, [197,201)
    double v519 = v506 + v518;	// L522, [201,206)
    double v520 = v0[((v4 * 256) + 103)];	// L523, [195,197)
    double v521 = v516 * v520;	// L524, [197,201)
    double v522 = v509 + v521;	// L525, [201,206)
    double v523 = v0[((v4 * 256) + 167)];	// L526, [195,197)
    double v524 = v516 * v523;	// L527, [197,201)
    double v525 = v512 + v524;	// L528, [201,206)
    double v526 = v0[((v4 * 256) + 231)];	// L529, [195,197)
    double v527 = v516 * v526;	// L530, [197,201)
    double v528 = v515 + v527;	// L531, [201,206)
    double v529 = v1[40];	// L532, [200,202)
    double v530 = v0[((v4 * 256) + 40)];	// L533, [200,202)
    double v531 = v529 * v530;	// L534, [202,206)
    double v532 = v519 + v531;	// L535, [206,211)
    double v533 = v0[((v4 * 256) + 104)];	// L536, [200,202)
    double v534 = v529 * v533;	// L537, [202,206)
    double v535 = v522 + v534;	// L538, [206,211)
    double v536 = v0[((v4 * 256) + 168)];	// L539, [200,202)
    double v537 = v529 * v536;	// L540, [202,206)
    double v538 = v525 + v537;	// L541, [206,211)
    double v539 = v0[((v4 * 256) + 232)];	// L542, [200,202)
    double v540 = v529 * v539;	// L543, [202,206)
    double v541 = v528 + v540;	// L544, [206,211)
    double v542 = v1[41];	// L545, [205,207)
    double v543 = v0[((v4 * 256) + 41)];	// L546, [205,207)
    double v544 = v542 * v543;	// L547, [207,211)
    double v545 = v532 + v544;	// L548, [211,216)
    double v546 = v0[((v4 * 256) + 105)];	// L549, [205,207)
    double v547 = v542 * v546;	// L550, [207,211)
    double v548 = v535 + v547;	// L551, [211,216)
    double v549 = v0[((v4 * 256) + 169)];	// L552, [205,207)
    double v550 = v542 * v549;	// L553, [207,211)
    double v551 = v538 + v550;	// L554, [211,216)
    double v552 = v0[((v4 * 256) + 233)];	// L555, [205,207)
    double v553 = v542 * v552;	// L556, [207,211)
    double v554 = v541 + v553;	// L557, [211,216)
    double v555 = v1[42];	// L558, [210,212)
    double v556 = v0[((v4 * 256) + 42)];	// L559, [210,212)
    double v557 = v555 * v556;	// L560, [212,216)
    double v558 = v545 + v557;	// L561, [216,221)
    double v559 = v0[((v4 * 256) + 106)];	// L562, [210,212)
    double v560 = v555 * v559;	// L563, [212,216)
    double v561 = v548 + v560;	// L564, [216,221)
    double v562 = v0[((v4 * 256) + 170)];	// L565, [210,212)
    double v563 = v555 * v562;	// L566, [212,216)
    double v564 = v551 + v563;	// L567, [216,221)
    double v565 = v0[((v4 * 256) + 234)];	// L568, [210,212)
    double v566 = v555 * v565;	// L569, [212,216)
    double v567 = v554 + v566;	// L570, [216,221)
    double v568 = v1[43];	// L571, [215,217)
    double v569 = v0[((v4 * 256) + 43)];	// L572, [215,217)
    double v570 = v568 * v569;	// L573, [217,221)
    double v571 = v558 + v570;	// L574, [221,226)
    double v572 = v0[((v4 * 256) + 107)];	// L575, [215,217)
    double v573 = v568 * v572;	// L576, [217,221)
    double v574 = v561 + v573;	// L577, [221,226)
    double v575 = v0[((v4 * 256) + 171)];	// L578, [215,217)
    double v576 = v568 * v575;	// L579, [217,221)
    double v577 = v564 + v576;	// L580, [221,226)
    double v578 = v0[((v4 * 256) + 235)];	// L581, [215,217)
    double v579 = v568 * v578;	// L582, [217,221)
    double v580 = v567 + v579;	// L583, [221,226)
    double v581 = v1[44];	// L584, [220,222)
    double v582 = v0[((v4 * 256) + 44)];	// L585, [220,222)
    double v583 = v581 * v582;	// L586, [222,226)
    double v584 = v571 + v583;	// L587, [226,231)
    double v585 = v0[((v4 * 256) + 108)];	// L588, [220,222)
    double v586 = v581 * v585;	// L589, [222,226)
    double v587 = v574 + v586;	// L590, [226,231)
    double v588 = v0[((v4 * 256) + 172)];	// L591, [220,222)
    double v589 = v581 * v588;	// L592, [222,226)
    double v590 = v577 + v589;	// L593, [226,231)
    double v591 = v0[((v4 * 256) + 236)];	// L594, [220,222)
    double v592 = v581 * v591;	// L595, [222,226)
    double v593 = v580 + v592;	// L596, [226,231)
    double v594 = v1[45];	// L597, [225,227)
    double v595 = v0[((v4 * 256) + 45)];	// L598, [225,227)
    double v596 = v594 * v595;	// L599, [227,231)
    double v597 = v584 + v596;	// L600, [231,236)
    double v598 = v0[((v4 * 256) + 109)];	// L601, [225,227)
    double v599 = v594 * v598;	// L602, [227,231)
    double v600 = v587 + v599;	// L603, [231,236)
    double v601 = v0[((v4 * 256) + 173)];	// L604, [225,227)
    double v602 = v594 * v601;	// L605, [227,231)
    double v603 = v590 + v602;	// L606, [231,236)
    double v604 = v0[((v4 * 256) + 237)];	// L607, [225,227)
    double v605 = v594 * v604;	// L608, [227,231)
    double v606 = v593 + v605;	// L609, [231,236)
    double v607 = v1[46];	// L610, [230,232)
    double v608 = v0[((v4 * 256) + 46)];	// L611, [230,232)
    double v609 = v607 * v608;	// L612, [232,236)
    double v610 = v597 + v609;	// L613, [236,241)
    double v611 = v0[((v4 * 256) + 110)];	// L614, [230,232)
    double v612 = v607 * v611;	// L615, [232,236)
    double v613 = v600 + v612;	// L616, [236,241)
    double v614 = v0[((v4 * 256) + 174)];	// L617, [230,232)
    double v615 = v607 * v614;	// L618, [232,236)
    double v616 = v603 + v615;	// L619, [236,241)
    double v617 = v0[((v4 * 256) + 238)];	// L620, [230,232)
    double v618 = v607 * v617;	// L621, [232,236)
    double v619 = v606 + v618;	// L622, [236,241)
    double v620 = v1[47];	// L623, [235,237)
    double v621 = v0[((v4 * 256) + 47)];	// L624, [235,237)
    double v622 = v620 * v621;	// L625, [237,241)
    double v623 = v610 + v622;	// L626, [241,246)
    double v624 = v0[((v4 * 256) + 111)];	// L627, [235,237)
    double v625 = v620 * v624;	// L628, [237,241)
    double v626 = v613 + v625;	// L629, [241,246)
    double v627 = v0[((v4 * 256) + 175)];	// L630, [235,237)
    double v628 = v620 * v627;	// L631, [237,241)
    double v629 = v616 + v628;	// L632, [241,246)
    double v630 = v0[((v4 * 256) + 239)];	// L633, [235,237)
    double v631 = v620 * v630;	// L634, [237,241)
    double v632 = v619 + v631;	// L635, [241,246)
    double v633 = v1[48];	// L636, [240,242)
    double v634 = v0[((v4 * 256) + 48)];	// L637, [240,242)
    double v635 = v633 * v634;	// L638, [242,246)
    double v636 = v623 + v635;	// L639, [246,251)
    double v637 = v0[((v4 * 256) + 112)];	// L640, [240,242)
    double v638 = v633 * v637;	// L641, [242,246)
    double v639 = v626 + v638;	// L642, [246,251)
    double v640 = v0[((v4 * 256) + 176)];	// L643, [240,242)
    double v641 = v633 * v640;	// L644, [242,246)
    double v642 = v629 + v641;	// L645, [246,251)
    double v643 = v0[((v4 * 256) + 240)];	// L646, [240,242)
    double v644 = v633 * v643;	// L647, [242,246)
    double v645 = v632 + v644;	// L648, [246,251)
    double v646 = v1[49];	// L649, [245,247)
    double v647 = v0[((v4 * 256) + 49)];	// L650, [245,247)
    double v648 = v646 * v647;	// L651, [247,251)
    double v649 = v636 + v648;	// L652, [251,256)
    double v650 = v0[((v4 * 256) + 113)];	// L653, [245,247)
    double v651 = v646 * v650;	// L654, [247,251)
    double v652 = v639 + v651;	// L655, [251,256)
    double v653 = v0[((v4 * 256) + 177)];	// L656, [245,247)
    double v654 = v646 * v653;	// L657, [247,251)
    double v655 = v642 + v654;	// L658, [251,256)
    double v656 = v0[((v4 * 256) + 241)];	// L659, [245,247)
    double v657 = v646 * v656;	// L660, [247,251)
    double v658 = v645 + v657;	// L661, [251,256)
    double v659 = v1[50];	// L662, [250,252)
    double v660 = v0[((v4 * 256) + 50)];	// L663, [250,252)
    double v661 = v659 * v660;	// L664, [252,256)
    double v662 = v649 + v661;	// L665, [256,261)
    double v663 = v0[((v4 * 256) + 114)];	// L666, [250,252)
    double v664 = v659 * v663;	// L667, [252,256)
    double v665 = v652 + v664;	// L668, [256,261)
    double v666 = v0[((v4 * 256) + 178)];	// L669, [250,252)
    double v667 = v659 * v666;	// L670, [252,256)
    double v668 = v655 + v667;	// L671, [256,261)
    double v669 = v0[((v4 * 256) + 242)];	// L672, [250,252)
    double v670 = v659 * v669;	// L673, [252,256)
    double v671 = v658 + v670;	// L674, [256,261)
    double v672 = v1[51];	// L675, [255,257)
    double v673 = v0[((v4 * 256) + 51)];	// L676, [255,257)
    double v674 = v672 * v673;	// L677, [257,261)
    double v675 = v662 + v674;	// L678, [261,266)
    double v676 = v0[((v4 * 256) + 115)];	// L679, [255,257)
    double v677 = v672 * v676;	// L680, [257,261)
    double v678 = v665 + v677;	// L681, [261,266)
    double v679 = v0[((v4 * 256) + 179)];	// L682, [255,257)
    double v680 = v672 * v679;	// L683, [257,261)
    double v681 = v668 + v680;	// L684, [261,266)
    double v682 = v0[((v4 * 256) + 243)];	// L685, [255,257)
    double v683 = v672 * v682;	// L686, [257,261)
    double v684 = v671 + v683;	// L687, [261,266)
    double v685 = v1[52];	// L688, [260,262)
    double v686 = v0[((v4 * 256) + 52)];	// L689, [260,262)
    double v687 = v685 * v686;	// L690, [262,266)
    double v688 = v675 + v687;	// L691, [266,271)
    double v689 = v0[((v4 * 256) + 116)];	// L692, [260,262)
    double v690 = v685 * v689;	// L693, [262,266)
    double v691 = v678 + v690;	// L694, [266,271)
    double v692 = v0[((v4 * 256) + 180)];	// L695, [260,262)
    double v693 = v685 * v692;	// L696, [262,266)
    double v694 = v681 + v693;	// L697, [266,271)
    double v695 = v0[((v4 * 256) + 244)];	// L698, [260,262)
    double v696 = v685 * v695;	// L699, [262,266)
    double v697 = v684 + v696;	// L700, [266,271)
    double v698 = v1[53];	// L701, [265,267)
    double v699 = v0[((v4 * 256) + 53)];	// L702, [265,267)
    double v700 = v698 * v699;	// L703, [267,271)
    double v701 = v688 + v700;	// L704, [271,276)
    double v702 = v0[((v4 * 256) + 117)];	// L705, [265,267)
    double v703 = v698 * v702;	// L706, [267,271)
    double v704 = v691 + v703;	// L707, [271,276)
    double v705 = v0[((v4 * 256) + 181)];	// L708, [265,267)
    double v706 = v698 * v705;	// L709, [267,271)
    double v707 = v694 + v706;	// L710, [271,276)
    double v708 = v0[((v4 * 256) + 245)];	// L711, [265,267)
    double v709 = v698 * v708;	// L712, [267,271)
    double v710 = v697 + v709;	// L713, [271,276)
    double v711 = v1[54];	// L714, [270,272)
    double v712 = v0[((v4 * 256) + 54)];	// L715, [270,272)
    double v713 = v711 * v712;	// L716, [272,276)
    double v714 = v701 + v713;	// L717, [276,281)
    double v715 = v0[((v4 * 256) + 118)];	// L718, [270,272)
    double v716 = v711 * v715;	// L719, [272,276)
    double v717 = v704 + v716;	// L720, [276,281)
    double v718 = v0[((v4 * 256) + 182)];	// L721, [270,272)
    double v719 = v711 * v718;	// L722, [272,276)
    double v720 = v707 + v719;	// L723, [276,281)
    double v721 = v0[((v4 * 256) + 246)];	// L724, [270,272)
    double v722 = v711 * v721;	// L725, [272,276)
    double v723 = v710 + v722;	// L726, [276,281)
    double v724 = v1[55];	// L727, [275,277)
    double v725 = v0[((v4 * 256) + 55)];	// L728, [275,277)
    double v726 = v724 * v725;	// L729, [277,281)
    double v727 = v714 + v726;	// L730, [281,286)
    double v728 = v0[((v4 * 256) + 119)];	// L731, [275,277)
    double v729 = v724 * v728;	// L732, [277,281)
    double v730 = v717 + v729;	// L733, [281,286)
    double v731 = v0[((v4 * 256) + 183)];	// L734, [275,277)
    double v732 = v724 * v731;	// L735, [277,281)
    double v733 = v720 + v732;	// L736, [281,286)
    double v734 = v0[((v4 * 256) + 247)];	// L737, [275,277)
    double v735 = v724 * v734;	// L738, [277,281)
    double v736 = v723 + v735;	// L739, [281,286)
    double v737 = v1[56];	// L740, [280,282)
    double v738 = v0[((v4 * 256) + 56)];	// L741, [280,282)
    double v739 = v737 * v738;	// L742, [282,286)
    double v740 = v727 + v739;	// L743, [286,291)
    double v741 = v0[((v4 * 256) + 120)];	// L744, [280,282)
    double v742 = v737 * v741;	// L745, [282,286)
    double v743 = v730 + v742;	// L746, [286,291)
    double v744 = v0[((v4 * 256) + 184)];	// L747, [280,282)
    double v745 = v737 * v744;	// L748, [282,286)
    double v746 = v733 + v745;	// L749, [286,291)
    double v747 = v0[((v4 * 256) + 248)];	// L750, [280,282)
    double v748 = v737 * v747;	// L751, [282,286)
    double v749 = v736 + v748;	// L752, [286,291)
    double v750 = v1[57];	// L753, [285,287)
    double v751 = v0[((v4 * 256) + 57)];	// L754, [285,287)
    double v752 = v750 * v751;	// L755, [287,291)
    double v753 = v740 + v752;	// L756, [291,296)
    double v754 = v0[((v4 * 256) + 121)];	// L757, [285,287)
    double v755 = v750 * v754;	// L758, [287,291)
    double v756 = v743 + v755;	// L759, [291,296)
    double v757 = v0[((v4 * 256) + 185)];	// L760, [285,287)
    double v758 = v750 * v757;	// L761, [287,291)
    double v759 = v746 + v758;	// L762, [291,296)
    double v760 = v0[((v4 * 256) + 249)];	// L763, [285,287)
    double v761 = v750 * v760;	// L764, [287,291)
    double v762 = v749 + v761;	// L765, [291,296)
    double v763 = v1[58];	// L766, [290,292)
    double v764 = v0[((v4 * 256) + 58)];	// L767, [290,292)
    double v765 = v763 * v764;	// L768, [292,296)
    double v766 = v753 + v765;	// L769, [296,301)
    double v767 = v0[((v4 * 256) + 122)];	// L770, [290,292)
    double v768 = v763 * v767;	// L771, [292,296)
    double v769 = v756 + v768;	// L772, [296,301)
    double v770 = v0[((v4 * 256) + 186)];	// L773, [290,292)
    double v771 = v763 * v770;	// L774, [292,296)
    double v772 = v759 + v771;	// L775, [296,301)
    double v773 = v0[((v4 * 256) + 250)];	// L776, [290,292)
    double v774 = v763 * v773;	// L777, [292,296)
    double v775 = v762 + v774;	// L778, [296,301)
    double v776 = v1[59];	// L779, [295,297)
    double v777 = v0[((v4 * 256) + 59)];	// L780, [295,297)
    double v778 = v776 * v777;	// L781, [297,301)
    double v779 = v766 + v778;	// L782, [301,306)
    double v780 = v0[((v4 * 256) + 123)];	// L783, [295,297)
    double v781 = v776 * v780;	// L784, [297,301)
    double v782 = v769 + v781;	// L785, [301,306)
    double v783 = v0[((v4 * 256) + 187)];	// L786, [295,297)
    double v784 = v776 * v783;	// L787, [297,301)
    double v785 = v772 + v784;	// L788, [301,306)
    double v786 = v0[((v4 * 256) + 251)];	// L789, [295,297)
    double v787 = v776 * v786;	// L790, [297,301)
    double v788 = v775 + v787;	// L791, [301,306)
    double v789 = v1[60];	// L792, [300,302)
    double v790 = v0[((v4 * 256) + 60)];	// L793, [300,302)
    double v791 = v789 * v790;	// L794, [302,306)
    double v792 = v779 + v791;	// L795, [306,311)
    double v793 = v0[((v4 * 256) + 124)];	// L796, [300,302)
    double v794 = v789 * v793;	// L797, [302,306)
    double v795 = v782 + v794;	// L798, [306,311)
    double v796 = v0[((v4 * 256) + 188)];	// L799, [300,302)
    double v797 = v789 * v796;	// L800, [302,306)
    double v798 = v785 + v797;	// L801, [306,311)
    double v799 = v0[((v4 * 256) + 252)];	// L802, [300,302)
    double v800 = v789 * v799;	// L803, [302,306)
    double v801 = v788 + v800;	// L804, [306,311)
    double v802 = v1[61];	// L805, [305,307)
    double v803 = v0[((v4 * 256) + 61)];	// L806, [305,307)
    double v804 = v802 * v803;	// L807, [307,311)
    double v805 = v792 + v804;	// L808, [311,316)
    double v806 = v0[((v4 * 256) + 125)];	// L809, [305,307)
    double v807 = v802 * v806;	// L810, [307,311)
    double v808 = v795 + v807;	// L811, [311,316)
    double v809 = v0[((v4 * 256) + 189)];	// L812, [305,307)
    double v810 = v802 * v809;	// L813, [307,311)
    double v811 = v798 + v810;	// L814, [311,316)
    double v812 = v0[((v4 * 256) + 253)];	// L815, [305,307)
    double v813 = v802 * v812;	// L816, [307,311)
    double v814 = v801 + v813;	// L817, [311,316)
    double v815 = v1[62];	// L818, [310,312)
    double v816 = v0[((v4 * 256) + 62)];	// L819, [310,312)
    double v817 = v815 * v816;	// L820, [312,316)
    double v818 = v805 + v817;	// L821, [316,321)
    double v819 = v0[((v4 * 256) + 126)];	// L822, [310,312)
    double v820 = v815 * v819;	// L823, [312,316)
    double v821 = v808 + v820;	// L824, [316,321)
    double v822 = v0[((v4 * 256) + 190)];	// L825, [310,312)
    double v823 = v815 * v822;	// L826, [312,316)
    double v824 = v811 + v823;	// L827, [316,321)
    double v825 = v0[((v4 * 256) + 254)];	// L828, [310,312)
    double v826 = v815 * v825;	// L829, [312,316)
    double v827 = v814 + v826;	// L830, [316,321)
    double v828 = v1[63];	// L831, [315,317)
    double v829 = v0[((v4 * 256) + 63)];	// L832, [315,317)
    double v830 = v828 * v829;	// L833, [317,321)
    double v831 = v818 + v830;	// L834, [321,326)
    double v832 = v831 * v9;	// L835, [326,330)
    v2[(v4 * 4)] = v832;	// L836, [330,331)
    double v833 = v0[((v4 * 256) + 127)];	// L837, [315,317)
    double v834 = v828 * v833;	// L838, [317,321)
    double v835 = v821 + v834;	// L839, [321,326)
    double v836 = v835 * v13;	// L840, [326,330)
    v2[((v4 * 4) + 1)] = v836;	// L841, [330,331)
    double v837 = v0[((v4 * 256) + 191)];	// L842, [315,317)
    double v838 = v828 * v837;	// L843, [317,321)
    double v839 = v824 + v838;	// L844, [321,326)
    double v840 = v839 * v17;	// L845, [326,330)
    v2[((v4 * 4) + 2)] = v840;	// L846, [330,331)
    double v841 = v0[((v4 * 256) + 255)];	// L847, [315,317)
    double v842 = v828 * v841;	// L848, [317,321)
    double v843 = v827 + v842;	// L849, [321,326)
    double v844 = v843 * v21;	// L850, [326,330)
    v2[((v4 * 4) + 3)] = v844;	// L851, [330,331)
  }
}

