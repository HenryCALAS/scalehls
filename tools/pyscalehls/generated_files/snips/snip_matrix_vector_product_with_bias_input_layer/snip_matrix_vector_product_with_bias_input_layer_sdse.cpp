
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=132, interval=132
/// DSP=65
void matrix_vector_product_with_bias_input_layer(
  double v0[64],
  double v1[832],
  double v2[64],
  double v3[13]
) {	// L1, [0,132)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2

  #pragma HLS resource variable=v0 core=ram_1p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=104 dim=1
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=8 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=13 dim=1

  for (int v4 = 0; v4 < 8; v4 += 1) {	// L3, [0,130), iterCycle=72, II=8
    #pragma HLS pipeline II=8
    double v5 = v1[(v4 * 104)];	// L4, [0,2)
    double v6 = v3[0];	// L5, [0,2)
    double v7 = v5 * v6;	// L6, [2,6)
    double v8 = v7 + 0.000000;	// L7, [6,11)
    double v9 = v1[((v4 * 104) + 13)];	// L8, [0,2)
    double v10 = v9 * v6;	// L9, [2,6)
    double v11 = v10 + 0.000000;	// L10, [6,11)
    double v12 = v1[((v4 * 104) + 26)];	// L11, [0,2)
    double v13 = v12 * v6;	// L12, [2,6)
    double v14 = v13 + 0.000000;	// L13, [6,11)
    double v15 = v1[((v4 * 104) + 39)];	// L14, [0,2)
    double v16 = v15 * v6;	// L15, [2,6)
    double v17 = v16 + 0.000000;	// L16, [6,11)
    double v18 = v1[((v4 * 104) + 52)];	// L17, [0,2)
    double v19 = v18 * v6;	// L18, [2,6)
    double v20 = v19 + 0.000000;	// L19, [6,11)
    double v21 = v1[((v4 * 104) + 65)];	// L20, [0,2)
    double v22 = v21 * v6;	// L21, [2,6)
    double v23 = v22 + 0.000000;	// L22, [6,11)
    double v24 = v1[((v4 * 104) + 78)];	// L23, [0,2)
    double v25 = v24 * v6;	// L24, [2,6)
    double v26 = v25 + 0.000000;	// L25, [6,11)
    double v27 = v1[((v4 * 104) + 91)];	// L26, [0,2)
    double v28 = v27 * v6;	// L27, [2,6)
    double v29 = v28 + 0.000000;	// L28, [6,11)
    double v30 = v1[((v4 * 104) + 1)];	// L29, [5,7)
    double v31 = v3[1];	// L30, [5,7)
    double v32 = v30 * v31;	// L31, [7,11)
    double v33 = v8 + v32;	// L32, [11,16)
    double v34 = v1[((v4 * 104) + 14)];	// L33, [5,7)
    double v35 = v34 * v31;	// L34, [7,11)
    double v36 = v11 + v35;	// L35, [11,16)
    double v37 = v1[((v4 * 104) + 27)];	// L36, [5,7)
    double v38 = v37 * v31;	// L37, [7,11)
    double v39 = v14 + v38;	// L38, [11,16)
    double v40 = v1[((v4 * 104) + 40)];	// L39, [5,7)
    double v41 = v40 * v31;	// L40, [7,11)
    double v42 = v17 + v41;	// L41, [11,16)
    double v43 = v1[((v4 * 104) + 53)];	// L42, [5,7)
    double v44 = v43 * v31;	// L43, [7,11)
    double v45 = v20 + v44;	// L44, [11,16)
    double v46 = v1[((v4 * 104) + 66)];	// L45, [5,7)
    double v47 = v46 * v31;	// L46, [7,11)
    double v48 = v23 + v47;	// L47, [11,16)
    double v49 = v1[((v4 * 104) + 79)];	// L48, [5,7)
    double v50 = v49 * v31;	// L49, [7,11)
    double v51 = v26 + v50;	// L50, [11,16)
    double v52 = v1[((v4 * 104) + 92)];	// L51, [5,7)
    double v53 = v52 * v31;	// L52, [7,11)
    double v54 = v29 + v53;	// L53, [11,16)
    double v55 = v1[((v4 * 104) + 2)];	// L54, [10,12)
    double v56 = v3[2];	// L55, [10,12)
    double v57 = v55 * v56;	// L56, [12,16)
    double v58 = v33 + v57;	// L57, [16,21)
    double v59 = v1[((v4 * 104) + 15)];	// L58, [10,12)
    double v60 = v59 * v56;	// L59, [12,16)
    double v61 = v36 + v60;	// L60, [16,21)
    double v62 = v1[((v4 * 104) + 28)];	// L61, [10,12)
    double v63 = v62 * v56;	// L62, [12,16)
    double v64 = v39 + v63;	// L63, [16,21)
    double v65 = v1[((v4 * 104) + 41)];	// L64, [10,12)
    double v66 = v65 * v56;	// L65, [12,16)
    double v67 = v42 + v66;	// L66, [16,21)
    double v68 = v1[((v4 * 104) + 54)];	// L67, [10,12)
    double v69 = v68 * v56;	// L68, [12,16)
    double v70 = v45 + v69;	// L69, [16,21)
    double v71 = v1[((v4 * 104) + 67)];	// L70, [10,12)
    double v72 = v71 * v56;	// L71, [12,16)
    double v73 = v48 + v72;	// L72, [16,21)
    double v74 = v1[((v4 * 104) + 80)];	// L73, [10,12)
    double v75 = v74 * v56;	// L74, [12,16)
    double v76 = v51 + v75;	// L75, [16,21)
    double v77 = v1[((v4 * 104) + 93)];	// L76, [10,12)
    double v78 = v77 * v56;	// L77, [12,16)
    double v79 = v54 + v78;	// L78, [16,21)
    double v80 = v1[((v4 * 104) + 3)];	// L79, [15,17)
    double v81 = v3[3];	// L80, [15,17)
    double v82 = v80 * v81;	// L81, [17,21)
    double v83 = v58 + v82;	// L82, [21,26)
    double v84 = v1[((v4 * 104) + 16)];	// L83, [15,17)
    double v85 = v84 * v81;	// L84, [17,21)
    double v86 = v61 + v85;	// L85, [21,26)
    double v87 = v1[((v4 * 104) + 29)];	// L86, [15,17)
    double v88 = v87 * v81;	// L87, [17,21)
    double v89 = v64 + v88;	// L88, [21,26)
    double v90 = v1[((v4 * 104) + 42)];	// L89, [15,17)
    double v91 = v90 * v81;	// L90, [17,21)
    double v92 = v67 + v91;	// L91, [21,26)
    double v93 = v1[((v4 * 104) + 55)];	// L92, [15,17)
    double v94 = v93 * v81;	// L93, [17,21)
    double v95 = v70 + v94;	// L94, [21,26)
    double v96 = v1[((v4 * 104) + 68)];	// L95, [15,17)
    double v97 = v96 * v81;	// L96, [17,21)
    double v98 = v73 + v97;	// L97, [21,26)
    double v99 = v1[((v4 * 104) + 81)];	// L98, [15,17)
    double v100 = v99 * v81;	// L99, [17,21)
    double v101 = v76 + v100;	// L100, [21,26)
    double v102 = v1[((v4 * 104) + 94)];	// L101, [15,17)
    double v103 = v102 * v81;	// L102, [17,21)
    double v104 = v79 + v103;	// L103, [21,26)
    double v105 = v1[((v4 * 104) + 4)];	// L104, [20,22)
    double v106 = v3[4];	// L105, [20,22)
    double v107 = v105 * v106;	// L106, [22,26)
    double v108 = v83 + v107;	// L107, [26,31)
    double v109 = v1[((v4 * 104) + 17)];	// L108, [20,22)
    double v110 = v109 * v106;	// L109, [22,26)
    double v111 = v86 + v110;	// L110, [26,31)
    double v112 = v1[((v4 * 104) + 30)];	// L111, [20,22)
    double v113 = v112 * v106;	// L112, [22,26)
    double v114 = v89 + v113;	// L113, [26,31)
    double v115 = v1[((v4 * 104) + 43)];	// L114, [20,22)
    double v116 = v115 * v106;	// L115, [22,26)
    double v117 = v92 + v116;	// L116, [26,31)
    double v118 = v1[((v4 * 104) + 56)];	// L117, [20,22)
    double v119 = v118 * v106;	// L118, [22,26)
    double v120 = v95 + v119;	// L119, [26,31)
    double v121 = v1[((v4 * 104) + 69)];	// L120, [20,22)
    double v122 = v121 * v106;	// L121, [22,26)
    double v123 = v98 + v122;	// L122, [26,31)
    double v124 = v1[((v4 * 104) + 82)];	// L123, [20,22)
    double v125 = v124 * v106;	// L124, [22,26)
    double v126 = v101 + v125;	// L125, [26,31)
    double v127 = v1[((v4 * 104) + 95)];	// L126, [20,22)
    double v128 = v127 * v106;	// L127, [22,26)
    double v129 = v104 + v128;	// L128, [26,31)
    double v130 = v1[((v4 * 104) + 5)];	// L129, [25,27)
    double v131 = v3[5];	// L130, [25,27)
    double v132 = v130 * v131;	// L131, [27,31)
    double v133 = v108 + v132;	// L132, [31,36)
    double v134 = v1[((v4 * 104) + 18)];	// L133, [25,27)
    double v135 = v134 * v131;	// L134, [27,31)
    double v136 = v111 + v135;	// L135, [31,36)
    double v137 = v1[((v4 * 104) + 31)];	// L136, [25,27)
    double v138 = v137 * v131;	// L137, [27,31)
    double v139 = v114 + v138;	// L138, [31,36)
    double v140 = v1[((v4 * 104) + 44)];	// L139, [25,27)
    double v141 = v140 * v131;	// L140, [27,31)
    double v142 = v117 + v141;	// L141, [31,36)
    double v143 = v1[((v4 * 104) + 57)];	// L142, [25,27)
    double v144 = v143 * v131;	// L143, [27,31)
    double v145 = v120 + v144;	// L144, [31,36)
    double v146 = v1[((v4 * 104) + 70)];	// L145, [25,27)
    double v147 = v146 * v131;	// L146, [27,31)
    double v148 = v123 + v147;	// L147, [31,36)
    double v149 = v1[((v4 * 104) + 83)];	// L148, [25,27)
    double v150 = v149 * v131;	// L149, [27,31)
    double v151 = v126 + v150;	// L150, [31,36)
    double v152 = v1[((v4 * 104) + 96)];	// L151, [25,27)
    double v153 = v152 * v131;	// L152, [27,31)
    double v154 = v129 + v153;	// L153, [31,36)
    double v155 = v1[((v4 * 104) + 6)];	// L154, [30,32)
    double v156 = v3[6];	// L155, [30,32)
    double v157 = v155 * v156;	// L156, [32,36)
    double v158 = v133 + v157;	// L157, [36,41)
    double v159 = v1[((v4 * 104) + 19)];	// L158, [30,32)
    double v160 = v159 * v156;	// L159, [32,36)
    double v161 = v136 + v160;	// L160, [36,41)
    double v162 = v1[((v4 * 104) + 32)];	// L161, [30,32)
    double v163 = v162 * v156;	// L162, [32,36)
    double v164 = v139 + v163;	// L163, [36,41)
    double v165 = v1[((v4 * 104) + 45)];	// L164, [30,32)
    double v166 = v165 * v156;	// L165, [32,36)
    double v167 = v142 + v166;	// L166, [36,41)
    double v168 = v1[((v4 * 104) + 58)];	// L167, [30,32)
    double v169 = v168 * v156;	// L168, [32,36)
    double v170 = v145 + v169;	// L169, [36,41)
    double v171 = v1[((v4 * 104) + 71)];	// L170, [30,32)
    double v172 = v171 * v156;	// L171, [32,36)
    double v173 = v148 + v172;	// L172, [36,41)
    double v174 = v1[((v4 * 104) + 84)];	// L173, [30,32)
    double v175 = v174 * v156;	// L174, [32,36)
    double v176 = v151 + v175;	// L175, [36,41)
    double v177 = v1[((v4 * 104) + 97)];	// L176, [30,32)
    double v178 = v177 * v156;	// L177, [32,36)
    double v179 = v154 + v178;	// L178, [36,41)
    double v180 = v1[((v4 * 104) + 7)];	// L179, [35,37)
    double v181 = v3[7];	// L180, [35,37)
    double v182 = v180 * v181;	// L181, [37,41)
    double v183 = v158 + v182;	// L182, [41,46)
    double v184 = v1[((v4 * 104) + 20)];	// L183, [35,37)
    double v185 = v184 * v181;	// L184, [37,41)
    double v186 = v161 + v185;	// L185, [41,46)
    double v187 = v1[((v4 * 104) + 33)];	// L186, [35,37)
    double v188 = v187 * v181;	// L187, [37,41)
    double v189 = v164 + v188;	// L188, [41,46)
    double v190 = v1[((v4 * 104) + 46)];	// L189, [35,37)
    double v191 = v190 * v181;	// L190, [37,41)
    double v192 = v167 + v191;	// L191, [41,46)
    double v193 = v1[((v4 * 104) + 59)];	// L192, [35,37)
    double v194 = v193 * v181;	// L193, [37,41)
    double v195 = v170 + v194;	// L194, [41,46)
    double v196 = v1[((v4 * 104) + 72)];	// L195, [35,37)
    double v197 = v196 * v181;	// L196, [37,41)
    double v198 = v173 + v197;	// L197, [41,46)
    double v199 = v1[((v4 * 104) + 85)];	// L198, [35,37)
    double v200 = v199 * v181;	// L199, [37,41)
    double v201 = v176 + v200;	// L200, [41,46)
    double v202 = v1[((v4 * 104) + 98)];	// L201, [35,37)
    double v203 = v202 * v181;	// L202, [37,41)
    double v204 = v179 + v203;	// L203, [41,46)
    double v205 = v1[((v4 * 104) + 8)];	// L204, [40,42)
    double v206 = v3[8];	// L205, [40,42)
    double v207 = v205 * v206;	// L206, [42,46)
    double v208 = v183 + v207;	// L207, [46,51)
    double v209 = v1[((v4 * 104) + 21)];	// L208, [40,42)
    double v210 = v209 * v206;	// L209, [42,46)
    double v211 = v186 + v210;	// L210, [46,51)
    double v212 = v1[((v4 * 104) + 34)];	// L211, [40,42)
    double v213 = v212 * v206;	// L212, [42,46)
    double v214 = v189 + v213;	// L213, [46,51)
    double v215 = v1[((v4 * 104) + 47)];	// L214, [40,42)
    double v216 = v215 * v206;	// L215, [42,46)
    double v217 = v192 + v216;	// L216, [46,51)
    double v218 = v1[((v4 * 104) + 60)];	// L217, [40,42)
    double v219 = v218 * v206;	// L218, [42,46)
    double v220 = v195 + v219;	// L219, [46,51)
    double v221 = v1[((v4 * 104) + 73)];	// L220, [40,42)
    double v222 = v221 * v206;	// L221, [42,46)
    double v223 = v198 + v222;	// L222, [46,51)
    double v224 = v1[((v4 * 104) + 86)];	// L223, [40,42)
    double v225 = v224 * v206;	// L224, [42,46)
    double v226 = v201 + v225;	// L225, [46,51)
    double v227 = v1[((v4 * 104) + 99)];	// L226, [40,42)
    double v228 = v227 * v206;	// L227, [42,46)
    double v229 = v204 + v228;	// L228, [46,51)
    double v230 = v1[((v4 * 104) + 9)];	// L229, [45,47)
    double v231 = v3[9];	// L230, [45,47)
    double v232 = v230 * v231;	// L231, [47,51)
    double v233 = v208 + v232;	// L232, [51,56)
    double v234 = v1[((v4 * 104) + 22)];	// L233, [45,47)
    double v235 = v234 * v231;	// L234, [47,51)
    double v236 = v211 + v235;	// L235, [51,56)
    double v237 = v1[((v4 * 104) + 35)];	// L236, [45,47)
    double v238 = v237 * v231;	// L237, [47,51)
    double v239 = v214 + v238;	// L238, [51,56)
    double v240 = v1[((v4 * 104) + 48)];	// L239, [45,47)
    double v241 = v240 * v231;	// L240, [47,51)
    double v242 = v217 + v241;	// L241, [51,56)
    double v243 = v1[((v4 * 104) + 61)];	// L242, [45,47)
    double v244 = v243 * v231;	// L243, [47,51)
    double v245 = v220 + v244;	// L244, [51,56)
    double v246 = v1[((v4 * 104) + 74)];	// L245, [45,47)
    double v247 = v246 * v231;	// L246, [47,51)
    double v248 = v223 + v247;	// L247, [51,56)
    double v249 = v1[((v4 * 104) + 87)];	// L248, [45,47)
    double v250 = v249 * v231;	// L249, [47,51)
    double v251 = v226 + v250;	// L250, [51,56)
    double v252 = v1[((v4 * 104) + 100)];	// L251, [45,47)
    double v253 = v252 * v231;	// L252, [47,51)
    double v254 = v229 + v253;	// L253, [51,56)
    double v255 = v1[((v4 * 104) + 10)];	// L254, [50,52)
    double v256 = v3[10];	// L255, [50,52)
    double v257 = v255 * v256;	// L256, [52,56)
    double v258 = v233 + v257;	// L257, [56,61)
    double v259 = v1[((v4 * 104) + 23)];	// L258, [50,52)
    double v260 = v259 * v256;	// L259, [52,56)
    double v261 = v236 + v260;	// L260, [56,61)
    double v262 = v1[((v4 * 104) + 36)];	// L261, [50,52)
    double v263 = v262 * v256;	// L262, [52,56)
    double v264 = v239 + v263;	// L263, [56,61)
    double v265 = v1[((v4 * 104) + 49)];	// L264, [50,52)
    double v266 = v265 * v256;	// L265, [52,56)
    double v267 = v242 + v266;	// L266, [56,61)
    double v268 = v1[((v4 * 104) + 62)];	// L267, [50,52)
    double v269 = v268 * v256;	// L268, [52,56)
    double v270 = v245 + v269;	// L269, [56,61)
    double v271 = v1[((v4 * 104) + 75)];	// L270, [50,52)
    double v272 = v271 * v256;	// L271, [52,56)
    double v273 = v248 + v272;	// L272, [56,61)
    double v274 = v1[((v4 * 104) + 88)];	// L273, [50,52)
    double v275 = v274 * v256;	// L274, [52,56)
    double v276 = v251 + v275;	// L275, [56,61)
    double v277 = v1[((v4 * 104) + 101)];	// L276, [50,52)
    double v278 = v277 * v256;	// L277, [52,56)
    double v279 = v254 + v278;	// L278, [56,61)
    double v280 = v1[((v4 * 104) + 11)];	// L279, [55,57)
    double v281 = v3[11];	// L280, [55,57)
    double v282 = v280 * v281;	// L281, [57,61)
    double v283 = v258 + v282;	// L282, [61,66)
    double v284 = v1[((v4 * 104) + 24)];	// L283, [55,57)
    double v285 = v284 * v281;	// L284, [57,61)
    double v286 = v261 + v285;	// L285, [61,66)
    double v287 = v1[((v4 * 104) + 37)];	// L286, [55,57)
    double v288 = v287 * v281;	// L287, [57,61)
    double v289 = v264 + v288;	// L288, [61,66)
    double v290 = v1[((v4 * 104) + 50)];	// L289, [55,57)
    double v291 = v290 * v281;	// L290, [57,61)
    double v292 = v267 + v291;	// L291, [61,66)
    double v293 = v1[((v4 * 104) + 63)];	// L292, [55,57)
    double v294 = v293 * v281;	// L293, [57,61)
    double v295 = v270 + v294;	// L294, [61,66)
    double v296 = v1[((v4 * 104) + 76)];	// L295, [55,57)
    double v297 = v296 * v281;	// L296, [57,61)
    double v298 = v273 + v297;	// L297, [61,66)
    double v299 = v1[((v4 * 104) + 89)];	// L298, [55,57)
    double v300 = v299 * v281;	// L299, [57,61)
    double v301 = v276 + v300;	// L300, [61,66)
    double v302 = v1[((v4 * 104) + 102)];	// L301, [55,57)
    double v303 = v302 * v281;	// L302, [57,61)
    double v304 = v279 + v303;	// L303, [61,66)
    double v305 = v1[((v4 * 104) + 12)];	// L304, [60,62)
    double v306 = v3[12];	// L305, [60,62)
    double v307 = v305 * v306;	// L306, [62,66)
    double v308 = v283 + v307;	// L307, [66,71)
    v2[(v4 * 8)] = v308;	// L308, [71,72)
    double v309 = v1[((v4 * 104) + 25)];	// L309, [60,62)
    double v310 = v309 * v306;	// L310, [62,66)
    double v311 = v286 + v310;	// L311, [66,71)
    v2[((v4 * 8) + 1)] = v311;	// L312, [71,72)
    double v312 = v1[((v4 * 104) + 38)];	// L313, [60,62)
    double v313 = v312 * v306;	// L314, [62,66)
    double v314 = v289 + v313;	// L315, [66,71)
    v2[((v4 * 8) + 2)] = v314;	// L316, [71,72)
    double v315 = v1[((v4 * 104) + 51)];	// L317, [60,62)
    double v316 = v315 * v306;	// L318, [62,66)
    double v317 = v292 + v316;	// L319, [66,71)
    v2[((v4 * 8) + 3)] = v317;	// L320, [71,72)
    double v318 = v1[((v4 * 104) + 64)];	// L321, [60,62)
    double v319 = v318 * v306;	// L322, [62,66)
    double v320 = v295 + v319;	// L323, [66,71)
    v2[((v4 * 8) + 4)] = v320;	// L324, [71,72)
    double v321 = v1[((v4 * 104) + 77)];	// L325, [60,62)
    double v322 = v321 * v306;	// L326, [62,66)
    double v323 = v298 + v322;	// L327, [66,71)
    v2[((v4 * 8) + 5)] = v323;	// L328, [71,72)
    double v324 = v1[((v4 * 104) + 90)];	// L329, [60,62)
    double v325 = v324 * v306;	// L330, [62,66)
    double v326 = v301 + v325;	// L331, [66,71)
    v2[((v4 * 8) + 6)] = v326;	// L332, [71,72)
    double v327 = v1[((v4 * 104) + 103)];	// L333, [60,62)
    double v328 = v327 * v306;	// L334, [62,66)
    double v329 = v304 + v328;	// L335, [66,71)
    v2[((v4 * 8) + 7)] = v329;	// L336, [71,72)
  }
}

