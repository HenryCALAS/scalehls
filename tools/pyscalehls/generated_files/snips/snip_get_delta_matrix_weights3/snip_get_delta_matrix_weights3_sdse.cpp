
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=12, interval=12
/// DSP=288
void get_delta_matrix_weights3(
  double v0[192],
  double v1[3],
  double v2[64]
) {	// L5, [0,12)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v2

  #pragma HLS array_partition variable=v0 cyclic factor=96 dim=1
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=3 dim=1

  #pragma HLS array_partition variable=v2 cyclic factor=32 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  for (int v3 = 0; v3 < 2; v3 += 1) {	// L6, [0,10), iterCycle=7, II=1
    #pragma HLS pipeline II=1
    double v4 = v2[(v3 * 32)];	// L7, [0,2)
    double v5 = v1[0];	// L8, [0,2)
    double v6 = v4 * v5;	// L9, [2,6)
    v0[(v3 * 96)] = v6;	// L10, [6,7)
    double v7 = v1[1];	// L11, [0,2)
    double v8 = v4 * v7;	// L12, [2,6)
    v0[((v3 * 96) + 1)] = v8;	// L13, [6,7)
    double v9 = v1[2];	// L14, [0,2)
    double v10 = v4 * v9;	// L15, [2,6)
    v0[((v3 * 96) + 2)] = v10;	// L16, [6,7)
    double v11 = v2[((v3 * 32) + 1)];	// L17, [0,2)
    double v12 = v11 * v5;	// L18, [2,6)
    v0[((v3 * 96) + 3)] = v12;	// L19, [6,7)
    double v13 = v11 * v7;	// L20, [2,6)
    v0[((v3 * 96) + 4)] = v13;	// L21, [6,7)
    double v14 = v11 * v9;	// L22, [2,6)
    v0[((v3 * 96) + 5)] = v14;	// L23, [6,7)
    double v15 = v2[((v3 * 32) + 2)];	// L24, [0,2)
    double v16 = v15 * v5;	// L25, [2,6)
    v0[((v3 * 96) + 6)] = v16;	// L26, [6,7)
    double v17 = v15 * v7;	// L27, [2,6)
    v0[((v3 * 96) + 7)] = v17;	// L28, [6,7)
    double v18 = v15 * v9;	// L29, [2,6)
    v0[((v3 * 96) + 8)] = v18;	// L30, [6,7)
    double v19 = v2[((v3 * 32) + 3)];	// L31, [0,2)
    double v20 = v19 * v5;	// L32, [2,6)
    v0[((v3 * 96) + 9)] = v20;	// L33, [6,7)
    double v21 = v19 * v7;	// L34, [2,6)
    v0[((v3 * 96) + 10)] = v21;	// L35, [6,7)
    double v22 = v19 * v9;	// L36, [2,6)
    v0[((v3 * 96) + 11)] = v22;	// L37, [6,7)
    double v23 = v2[((v3 * 32) + 4)];	// L38, [0,2)
    double v24 = v23 * v5;	// L39, [2,6)
    v0[((v3 * 96) + 12)] = v24;	// L40, [6,7)
    double v25 = v23 * v7;	// L41, [2,6)
    v0[((v3 * 96) + 13)] = v25;	// L42, [6,7)
    double v26 = v23 * v9;	// L43, [2,6)
    v0[((v3 * 96) + 14)] = v26;	// L44, [6,7)
    double v27 = v2[((v3 * 32) + 5)];	// L45, [0,2)
    double v28 = v27 * v5;	// L46, [2,6)
    v0[((v3 * 96) + 15)] = v28;	// L47, [6,7)
    double v29 = v27 * v7;	// L48, [2,6)
    v0[((v3 * 96) + 16)] = v29;	// L49, [6,7)
    double v30 = v27 * v9;	// L50, [2,6)
    v0[((v3 * 96) + 17)] = v30;	// L51, [6,7)
    double v31 = v2[((v3 * 32) + 6)];	// L52, [0,2)
    double v32 = v31 * v5;	// L53, [2,6)
    v0[((v3 * 96) + 18)] = v32;	// L54, [6,7)
    double v33 = v31 * v7;	// L55, [2,6)
    v0[((v3 * 96) + 19)] = v33;	// L56, [6,7)
    double v34 = v31 * v9;	// L57, [2,6)
    v0[((v3 * 96) + 20)] = v34;	// L58, [6,7)
    double v35 = v2[((v3 * 32) + 7)];	// L59, [0,2)
    double v36 = v35 * v5;	// L60, [2,6)
    v0[((v3 * 96) + 21)] = v36;	// L61, [6,7)
    double v37 = v35 * v7;	// L62, [2,6)
    v0[((v3 * 96) + 22)] = v37;	// L63, [6,7)
    double v38 = v35 * v9;	// L64, [2,6)
    v0[((v3 * 96) + 23)] = v38;	// L65, [6,7)
    double v39 = v2[((v3 * 32) + 8)];	// L66, [0,2)
    double v40 = v39 * v5;	// L67, [2,6)
    v0[((v3 * 96) + 24)] = v40;	// L68, [6,7)
    double v41 = v39 * v7;	// L69, [2,6)
    v0[((v3 * 96) + 25)] = v41;	// L70, [6,7)
    double v42 = v39 * v9;	// L71, [2,6)
    v0[((v3 * 96) + 26)] = v42;	// L72, [6,7)
    double v43 = v2[((v3 * 32) + 9)];	// L73, [0,2)
    double v44 = v43 * v5;	// L74, [2,6)
    v0[((v3 * 96) + 27)] = v44;	// L75, [6,7)
    double v45 = v43 * v7;	// L76, [2,6)
    v0[((v3 * 96) + 28)] = v45;	// L77, [6,7)
    double v46 = v43 * v9;	// L78, [2,6)
    v0[((v3 * 96) + 29)] = v46;	// L79, [6,7)
    double v47 = v2[((v3 * 32) + 10)];	// L80, [0,2)
    double v48 = v47 * v5;	// L81, [2,6)
    v0[((v3 * 96) + 30)] = v48;	// L82, [6,7)
    double v49 = v47 * v7;	// L83, [2,6)
    v0[((v3 * 96) + 31)] = v49;	// L84, [6,7)
    double v50 = v47 * v9;	// L85, [2,6)
    v0[((v3 * 96) + 32)] = v50;	// L86, [6,7)
    double v51 = v2[((v3 * 32) + 11)];	// L87, [0,2)
    double v52 = v51 * v5;	// L88, [2,6)
    v0[((v3 * 96) + 33)] = v52;	// L89, [6,7)
    double v53 = v51 * v7;	// L90, [2,6)
    v0[((v3 * 96) + 34)] = v53;	// L91, [6,7)
    double v54 = v51 * v9;	// L92, [2,6)
    v0[((v3 * 96) + 35)] = v54;	// L93, [6,7)
    double v55 = v2[((v3 * 32) + 12)];	// L94, [0,2)
    double v56 = v55 * v5;	// L95, [2,6)
    v0[((v3 * 96) + 36)] = v56;	// L96, [6,7)
    double v57 = v55 * v7;	// L97, [2,6)
    v0[((v3 * 96) + 37)] = v57;	// L98, [6,7)
    double v58 = v55 * v9;	// L99, [2,6)
    v0[((v3 * 96) + 38)] = v58;	// L100, [6,7)
    double v59 = v2[((v3 * 32) + 13)];	// L101, [0,2)
    double v60 = v59 * v5;	// L102, [2,6)
    v0[((v3 * 96) + 39)] = v60;	// L103, [6,7)
    double v61 = v59 * v7;	// L104, [2,6)
    v0[((v3 * 96) + 40)] = v61;	// L105, [6,7)
    double v62 = v59 * v9;	// L106, [2,6)
    v0[((v3 * 96) + 41)] = v62;	// L107, [6,7)
    double v63 = v2[((v3 * 32) + 14)];	// L108, [0,2)
    double v64 = v63 * v5;	// L109, [2,6)
    v0[((v3 * 96) + 42)] = v64;	// L110, [6,7)
    double v65 = v63 * v7;	// L111, [2,6)
    v0[((v3 * 96) + 43)] = v65;	// L112, [6,7)
    double v66 = v63 * v9;	// L113, [2,6)
    v0[((v3 * 96) + 44)] = v66;	// L114, [6,7)
    double v67 = v2[((v3 * 32) + 15)];	// L115, [0,2)
    double v68 = v67 * v5;	// L116, [2,6)
    v0[((v3 * 96) + 45)] = v68;	// L117, [6,7)
    double v69 = v67 * v7;	// L118, [2,6)
    v0[((v3 * 96) + 46)] = v69;	// L119, [6,7)
    double v70 = v67 * v9;	// L120, [2,6)
    v0[((v3 * 96) + 47)] = v70;	// L121, [6,7)
    double v71 = v2[((v3 * 32) + 16)];	// L122, [0,2)
    double v72 = v71 * v5;	// L123, [2,6)
    v0[((v3 * 96) + 48)] = v72;	// L124, [6,7)
    double v73 = v71 * v7;	// L125, [2,6)
    v0[((v3 * 96) + 49)] = v73;	// L126, [6,7)
    double v74 = v71 * v9;	// L127, [2,6)
    v0[((v3 * 96) + 50)] = v74;	// L128, [6,7)
    double v75 = v2[((v3 * 32) + 17)];	// L129, [0,2)
    double v76 = v75 * v5;	// L130, [2,6)
    v0[((v3 * 96) + 51)] = v76;	// L131, [6,7)
    double v77 = v75 * v7;	// L132, [2,6)
    v0[((v3 * 96) + 52)] = v77;	// L133, [6,7)
    double v78 = v75 * v9;	// L134, [2,6)
    v0[((v3 * 96) + 53)] = v78;	// L135, [6,7)
    double v79 = v2[((v3 * 32) + 18)];	// L136, [0,2)
    double v80 = v79 * v5;	// L137, [2,6)
    v0[((v3 * 96) + 54)] = v80;	// L138, [6,7)
    double v81 = v79 * v7;	// L139, [2,6)
    v0[((v3 * 96) + 55)] = v81;	// L140, [6,7)
    double v82 = v79 * v9;	// L141, [2,6)
    v0[((v3 * 96) + 56)] = v82;	// L142, [6,7)
    double v83 = v2[((v3 * 32) + 19)];	// L143, [0,2)
    double v84 = v83 * v5;	// L144, [2,6)
    v0[((v3 * 96) + 57)] = v84;	// L145, [6,7)
    double v85 = v83 * v7;	// L146, [2,6)
    v0[((v3 * 96) + 58)] = v85;	// L147, [6,7)
    double v86 = v83 * v9;	// L148, [2,6)
    v0[((v3 * 96) + 59)] = v86;	// L149, [6,7)
    double v87 = v2[((v3 * 32) + 20)];	// L150, [0,2)
    double v88 = v87 * v5;	// L151, [2,6)
    v0[((v3 * 96) + 60)] = v88;	// L152, [6,7)
    double v89 = v87 * v7;	// L153, [2,6)
    v0[((v3 * 96) + 61)] = v89;	// L154, [6,7)
    double v90 = v87 * v9;	// L155, [2,6)
    v0[((v3 * 96) + 62)] = v90;	// L156, [6,7)
    double v91 = v2[((v3 * 32) + 21)];	// L157, [0,2)
    double v92 = v91 * v5;	// L158, [2,6)
    v0[((v3 * 96) + 63)] = v92;	// L159, [6,7)
    double v93 = v91 * v7;	// L160, [2,6)
    v0[((v3 * 96) + 64)] = v93;	// L161, [6,7)
    double v94 = v91 * v9;	// L162, [2,6)
    v0[((v3 * 96) + 65)] = v94;	// L163, [6,7)
    double v95 = v2[((v3 * 32) + 22)];	// L164, [0,2)
    double v96 = v95 * v5;	// L165, [2,6)
    v0[((v3 * 96) + 66)] = v96;	// L166, [6,7)
    double v97 = v95 * v7;	// L167, [2,6)
    v0[((v3 * 96) + 67)] = v97;	// L168, [6,7)
    double v98 = v95 * v9;	// L169, [2,6)
    v0[((v3 * 96) + 68)] = v98;	// L170, [6,7)
    double v99 = v2[((v3 * 32) + 23)];	// L171, [0,2)
    double v100 = v99 * v5;	// L172, [2,6)
    v0[((v3 * 96) + 69)] = v100;	// L173, [6,7)
    double v101 = v99 * v7;	// L174, [2,6)
    v0[((v3 * 96) + 70)] = v101;	// L175, [6,7)
    double v102 = v99 * v9;	// L176, [2,6)
    v0[((v3 * 96) + 71)] = v102;	// L177, [6,7)
    double v103 = v2[((v3 * 32) + 24)];	// L178, [0,2)
    double v104 = v103 * v5;	// L179, [2,6)
    v0[((v3 * 96) + 72)] = v104;	// L180, [6,7)
    double v105 = v103 * v7;	// L181, [2,6)
    v0[((v3 * 96) + 73)] = v105;	// L182, [6,7)
    double v106 = v103 * v9;	// L183, [2,6)
    v0[((v3 * 96) + 74)] = v106;	// L184, [6,7)
    double v107 = v2[((v3 * 32) + 25)];	// L185, [0,2)
    double v108 = v107 * v5;	// L186, [2,6)
    v0[((v3 * 96) + 75)] = v108;	// L187, [6,7)
    double v109 = v107 * v7;	// L188, [2,6)
    v0[((v3 * 96) + 76)] = v109;	// L189, [6,7)
    double v110 = v107 * v9;	// L190, [2,6)
    v0[((v3 * 96) + 77)] = v110;	// L191, [6,7)
    double v111 = v2[((v3 * 32) + 26)];	// L192, [0,2)
    double v112 = v111 * v5;	// L193, [2,6)
    v0[((v3 * 96) + 78)] = v112;	// L194, [6,7)
    double v113 = v111 * v7;	// L195, [2,6)
    v0[((v3 * 96) + 79)] = v113;	// L196, [6,7)
    double v114 = v111 * v9;	// L197, [2,6)
    v0[((v3 * 96) + 80)] = v114;	// L198, [6,7)
    double v115 = v2[((v3 * 32) + 27)];	// L199, [0,2)
    double v116 = v115 * v5;	// L200, [2,6)
    v0[((v3 * 96) + 81)] = v116;	// L201, [6,7)
    double v117 = v115 * v7;	// L202, [2,6)
    v0[((v3 * 96) + 82)] = v117;	// L203, [6,7)
    double v118 = v115 * v9;	// L204, [2,6)
    v0[((v3 * 96) + 83)] = v118;	// L205, [6,7)
    double v119 = v2[((v3 * 32) + 28)];	// L206, [0,2)
    double v120 = v119 * v5;	// L207, [2,6)
    v0[((v3 * 96) + 84)] = v120;	// L208, [6,7)
    double v121 = v119 * v7;	// L209, [2,6)
    v0[((v3 * 96) + 85)] = v121;	// L210, [6,7)
    double v122 = v119 * v9;	// L211, [2,6)
    v0[((v3 * 96) + 86)] = v122;	// L212, [6,7)
    double v123 = v2[((v3 * 32) + 29)];	// L213, [0,2)
    double v124 = v123 * v5;	// L214, [2,6)
    v0[((v3 * 96) + 87)] = v124;	// L215, [6,7)
    double v125 = v123 * v7;	// L216, [2,6)
    v0[((v3 * 96) + 88)] = v125;	// L217, [6,7)
    double v126 = v123 * v9;	// L218, [2,6)
    v0[((v3 * 96) + 89)] = v126;	// L219, [6,7)
    double v127 = v2[((v3 * 32) + 30)];	// L220, [0,2)
    double v128 = v127 * v5;	// L221, [2,6)
    v0[((v3 * 96) + 90)] = v128;	// L222, [6,7)
    double v129 = v127 * v7;	// L223, [2,6)
    v0[((v3 * 96) + 91)] = v129;	// L224, [6,7)
    double v130 = v127 * v9;	// L225, [2,6)
    v0[((v3 * 96) + 92)] = v130;	// L226, [6,7)
    double v131 = v2[((v3 * 32) + 31)];	// L227, [0,2)
    double v132 = v131 * v5;	// L228, [2,6)
    v0[((v3 * 96) + 93)] = v132;	// L229, [6,7)
    double v133 = v131 * v7;	// L230, [2,6)
    v0[((v3 * 96) + 94)] = v133;	// L231, [6,7)
    double v134 = v131 * v9;	// L232, [2,6)
    v0[((v3 * 96) + 95)] = v134;	// L233, [6,7)
  }
}

