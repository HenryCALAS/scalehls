
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=32, interval=32
/// DSP=288
void get_oracle_activations2(
  double v0[192],
  double v1[3],
  double v2[64],
  double v3[64]
) {	// L5, [0,32)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3

  #pragma HLS array_partition variable=v0 cyclic factor=96 dim=1
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=3 dim=1

  #pragma HLS array_partition variable=v2 cyclic factor=32 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=32 dim=1
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  for (int v4 = 0; v4 < 2; v4 += 1) {	// L7, [0,30), iterCycle=26, II=2
    #pragma HLS pipeline II=2
    double v5 = v1[0];	// L8, [0,2)
    double v6 = v0[(v4 * 96)];	// L9, [0,2)
    double v7 = v5 * v6;	// L10, [2,6)
    double v8 = v7 + 0.000000;	// L11, [6,11)
    double v9 = v3[(v4 * 32)];	// L12, [19,21)
    double v10 = v0[((v4 * 96) + 3)];	// L13, [0,2)
    double v11 = v5 * v10;	// L14, [2,6)
    double v12 = v11 + 0.000000;	// L15, [6,11)
    double v13 = v3[((v4 * 32) + 1)];	// L16, [19,21)
    double v14 = v0[((v4 * 96) + 6)];	// L17, [0,2)
    double v15 = v5 * v14;	// L18, [2,6)
    double v16 = v15 + 0.000000;	// L19, [6,11)
    double v17 = v3[((v4 * 32) + 2)];	// L20, [19,21)
    double v18 = v0[((v4 * 96) + 9)];	// L21, [0,2)
    double v19 = v5 * v18;	// L22, [2,6)
    double v20 = v19 + 0.000000;	// L23, [6,11)
    double v21 = v3[((v4 * 32) + 3)];	// L24, [19,21)
    double v22 = v0[((v4 * 96) + 12)];	// L25, [0,2)
    double v23 = v5 * v22;	// L26, [2,6)
    double v24 = v23 + 0.000000;	// L27, [6,11)
    double v25 = v3[((v4 * 32) + 4)];	// L28, [19,21)
    double v26 = v0[((v4 * 96) + 15)];	// L29, [0,2)
    double v27 = v5 * v26;	// L30, [2,6)
    double v28 = v27 + 0.000000;	// L31, [6,11)
    double v29 = v3[((v4 * 32) + 5)];	// L32, [19,21)
    double v30 = v0[((v4 * 96) + 18)];	// L33, [0,2)
    double v31 = v5 * v30;	// L34, [2,6)
    double v32 = v31 + 0.000000;	// L35, [6,11)
    double v33 = v3[((v4 * 32) + 6)];	// L36, [19,21)
    double v34 = v0[((v4 * 96) + 21)];	// L37, [0,2)
    double v35 = v5 * v34;	// L38, [2,6)
    double v36 = v35 + 0.000000;	// L39, [6,11)
    double v37 = v3[((v4 * 32) + 7)];	// L40, [19,21)
    double v38 = v0[((v4 * 96) + 24)];	// L41, [0,2)
    double v39 = v5 * v38;	// L42, [2,6)
    double v40 = v39 + 0.000000;	// L43, [6,11)
    double v41 = v3[((v4 * 32) + 8)];	// L44, [19,21)
    double v42 = v0[((v4 * 96) + 27)];	// L45, [0,2)
    double v43 = v5 * v42;	// L46, [2,6)
    double v44 = v43 + 0.000000;	// L47, [6,11)
    double v45 = v3[((v4 * 32) + 9)];	// L48, [19,21)
    double v46 = v0[((v4 * 96) + 30)];	// L49, [0,2)
    double v47 = v5 * v46;	// L50, [2,6)
    double v48 = v47 + 0.000000;	// L51, [6,11)
    double v49 = v3[((v4 * 32) + 10)];	// L52, [19,21)
    double v50 = v0[((v4 * 96) + 33)];	// L53, [0,2)
    double v51 = v5 * v50;	// L54, [2,6)
    double v52 = v51 + 0.000000;	// L55, [6,11)
    double v53 = v3[((v4 * 32) + 11)];	// L56, [19,21)
    double v54 = v0[((v4 * 96) + 36)];	// L57, [0,2)
    double v55 = v5 * v54;	// L58, [2,6)
    double v56 = v55 + 0.000000;	// L59, [6,11)
    double v57 = v3[((v4 * 32) + 12)];	// L60, [19,21)
    double v58 = v0[((v4 * 96) + 39)];	// L61, [0,2)
    double v59 = v5 * v58;	// L62, [2,6)
    double v60 = v59 + 0.000000;	// L63, [6,11)
    double v61 = v3[((v4 * 32) + 13)];	// L64, [19,21)
    double v62 = v0[((v4 * 96) + 42)];	// L65, [0,2)
    double v63 = v5 * v62;	// L66, [2,6)
    double v64 = v63 + 0.000000;	// L67, [6,11)
    double v65 = v3[((v4 * 32) + 14)];	// L68, [19,21)
    double v66 = v0[((v4 * 96) + 45)];	// L69, [0,2)
    double v67 = v5 * v66;	// L70, [2,6)
    double v68 = v67 + 0.000000;	// L71, [6,11)
    double v69 = v3[((v4 * 32) + 15)];	// L72, [19,21)
    double v70 = v0[((v4 * 96) + 48)];	// L73, [0,2)
    double v71 = v5 * v70;	// L74, [2,6)
    double v72 = v71 + 0.000000;	// L75, [6,11)
    double v73 = v3[((v4 * 32) + 16)];	// L76, [19,21)
    double v74 = v0[((v4 * 96) + 51)];	// L77, [0,2)
    double v75 = v5 * v74;	// L78, [2,6)
    double v76 = v75 + 0.000000;	// L79, [6,11)
    double v77 = v3[((v4 * 32) + 17)];	// L80, [19,21)
    double v78 = v0[((v4 * 96) + 54)];	// L81, [0,2)
    double v79 = v5 * v78;	// L82, [2,6)
    double v80 = v79 + 0.000000;	// L83, [6,11)
    double v81 = v3[((v4 * 32) + 18)];	// L84, [19,21)
    double v82 = v0[((v4 * 96) + 57)];	// L85, [0,2)
    double v83 = v5 * v82;	// L86, [2,6)
    double v84 = v83 + 0.000000;	// L87, [6,11)
    double v85 = v3[((v4 * 32) + 19)];	// L88, [19,21)
    double v86 = v0[((v4 * 96) + 60)];	// L89, [0,2)
    double v87 = v5 * v86;	// L90, [2,6)
    double v88 = v87 + 0.000000;	// L91, [6,11)
    double v89 = v3[((v4 * 32) + 20)];	// L92, [19,21)
    double v90 = v0[((v4 * 96) + 63)];	// L93, [0,2)
    double v91 = v5 * v90;	// L94, [2,6)
    double v92 = v91 + 0.000000;	// L95, [6,11)
    double v93 = v3[((v4 * 32) + 21)];	// L96, [19,21)
    double v94 = v0[((v4 * 96) + 66)];	// L97, [0,2)
    double v95 = v5 * v94;	// L98, [2,6)
    double v96 = v95 + 0.000000;	// L99, [6,11)
    double v97 = v3[((v4 * 32) + 22)];	// L100, [19,21)
    double v98 = v0[((v4 * 96) + 69)];	// L101, [0,2)
    double v99 = v5 * v98;	// L102, [2,6)
    double v100 = v99 + 0.000000;	// L103, [6,11)
    double v101 = v3[((v4 * 32) + 23)];	// L104, [19,21)
    double v102 = v0[((v4 * 96) + 72)];	// L105, [0,2)
    double v103 = v5 * v102;	// L106, [2,6)
    double v104 = v103 + 0.000000;	// L107, [6,11)
    double v105 = v3[((v4 * 32) + 24)];	// L108, [19,21)
    double v106 = v0[((v4 * 96) + 75)];	// L109, [0,2)
    double v107 = v5 * v106;	// L110, [2,6)
    double v108 = v107 + 0.000000;	// L111, [6,11)
    double v109 = v3[((v4 * 32) + 25)];	// L112, [19,21)
    double v110 = v0[((v4 * 96) + 78)];	// L113, [0,2)
    double v111 = v5 * v110;	// L114, [2,6)
    double v112 = v111 + 0.000000;	// L115, [6,11)
    double v113 = v3[((v4 * 32) + 26)];	// L116, [19,21)
    double v114 = v0[((v4 * 96) + 81)];	// L117, [0,2)
    double v115 = v5 * v114;	// L118, [2,6)
    double v116 = v115 + 0.000000;	// L119, [6,11)
    double v117 = v3[((v4 * 32) + 27)];	// L120, [19,21)
    double v118 = v0[((v4 * 96) + 84)];	// L121, [0,2)
    double v119 = v5 * v118;	// L122, [2,6)
    double v120 = v119 + 0.000000;	// L123, [6,11)
    double v121 = v3[((v4 * 32) + 28)];	// L124, [19,21)
    double v122 = v0[((v4 * 96) + 87)];	// L125, [0,2)
    double v123 = v5 * v122;	// L126, [2,6)
    double v124 = v123 + 0.000000;	// L127, [6,11)
    double v125 = v3[((v4 * 32) + 29)];	// L128, [19,21)
    double v126 = v0[((v4 * 96) + 90)];	// L129, [0,2)
    double v127 = v5 * v126;	// L130, [2,6)
    double v128 = v127 + 0.000000;	// L131, [6,11)
    double v129 = v3[((v4 * 32) + 30)];	// L132, [19,21)
    double v130 = v0[((v4 * 96) + 93)];	// L133, [0,2)
    double v131 = v5 * v130;	// L134, [2,6)
    double v132 = v131 + 0.000000;	// L135, [6,11)
    double v133 = v3[((v4 * 32) + 31)];	// L136, [19,21)
    double v134 = v1[1];	// L137, [5,7)
    double v135 = v0[((v4 * 96) + 1)];	// L138, [5,7)
    double v136 = v134 * v135;	// L139, [7,11)
    double v137 = v8 + v136;	// L140, [11,16)
    double v138 = v0[((v4 * 96) + 4)];	// L141, [5,7)
    double v139 = v134 * v138;	// L142, [7,11)
    double v140 = v12 + v139;	// L143, [11,16)
    double v141 = v0[((v4 * 96) + 7)];	// L144, [5,7)
    double v142 = v134 * v141;	// L145, [7,11)
    double v143 = v16 + v142;	// L146, [11,16)
    double v144 = v0[((v4 * 96) + 10)];	// L147, [5,7)
    double v145 = v134 * v144;	// L148, [7,11)
    double v146 = v20 + v145;	// L149, [11,16)
    double v147 = v0[((v4 * 96) + 13)];	// L150, [5,7)
    double v148 = v134 * v147;	// L151, [7,11)
    double v149 = v24 + v148;	// L152, [11,16)
    double v150 = v0[((v4 * 96) + 16)];	// L153, [5,7)
    double v151 = v134 * v150;	// L154, [7,11)
    double v152 = v28 + v151;	// L155, [11,16)
    double v153 = v0[((v4 * 96) + 19)];	// L156, [5,7)
    double v154 = v134 * v153;	// L157, [7,11)
    double v155 = v32 + v154;	// L158, [11,16)
    double v156 = v0[((v4 * 96) + 22)];	// L159, [5,7)
    double v157 = v134 * v156;	// L160, [7,11)
    double v158 = v36 + v157;	// L161, [11,16)
    double v159 = v0[((v4 * 96) + 25)];	// L162, [5,7)
    double v160 = v134 * v159;	// L163, [7,11)
    double v161 = v40 + v160;	// L164, [11,16)
    double v162 = v0[((v4 * 96) + 28)];	// L165, [5,7)
    double v163 = v134 * v162;	// L166, [7,11)
    double v164 = v44 + v163;	// L167, [11,16)
    double v165 = v0[((v4 * 96) + 31)];	// L168, [5,7)
    double v166 = v134 * v165;	// L169, [7,11)
    double v167 = v48 + v166;	// L170, [11,16)
    double v168 = v0[((v4 * 96) + 34)];	// L171, [5,7)
    double v169 = v134 * v168;	// L172, [7,11)
    double v170 = v52 + v169;	// L173, [11,16)
    double v171 = v0[((v4 * 96) + 37)];	// L174, [5,7)
    double v172 = v134 * v171;	// L175, [7,11)
    double v173 = v56 + v172;	// L176, [11,16)
    double v174 = v0[((v4 * 96) + 40)];	// L177, [5,7)
    double v175 = v134 * v174;	// L178, [7,11)
    double v176 = v60 + v175;	// L179, [11,16)
    double v177 = v0[((v4 * 96) + 43)];	// L180, [5,7)
    double v178 = v134 * v177;	// L181, [7,11)
    double v179 = v64 + v178;	// L182, [11,16)
    double v180 = v0[((v4 * 96) + 46)];	// L183, [5,7)
    double v181 = v134 * v180;	// L184, [7,11)
    double v182 = v68 + v181;	// L185, [11,16)
    double v183 = v0[((v4 * 96) + 49)];	// L186, [5,7)
    double v184 = v134 * v183;	// L187, [7,11)
    double v185 = v72 + v184;	// L188, [11,16)
    double v186 = v0[((v4 * 96) + 52)];	// L189, [5,7)
    double v187 = v134 * v186;	// L190, [7,11)
    double v188 = v76 + v187;	// L191, [11,16)
    double v189 = v0[((v4 * 96) + 55)];	// L192, [5,7)
    double v190 = v134 * v189;	// L193, [7,11)
    double v191 = v80 + v190;	// L194, [11,16)
    double v192 = v0[((v4 * 96) + 58)];	// L195, [5,7)
    double v193 = v134 * v192;	// L196, [7,11)
    double v194 = v84 + v193;	// L197, [11,16)
    double v195 = v0[((v4 * 96) + 61)];	// L198, [5,7)
    double v196 = v134 * v195;	// L199, [7,11)
    double v197 = v88 + v196;	// L200, [11,16)
    double v198 = v0[((v4 * 96) + 64)];	// L201, [5,7)
    double v199 = v134 * v198;	// L202, [7,11)
    double v200 = v92 + v199;	// L203, [11,16)
    double v201 = v0[((v4 * 96) + 67)];	// L204, [5,7)
    double v202 = v134 * v201;	// L205, [7,11)
    double v203 = v96 + v202;	// L206, [11,16)
    double v204 = v0[((v4 * 96) + 70)];	// L207, [5,7)
    double v205 = v134 * v204;	// L208, [7,11)
    double v206 = v100 + v205;	// L209, [11,16)
    double v207 = v0[((v4 * 96) + 73)];	// L210, [5,7)
    double v208 = v134 * v207;	// L211, [7,11)
    double v209 = v104 + v208;	// L212, [11,16)
    double v210 = v0[((v4 * 96) + 76)];	// L213, [5,7)
    double v211 = v134 * v210;	// L214, [7,11)
    double v212 = v108 + v211;	// L215, [11,16)
    double v213 = v0[((v4 * 96) + 79)];	// L216, [5,7)
    double v214 = v134 * v213;	// L217, [7,11)
    double v215 = v112 + v214;	// L218, [11,16)
    double v216 = v0[((v4 * 96) + 82)];	// L219, [5,7)
    double v217 = v134 * v216;	// L220, [7,11)
    double v218 = v116 + v217;	// L221, [11,16)
    double v219 = v0[((v4 * 96) + 85)];	// L222, [5,7)
    double v220 = v134 * v219;	// L223, [7,11)
    double v221 = v120 + v220;	// L224, [11,16)
    double v222 = v0[((v4 * 96) + 88)];	// L225, [5,7)
    double v223 = v134 * v222;	// L226, [7,11)
    double v224 = v124 + v223;	// L227, [11,16)
    double v225 = v0[((v4 * 96) + 91)];	// L228, [5,7)
    double v226 = v134 * v225;	// L229, [7,11)
    double v227 = v128 + v226;	// L230, [11,16)
    double v228 = v0[((v4 * 96) + 94)];	// L231, [5,7)
    double v229 = v134 * v228;	// L232, [7,11)
    double v230 = v132 + v229;	// L233, [11,16)
    double v231 = v1[2];	// L234, [10,12)
    double v232 = v0[((v4 * 96) + 2)];	// L235, [10,12)
    double v233 = v231 * v232;	// L236, [12,16)
    double v234 = v137 + v233;	// L237, [16,21)
    double v235 = v234 * v9;	// L238, [21,25)
    v2[(v4 * 32)] = v235;	// L239, [25,26)
    double v236 = v0[((v4 * 96) + 5)];	// L240, [10,12)
    double v237 = v231 * v236;	// L241, [12,16)
    double v238 = v140 + v237;	// L242, [16,21)
    double v239 = v238 * v13;	// L243, [21,25)
    v2[((v4 * 32) + 1)] = v239;	// L244, [25,26)
    double v240 = v0[((v4 * 96) + 8)];	// L245, [10,12)
    double v241 = v231 * v240;	// L246, [12,16)
    double v242 = v143 + v241;	// L247, [16,21)
    double v243 = v242 * v17;	// L248, [21,25)
    v2[((v4 * 32) + 2)] = v243;	// L249, [25,26)
    double v244 = v0[((v4 * 96) + 11)];	// L250, [10,12)
    double v245 = v231 * v244;	// L251, [12,16)
    double v246 = v146 + v245;	// L252, [16,21)
    double v247 = v246 * v21;	// L253, [21,25)
    v2[((v4 * 32) + 3)] = v247;	// L254, [25,26)
    double v248 = v0[((v4 * 96) + 14)];	// L255, [10,12)
    double v249 = v231 * v248;	// L256, [12,16)
    double v250 = v149 + v249;	// L257, [16,21)
    double v251 = v250 * v25;	// L258, [21,25)
    v2[((v4 * 32) + 4)] = v251;	// L259, [25,26)
    double v252 = v0[((v4 * 96) + 17)];	// L260, [10,12)
    double v253 = v231 * v252;	// L261, [12,16)
    double v254 = v152 + v253;	// L262, [16,21)
    double v255 = v254 * v29;	// L263, [21,25)
    v2[((v4 * 32) + 5)] = v255;	// L264, [25,26)
    double v256 = v0[((v4 * 96) + 20)];	// L265, [10,12)
    double v257 = v231 * v256;	// L266, [12,16)
    double v258 = v155 + v257;	// L267, [16,21)
    double v259 = v258 * v33;	// L268, [21,25)
    v2[((v4 * 32) + 6)] = v259;	// L269, [25,26)
    double v260 = v0[((v4 * 96) + 23)];	// L270, [10,12)
    double v261 = v231 * v260;	// L271, [12,16)
    double v262 = v158 + v261;	// L272, [16,21)
    double v263 = v262 * v37;	// L273, [21,25)
    v2[((v4 * 32) + 7)] = v263;	// L274, [25,26)
    double v264 = v0[((v4 * 96) + 26)];	// L275, [10,12)
    double v265 = v231 * v264;	// L276, [12,16)
    double v266 = v161 + v265;	// L277, [16,21)
    double v267 = v266 * v41;	// L278, [21,25)
    v2[((v4 * 32) + 8)] = v267;	// L279, [25,26)
    double v268 = v0[((v4 * 96) + 29)];	// L280, [10,12)
    double v269 = v231 * v268;	// L281, [12,16)
    double v270 = v164 + v269;	// L282, [16,21)
    double v271 = v270 * v45;	// L283, [21,25)
    v2[((v4 * 32) + 9)] = v271;	// L284, [25,26)
    double v272 = v0[((v4 * 96) + 32)];	// L285, [10,12)
    double v273 = v231 * v272;	// L286, [12,16)
    double v274 = v167 + v273;	// L287, [16,21)
    double v275 = v274 * v49;	// L288, [21,25)
    v2[((v4 * 32) + 10)] = v275;	// L289, [25,26)
    double v276 = v0[((v4 * 96) + 35)];	// L290, [10,12)
    double v277 = v231 * v276;	// L291, [12,16)
    double v278 = v170 + v277;	// L292, [16,21)
    double v279 = v278 * v53;	// L293, [21,25)
    v2[((v4 * 32) + 11)] = v279;	// L294, [25,26)
    double v280 = v0[((v4 * 96) + 38)];	// L295, [10,12)
    double v281 = v231 * v280;	// L296, [12,16)
    double v282 = v173 + v281;	// L297, [16,21)
    double v283 = v282 * v57;	// L298, [21,25)
    v2[((v4 * 32) + 12)] = v283;	// L299, [25,26)
    double v284 = v0[((v4 * 96) + 41)];	// L300, [10,12)
    double v285 = v231 * v284;	// L301, [12,16)
    double v286 = v176 + v285;	// L302, [16,21)
    double v287 = v286 * v61;	// L303, [21,25)
    v2[((v4 * 32) + 13)] = v287;	// L304, [25,26)
    double v288 = v0[((v4 * 96) + 44)];	// L305, [10,12)
    double v289 = v231 * v288;	// L306, [12,16)
    double v290 = v179 + v289;	// L307, [16,21)
    double v291 = v290 * v65;	// L308, [21,25)
    v2[((v4 * 32) + 14)] = v291;	// L309, [25,26)
    double v292 = v0[((v4 * 96) + 47)];	// L310, [10,12)
    double v293 = v231 * v292;	// L311, [12,16)
    double v294 = v182 + v293;	// L312, [16,21)
    double v295 = v294 * v69;	// L313, [21,25)
    v2[((v4 * 32) + 15)] = v295;	// L314, [25,26)
    double v296 = v0[((v4 * 96) + 50)];	// L315, [10,12)
    double v297 = v231 * v296;	// L316, [12,16)
    double v298 = v185 + v297;	// L317, [16,21)
    double v299 = v298 * v73;	// L318, [21,25)
    v2[((v4 * 32) + 16)] = v299;	// L319, [25,26)
    double v300 = v0[((v4 * 96) + 53)];	// L320, [10,12)
    double v301 = v231 * v300;	// L321, [12,16)
    double v302 = v188 + v301;	// L322, [16,21)
    double v303 = v302 * v77;	// L323, [21,25)
    v2[((v4 * 32) + 17)] = v303;	// L324, [25,26)
    double v304 = v0[((v4 * 96) + 56)];	// L325, [10,12)
    double v305 = v231 * v304;	// L326, [12,16)
    double v306 = v191 + v305;	// L327, [16,21)
    double v307 = v306 * v81;	// L328, [21,25)
    v2[((v4 * 32) + 18)] = v307;	// L329, [25,26)
    double v308 = v0[((v4 * 96) + 59)];	// L330, [10,12)
    double v309 = v231 * v308;	// L331, [12,16)
    double v310 = v194 + v309;	// L332, [16,21)
    double v311 = v310 * v85;	// L333, [21,25)
    v2[((v4 * 32) + 19)] = v311;	// L334, [25,26)
    double v312 = v0[((v4 * 96) + 62)];	// L335, [10,12)
    double v313 = v231 * v312;	// L336, [12,16)
    double v314 = v197 + v313;	// L337, [16,21)
    double v315 = v314 * v89;	// L338, [21,25)
    v2[((v4 * 32) + 20)] = v315;	// L339, [25,26)
    double v316 = v0[((v4 * 96) + 65)];	// L340, [10,12)
    double v317 = v231 * v316;	// L341, [12,16)
    double v318 = v200 + v317;	// L342, [16,21)
    double v319 = v318 * v93;	// L343, [21,25)
    v2[((v4 * 32) + 21)] = v319;	// L344, [25,26)
    double v320 = v0[((v4 * 96) + 68)];	// L345, [10,12)
    double v321 = v231 * v320;	// L346, [12,16)
    double v322 = v203 + v321;	// L347, [16,21)
    double v323 = v322 * v97;	// L348, [21,25)
    v2[((v4 * 32) + 22)] = v323;	// L349, [25,26)
    double v324 = v0[((v4 * 96) + 71)];	// L350, [10,12)
    double v325 = v231 * v324;	// L351, [12,16)
    double v326 = v206 + v325;	// L352, [16,21)
    double v327 = v326 * v101;	// L353, [21,25)
    v2[((v4 * 32) + 23)] = v327;	// L354, [25,26)
    double v328 = v0[((v4 * 96) + 74)];	// L355, [10,12)
    double v329 = v231 * v328;	// L356, [12,16)
    double v330 = v209 + v329;	// L357, [16,21)
    double v331 = v330 * v105;	// L358, [21,25)
    v2[((v4 * 32) + 24)] = v331;	// L359, [25,26)
    double v332 = v0[((v4 * 96) + 77)];	// L360, [10,12)
    double v333 = v231 * v332;	// L361, [12,16)
    double v334 = v212 + v333;	// L362, [16,21)
    double v335 = v334 * v109;	// L363, [21,25)
    v2[((v4 * 32) + 25)] = v335;	// L364, [25,26)
    double v336 = v0[((v4 * 96) + 80)];	// L365, [10,12)
    double v337 = v231 * v336;	// L366, [12,16)
    double v338 = v215 + v337;	// L367, [16,21)
    double v339 = v338 * v113;	// L368, [21,25)
    v2[((v4 * 32) + 26)] = v339;	// L369, [25,26)
    double v340 = v0[((v4 * 96) + 83)];	// L370, [10,12)
    double v341 = v231 * v340;	// L371, [12,16)
    double v342 = v218 + v341;	// L372, [16,21)
    double v343 = v342 * v117;	// L373, [21,25)
    v2[((v4 * 32) + 27)] = v343;	// L374, [25,26)
    double v344 = v0[((v4 * 96) + 86)];	// L375, [10,12)
    double v345 = v231 * v344;	// L376, [12,16)
    double v346 = v221 + v345;	// L377, [16,21)
    double v347 = v346 * v121;	// L378, [21,25)
    v2[((v4 * 32) + 28)] = v347;	// L379, [25,26)
    double v348 = v0[((v4 * 96) + 89)];	// L380, [10,12)
    double v349 = v231 * v348;	// L381, [12,16)
    double v350 = v224 + v349;	// L382, [16,21)
    double v351 = v350 * v125;	// L383, [21,25)
    v2[((v4 * 32) + 29)] = v351;	// L384, [25,26)
    double v352 = v0[((v4 * 96) + 92)];	// L385, [10,12)
    double v353 = v231 * v352;	// L386, [12,16)
    double v354 = v227 + v353;	// L387, [16,21)
    double v355 = v354 * v129;	// L388, [21,25)
    v2[((v4 * 32) + 30)] = v355;	// L389, [25,26)
    double v356 = v0[((v4 * 96) + 95)];	// L390, [10,12)
    double v357 = v231 * v356;	// L391, [12,16)
    double v358 = v230 + v357;	// L392, [16,21)
    double v359 = v358 * v133;	// L393, [21,25)
    v2[((v4 * 32) + 31)] = v359;	// L394, [25,26)
  }
}

