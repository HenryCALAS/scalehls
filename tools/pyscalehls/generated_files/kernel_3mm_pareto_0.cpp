
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=97045, interval=97045
/// DSP=455
void kernel_3mm(
  float v0[40][60],
  float v1[60][50],
  float v2[50][80],
  float v3[80][70],
  float v4[40][50],
  float v5[50][70],
  float v6[40][70]
) {	// L1, [0,97045)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3
  #pragma HLS interface bram port=v4
  #pragma HLS interface bram port=v5
  #pragma HLS interface bram port=v6

  #pragma HLS array_partition variable=v0 cyclic factor=8 dim=1
  #pragma HLS array_partition variable=v0 cyclic factor=3 dim=2
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=3 dim=1
  #pragma HLS array_partition variable=v1 cyclic factor=2 dim=2
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS array_partition variable=v2 cyclic factor=10 dim=1
  #pragma HLS array_partition variable=v2 cyclic factor=2 dim=2
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=2 dim=1
  #pragma HLS array_partition variable=v3 cyclic factor=2 dim=2
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  #pragma HLS array_partition variable=v4 cyclic factor=8 dim=1
  #pragma HLS array_partition variable=v4 cyclic factor=2 dim=2
  #pragma HLS resource variable=v4 core=ram_s2p_bram

  #pragma HLS array_partition variable=v5 cyclic factor=10 dim=1
  #pragma HLS array_partition variable=v5 cyclic factor=5 dim=2
  #pragma HLS resource variable=v5 core=ram_s2p_bram

  #pragma HLS array_partition variable=v6 cyclic factor=8 dim=1
  #pragma HLS array_partition variable=v6 cyclic factor=5 dim=2
  #pragma HLS resource variable=v6 core=ram_s2p_bram

  float v7 = 0;	// L3, [0,0)
  for (int v8 = 0; v8 < 20; v8 += 1) {	// L4, [0,2523), iterCycle=22, II=1
    for (int v9 = 0; v9 < 5; v9 += 1) {	// L5, [94520,94668), iterCycle=22, II=1
      for (int v10 = 0; v10 < 25; v10 += 1) {	// L6, [94520,94568), iterCycle=22, II=1
        #pragma HLS pipeline II=1
        float v11 = v0[(v9 * 8)][(v8 * 3)];	// L7, [0,2)
        float v12 = v1[(v8 * 3)][(v10 * 2)];	// L8, [0,2)
        float v13 = v11 * v12;	// L9, [2,6)
        float v14 = v4[(v9 * 8)][(v10 * 2)];	// L10, [4,6)
        float v15;
        if ((v8 * 3) == 0) {	// L11, [6,6)
          v15 = v7;	// L12, [6,6)
        } else {
          v15 = v14;	// L14, [6,6)
        }
        float v16 = v15 + v13;	// L16, [6,11)
        float v17 = v1[(v8 * 3)][((v10 * 2) + 1)];	// L17, [0,2)
        float v18 = v11 * v17;	// L18, [2,6)
        float v19 = v4[(v9 * 8)][((v10 * 2) + 1)];	// L19, [4,6)
        float v20;
        if ((v8 * 3) == 0) {	// L20, [6,6)
          v20 = v7;	// L21, [6,6)
        } else {
          v20 = v19;	// L23, [6,6)
        }
        float v21 = v20 + v18;	// L25, [6,11)
        float v22 = v0[((v9 * 8) + 1)][(v8 * 3)];	// L26, [0,2)
        float v23 = v22 * v12;	// L27, [2,6)
        float v24 = v4[((v9 * 8) + 1)][(v10 * 2)];	// L28, [4,6)
        float v25;
        if ((v8 * 3) == 0) {	// L29, [6,6)
          v25 = v7;	// L30, [6,6)
        } else {
          v25 = v24;	// L32, [6,6)
        }
        float v26 = v25 + v23;	// L34, [6,11)
        float v27 = v22 * v17;	// L35, [2,6)
        float v28 = v4[((v9 * 8) + 1)][((v10 * 2) + 1)];	// L36, [4,6)
        float v29;
        if ((v8 * 3) == 0) {	// L37, [6,6)
          v29 = v7;	// L38, [6,6)
        } else {
          v29 = v28;	// L40, [6,6)
        }
        float v30 = v29 + v27;	// L42, [6,11)
        float v31 = v0[((v9 * 8) + 2)][(v8 * 3)];	// L43, [0,2)
        float v32 = v31 * v12;	// L44, [2,6)
        float v33 = v4[((v9 * 8) + 2)][(v10 * 2)];	// L45, [4,6)
        float v34;
        if ((v8 * 3) == 0) {	// L46, [6,6)
          v34 = v7;	// L47, [6,6)
        } else {
          v34 = v33;	// L49, [6,6)
        }
        float v35 = v34 + v32;	// L51, [6,11)
        float v36 = v31 * v17;	// L52, [2,6)
        float v37 = v4[((v9 * 8) + 2)][((v10 * 2) + 1)];	// L53, [4,6)
        float v38;
        if ((v8 * 3) == 0) {	// L54, [6,6)
          v38 = v7;	// L55, [6,6)
        } else {
          v38 = v37;	// L57, [6,6)
        }
        float v39 = v38 + v36;	// L59, [6,11)
        float v40 = v0[((v9 * 8) + 3)][(v8 * 3)];	// L60, [0,2)
        float v41 = v40 * v12;	// L61, [2,6)
        float v42 = v4[((v9 * 8) + 3)][(v10 * 2)];	// L62, [4,6)
        float v43;
        if ((v8 * 3) == 0) {	// L63, [6,6)
          v43 = v7;	// L64, [6,6)
        } else {
          v43 = v42;	// L66, [6,6)
        }
        float v44 = v43 + v41;	// L68, [6,11)
        float v45 = v40 * v17;	// L69, [2,6)
        float v46 = v4[((v9 * 8) + 3)][((v10 * 2) + 1)];	// L70, [4,6)
        float v47;
        if ((v8 * 3) == 0) {	// L71, [6,6)
          v47 = v7;	// L72, [6,6)
        } else {
          v47 = v46;	// L74, [6,6)
        }
        float v48 = v47 + v45;	// L76, [6,11)
        float v49 = v0[((v9 * 8) + 4)][(v8 * 3)];	// L77, [0,2)
        float v50 = v49 * v12;	// L78, [2,6)
        float v51 = v4[((v9 * 8) + 4)][(v10 * 2)];	// L79, [4,6)
        float v52;
        if ((v8 * 3) == 0) {	// L80, [6,6)
          v52 = v7;	// L81, [6,6)
        } else {
          v52 = v51;	// L83, [6,6)
        }
        float v53 = v52 + v50;	// L85, [6,11)
        float v54 = v49 * v17;	// L86, [2,6)
        float v55 = v4[((v9 * 8) + 4)][((v10 * 2) + 1)];	// L87, [4,6)
        float v56;
        if ((v8 * 3) == 0) {	// L88, [6,6)
          v56 = v7;	// L89, [6,6)
        } else {
          v56 = v55;	// L91, [6,6)
        }
        float v57 = v56 + v54;	// L93, [6,11)
        float v58 = v0[((v9 * 8) + 5)][(v8 * 3)];	// L94, [0,2)
        float v59 = v58 * v12;	// L95, [2,6)
        float v60 = v4[((v9 * 8) + 5)][(v10 * 2)];	// L96, [4,6)
        float v61;
        if ((v8 * 3) == 0) {	// L97, [6,6)
          v61 = v7;	// L98, [6,6)
        } else {
          v61 = v60;	// L100, [6,6)
        }
        float v62 = v61 + v59;	// L102, [6,11)
        float v63 = v58 * v17;	// L103, [2,6)
        float v64 = v4[((v9 * 8) + 5)][((v10 * 2) + 1)];	// L104, [4,6)
        float v65;
        if ((v8 * 3) == 0) {	// L105, [6,6)
          v65 = v7;	// L106, [6,6)
        } else {
          v65 = v64;	// L108, [6,6)
        }
        float v66 = v65 + v63;	// L110, [6,11)
        float v67 = v0[((v9 * 8) + 6)][(v8 * 3)];	// L111, [0,2)
        float v68 = v67 * v12;	// L112, [2,6)
        float v69 = v4[((v9 * 8) + 6)][(v10 * 2)];	// L113, [4,6)
        float v70;
        if ((v8 * 3) == 0) {	// L114, [6,6)
          v70 = v7;	// L115, [6,6)
        } else {
          v70 = v69;	// L117, [6,6)
        }
        float v71 = v70 + v68;	// L119, [6,11)
        float v72 = v67 * v17;	// L120, [2,6)
        float v73 = v4[((v9 * 8) + 6)][((v10 * 2) + 1)];	// L121, [4,6)
        float v74;
        if ((v8 * 3) == 0) {	// L122, [6,6)
          v74 = v7;	// L123, [6,6)
        } else {
          v74 = v73;	// L125, [6,6)
        }
        float v75 = v74 + v72;	// L127, [6,11)
        float v76 = v0[((v9 * 8) + 7)][(v8 * 3)];	// L128, [0,2)
        float v77 = v76 * v12;	// L129, [2,6)
        float v78 = v4[((v9 * 8) + 7)][(v10 * 2)];	// L130, [4,6)
        float v79;
        if ((v8 * 3) == 0) {	// L131, [6,6)
          v79 = v7;	// L132, [6,6)
        } else {
          v79 = v78;	// L134, [6,6)
        }
        float v80 = v79 + v77;	// L136, [6,11)
        float v81 = v76 * v17;	// L137, [2,6)
        float v82 = v4[((v9 * 8) + 7)][((v10 * 2) + 1)];	// L138, [4,6)
        float v83;
        if ((v8 * 3) == 0) {	// L139, [6,6)
          v83 = v7;	// L140, [6,6)
        } else {
          v83 = v82;	// L142, [6,6)
        }
        float v84 = v83 + v81;	// L144, [6,11)
        float v85 = v0[(v9 * 8)][((v8 * 3) + 1)];	// L145, [5,7)
        float v86 = v1[((v8 * 3) + 1)][(v10 * 2)];	// L146, [5,7)
        float v87 = v85 * v86;	// L147, [7,11)
        float v88 = v16 + v87;	// L148, [11,16)
        float v89 = v1[((v8 * 3) + 1)][((v10 * 2) + 1)];	// L149, [5,7)
        float v90 = v85 * v89;	// L150, [7,11)
        float v91 = v21 + v90;	// L151, [11,16)
        float v92 = v0[((v9 * 8) + 1)][((v8 * 3) + 1)];	// L152, [5,7)
        float v93 = v92 * v86;	// L153, [7,11)
        float v94 = v26 + v93;	// L154, [11,16)
        float v95 = v92 * v89;	// L155, [7,11)
        float v96 = v30 + v95;	// L156, [11,16)
        float v97 = v0[((v9 * 8) + 2)][((v8 * 3) + 1)];	// L157, [5,7)
        float v98 = v97 * v86;	// L158, [7,11)
        float v99 = v35 + v98;	// L159, [11,16)
        float v100 = v97 * v89;	// L160, [7,11)
        float v101 = v39 + v100;	// L161, [11,16)
        float v102 = v0[((v9 * 8) + 3)][((v8 * 3) + 1)];	// L162, [5,7)
        float v103 = v102 * v86;	// L163, [7,11)
        float v104 = v44 + v103;	// L164, [11,16)
        float v105 = v102 * v89;	// L165, [7,11)
        float v106 = v48 + v105;	// L166, [11,16)
        float v107 = v0[((v9 * 8) + 4)][((v8 * 3) + 1)];	// L167, [5,7)
        float v108 = v107 * v86;	// L168, [7,11)
        float v109 = v53 + v108;	// L169, [11,16)
        float v110 = v107 * v89;	// L170, [7,11)
        float v111 = v57 + v110;	// L171, [11,16)
        float v112 = v0[((v9 * 8) + 5)][((v8 * 3) + 1)];	// L172, [5,7)
        float v113 = v112 * v86;	// L173, [7,11)
        float v114 = v62 + v113;	// L174, [11,16)
        float v115 = v112 * v89;	// L175, [7,11)
        float v116 = v66 + v115;	// L176, [11,16)
        float v117 = v0[((v9 * 8) + 6)][((v8 * 3) + 1)];	// L177, [5,7)
        float v118 = v117 * v86;	// L178, [7,11)
        float v119 = v71 + v118;	// L179, [11,16)
        float v120 = v117 * v89;	// L180, [7,11)
        float v121 = v75 + v120;	// L181, [11,16)
        float v122 = v0[((v9 * 8) + 7)][((v8 * 3) + 1)];	// L182, [5,7)
        float v123 = v122 * v86;	// L183, [7,11)
        float v124 = v80 + v123;	// L184, [11,16)
        float v125 = v122 * v89;	// L185, [7,11)
        float v126 = v84 + v125;	// L186, [11,16)
        float v127 = v0[(v9 * 8)][((v8 * 3) + 2)];	// L187, [10,12)
        float v128 = v1[((v8 * 3) + 2)][(v10 * 2)];	// L188, [10,12)
        float v129 = v127 * v128;	// L189, [12,16)
        float v130 = v88 + v129;	// L190, [16,21)
        v4[(v9 * 8)][(v10 * 2)] = v130;	// L191, [21,22)
        float v131 = v1[((v8 * 3) + 2)][((v10 * 2) + 1)];	// L192, [10,12)
        float v132 = v127 * v131;	// L193, [12,16)
        float v133 = v91 + v132;	// L194, [16,21)
        v4[(v9 * 8)][((v10 * 2) + 1)] = v133;	// L195, [21,22)
        float v134 = v0[((v9 * 8) + 1)][((v8 * 3) + 2)];	// L196, [10,12)
        float v135 = v134 * v128;	// L197, [12,16)
        float v136 = v94 + v135;	// L198, [16,21)
        v4[((v9 * 8) + 1)][(v10 * 2)] = v136;	// L199, [21,22)
        float v137 = v134 * v131;	// L200, [12,16)
        float v138 = v96 + v137;	// L201, [16,21)
        v4[((v9 * 8) + 1)][((v10 * 2) + 1)] = v138;	// L202, [21,22)
        float v139 = v0[((v9 * 8) + 2)][((v8 * 3) + 2)];	// L203, [10,12)
        float v140 = v139 * v128;	// L204, [12,16)
        float v141 = v99 + v140;	// L205, [16,21)
        v4[((v9 * 8) + 2)][(v10 * 2)] = v141;	// L206, [21,22)
        float v142 = v139 * v131;	// L207, [12,16)
        float v143 = v101 + v142;	// L208, [16,21)
        v4[((v9 * 8) + 2)][((v10 * 2) + 1)] = v143;	// L209, [21,22)
        float v144 = v0[((v9 * 8) + 3)][((v8 * 3) + 2)];	// L210, [10,12)
        float v145 = v144 * v128;	// L211, [12,16)
        float v146 = v104 + v145;	// L212, [16,21)
        v4[((v9 * 8) + 3)][(v10 * 2)] = v146;	// L213, [21,22)
        float v147 = v144 * v131;	// L214, [12,16)
        float v148 = v106 + v147;	// L215, [16,21)
        v4[((v9 * 8) + 3)][((v10 * 2) + 1)] = v148;	// L216, [21,22)
        float v149 = v0[((v9 * 8) + 4)][((v8 * 3) + 2)];	// L217, [10,12)
        float v150 = v149 * v128;	// L218, [12,16)
        float v151 = v109 + v150;	// L219, [16,21)
        v4[((v9 * 8) + 4)][(v10 * 2)] = v151;	// L220, [21,22)
        float v152 = v149 * v131;	// L221, [12,16)
        float v153 = v111 + v152;	// L222, [16,21)
        v4[((v9 * 8) + 4)][((v10 * 2) + 1)] = v153;	// L223, [21,22)
        float v154 = v0[((v9 * 8) + 5)][((v8 * 3) + 2)];	// L224, [10,12)
        float v155 = v154 * v128;	// L225, [12,16)
        float v156 = v114 + v155;	// L226, [16,21)
        v4[((v9 * 8) + 5)][(v10 * 2)] = v156;	// L227, [21,22)
        float v157 = v154 * v131;	// L228, [12,16)
        float v158 = v116 + v157;	// L229, [16,21)
        v4[((v9 * 8) + 5)][((v10 * 2) + 1)] = v158;	// L230, [21,22)
        float v159 = v0[((v9 * 8) + 6)][((v8 * 3) + 2)];	// L231, [10,12)
        float v160 = v159 * v128;	// L232, [12,16)
        float v161 = v119 + v160;	// L233, [16,21)
        v4[((v9 * 8) + 6)][(v10 * 2)] = v161;	// L234, [21,22)
        float v162 = v159 * v131;	// L235, [12,16)
        float v163 = v121 + v162;	// L236, [16,21)
        v4[((v9 * 8) + 6)][((v10 * 2) + 1)] = v163;	// L237, [21,22)
        float v164 = v0[((v9 * 8) + 7)][((v8 * 3) + 2)];	// L238, [10,12)
        float v165 = v164 * v128;	// L239, [12,16)
        float v166 = v124 + v165;	// L240, [16,21)
        v4[((v9 * 8) + 7)][(v10 * 2)] = v166;	// L241, [21,22)
        float v167 = v164 * v131;	// L242, [12,16)
        float v168 = v126 + v167;	// L243, [16,21)
        v4[((v9 * 8) + 7)][((v10 * 2) + 1)] = v168;	// L244, [21,22)
      }
    }
  }
  for (int v169 = 0; v169 < 40; v169 += 1) {	// L248, [2523,93530), iterCycle=18, II=13
    for (int v170 = 0; v170 < 5; v170 += 1) {	// L249, [3513,5795), iterCycle=18, II=13
      for (int v171 = 0; v171 < 35; v171 += 1) {	// L250, [3513,3975), iterCycle=18, II=13
        #pragma HLS pipeline II=1
        float v172 = v2[(v170 * 10)][(v169 * 2)];	// L251, [0,2)
        float v173 = v3[(v169 * 2)][(v171 * 2)];	// L252, [0,2)
        float v174 = v172 * v173;	// L253, [2,6)
        float v175 = v5[(v170 * 10)][(v171 * 2)];	// L254, [4,6)
        float v176;
        if ((v169 * 2) == 0) {	// L255, [6,6)
          v176 = v7;	// L256, [6,6)
        } else {
          v176 = v175;	// L258, [6,6)
        }
        float v177 = v176 + v174;	// L260, [6,11)
        float v178 = v3[(v169 * 2)][((v171 * 2) + 1)];	// L261, [1,3)
        float v179 = v172 * v178;	// L262, [3,7)
        float v180 = v5[(v170 * 10)][((v171 * 2) + 1)];	// L263, [5,7)
        float v181;
        if ((v169 * 2) == 0) {	// L264, [7,7)
          v181 = v7;	// L265, [7,7)
        } else {
          v181 = v180;	// L267, [7,7)
        }
        float v182 = v181 + v179;	// L269, [7,12)
        float v183 = v2[((v170 * 10) + 1)][(v169 * 2)];	// L270, [0,2)
        float v184 = v183 * v173;	// L271, [2,6)
        float v185 = v5[((v170 * 10) + 1)][(v171 * 2)];	// L272, [4,6)
        float v186;
        if ((v169 * 2) == 0) {	// L273, [6,6)
          v186 = v7;	// L274, [6,6)
        } else {
          v186 = v185;	// L276, [6,6)
        }
        float v187 = v186 + v184;	// L278, [6,11)
        float v188 = v183 * v178;	// L279, [3,7)
        float v189 = v5[((v170 * 10) + 1)][((v171 * 2) + 1)];	// L280, [5,7)
        float v190;
        if ((v169 * 2) == 0) {	// L281, [7,7)
          v190 = v7;	// L282, [7,7)
        } else {
          v190 = v189;	// L284, [7,7)
        }
        float v191 = v190 + v188;	// L286, [7,12)
        float v192 = v2[((v170 * 10) + 2)][(v169 * 2)];	// L287, [0,2)
        float v193 = v192 * v173;	// L288, [2,6)
        float v194 = v5[((v170 * 10) + 2)][(v171 * 2)];	// L289, [4,6)
        float v195;
        if ((v169 * 2) == 0) {	// L290, [6,6)
          v195 = v7;	// L291, [6,6)
        } else {
          v195 = v194;	// L293, [6,6)
        }
        float v196 = v195 + v193;	// L295, [6,11)
        float v197 = v192 * v178;	// L296, [3,7)
        float v198 = v5[((v170 * 10) + 2)][((v171 * 2) + 1)];	// L297, [5,7)
        float v199;
        if ((v169 * 2) == 0) {	// L298, [7,7)
          v199 = v7;	// L299, [7,7)
        } else {
          v199 = v198;	// L301, [7,7)
        }
        float v200 = v199 + v197;	// L303, [7,12)
        float v201 = v2[((v170 * 10) + 3)][(v169 * 2)];	// L304, [0,2)
        float v202 = v201 * v173;	// L305, [2,6)
        float v203 = v5[((v170 * 10) + 3)][(v171 * 2)];	// L306, [4,6)
        float v204;
        if ((v169 * 2) == 0) {	// L307, [6,6)
          v204 = v7;	// L308, [6,6)
        } else {
          v204 = v203;	// L310, [6,6)
        }
        float v205 = v204 + v202;	// L312, [6,11)
        float v206 = v201 * v178;	// L313, [3,7)
        float v207 = v5[((v170 * 10) + 3)][((v171 * 2) + 1)];	// L314, [5,7)
        float v208;
        if ((v169 * 2) == 0) {	// L315, [7,7)
          v208 = v7;	// L316, [7,7)
        } else {
          v208 = v207;	// L318, [7,7)
        }
        float v209 = v208 + v206;	// L320, [7,12)
        float v210 = v2[((v170 * 10) + 4)][(v169 * 2)];	// L321, [0,2)
        float v211 = v210 * v173;	// L322, [2,6)
        float v212 = v5[((v170 * 10) + 4)][(v171 * 2)];	// L323, [4,6)
        float v213;
        if ((v169 * 2) == 0) {	// L324, [6,6)
          v213 = v7;	// L325, [6,6)
        } else {
          v213 = v212;	// L327, [6,6)
        }
        float v214 = v213 + v211;	// L329, [6,11)
        float v215 = v210 * v178;	// L330, [3,7)
        float v216 = v5[((v170 * 10) + 4)][((v171 * 2) + 1)];	// L331, [5,7)
        float v217;
        if ((v169 * 2) == 0) {	// L332, [7,7)
          v217 = v7;	// L333, [7,7)
        } else {
          v217 = v216;	// L335, [7,7)
        }
        float v218 = v217 + v215;	// L337, [7,12)
        float v219 = v2[((v170 * 10) + 5)][(v169 * 2)];	// L338, [0,2)
        float v220 = v219 * v173;	// L339, [2,6)
        float v221 = v5[((v170 * 10) + 5)][(v171 * 2)];	// L340, [4,6)
        float v222;
        if ((v169 * 2) == 0) {	// L341, [6,6)
          v222 = v7;	// L342, [6,6)
        } else {
          v222 = v221;	// L344, [6,6)
        }
        float v223 = v222 + v220;	// L346, [6,11)
        float v224 = v219 * v178;	// L347, [3,7)
        float v225 = v5[((v170 * 10) + 5)][((v171 * 2) + 1)];	// L348, [5,7)
        float v226;
        if ((v169 * 2) == 0) {	// L349, [7,7)
          v226 = v7;	// L350, [7,7)
        } else {
          v226 = v225;	// L352, [7,7)
        }
        float v227 = v226 + v224;	// L354, [7,12)
        float v228 = v2[((v170 * 10) + 6)][(v169 * 2)];	// L355, [0,2)
        float v229 = v228 * v173;	// L356, [2,6)
        float v230 = v5[((v170 * 10) + 6)][(v171 * 2)];	// L357, [4,6)
        float v231;
        if ((v169 * 2) == 0) {	// L358, [6,6)
          v231 = v7;	// L359, [6,6)
        } else {
          v231 = v230;	// L361, [6,6)
        }
        float v232 = v231 + v229;	// L363, [6,11)
        float v233 = v228 * v178;	// L364, [3,7)
        float v234 = v5[((v170 * 10) + 6)][((v171 * 2) + 1)];	// L365, [5,7)
        float v235;
        if ((v169 * 2) == 0) {	// L366, [7,7)
          v235 = v7;	// L367, [7,7)
        } else {
          v235 = v234;	// L369, [7,7)
        }
        float v236 = v235 + v233;	// L371, [7,12)
        float v237 = v2[((v170 * 10) + 7)][(v169 * 2)];	// L372, [0,2)
        float v238 = v237 * v173;	// L373, [2,6)
        float v239 = v5[((v170 * 10) + 7)][(v171 * 2)];	// L374, [4,6)
        float v240;
        if ((v169 * 2) == 0) {	// L375, [6,6)
          v240 = v7;	// L376, [6,6)
        } else {
          v240 = v239;	// L378, [6,6)
        }
        float v241 = v240 + v238;	// L380, [6,11)
        float v242 = v237 * v178;	// L381, [3,7)
        float v243 = v5[((v170 * 10) + 7)][((v171 * 2) + 1)];	// L382, [5,7)
        float v244;
        if ((v169 * 2) == 0) {	// L383, [7,7)
          v244 = v7;	// L384, [7,7)
        } else {
          v244 = v243;	// L386, [7,7)
        }
        float v245 = v244 + v242;	// L388, [7,12)
        float v246 = v2[((v170 * 10) + 8)][(v169 * 2)];	// L389, [0,2)
        float v247 = v246 * v173;	// L390, [2,6)
        float v248 = v5[((v170 * 10) + 8)][(v171 * 2)];	// L391, [4,6)
        float v249;
        if ((v169 * 2) == 0) {	// L392, [6,6)
          v249 = v7;	// L393, [6,6)
        } else {
          v249 = v248;	// L395, [6,6)
        }
        float v250 = v249 + v247;	// L397, [6,11)
        float v251 = v246 * v178;	// L398, [3,7)
        float v252 = v5[((v170 * 10) + 8)][((v171 * 2) + 1)];	// L399, [5,7)
        float v253;
        if ((v169 * 2) == 0) {	// L400, [7,7)
          v253 = v7;	// L401, [7,7)
        } else {
          v253 = v252;	// L403, [7,7)
        }
        float v254 = v253 + v251;	// L405, [7,12)
        float v255 = v2[((v170 * 10) + 9)][(v169 * 2)];	// L406, [0,2)
        float v256 = v255 * v173;	// L407, [2,6)
        float v257 = v5[((v170 * 10) + 9)][(v171 * 2)];	// L408, [4,6)
        float v258;
        if ((v169 * 2) == 0) {	// L409, [6,6)
          v258 = v7;	// L410, [6,6)
        } else {
          v258 = v257;	// L412, [6,6)
        }
        float v259 = v258 + v256;	// L414, [6,11)
        float v260 = v255 * v178;	// L415, [3,7)
        float v261 = v5[((v170 * 10) + 9)][((v171 * 2) + 1)];	// L416, [5,7)
        float v262;
        if ((v169 * 2) == 0) {	// L417, [7,7)
          v262 = v7;	// L418, [7,7)
        } else {
          v262 = v261;	// L420, [7,7)
        }
        float v263 = v262 + v260;	// L422, [7,12)
        float v264 = v2[(v170 * 10)][((v169 * 2) + 1)];	// L423, [5,7)
        float v265 = v3[((v169 * 2) + 1)][(v171 * 2)];	// L424, [5,7)
        float v266 = v264 * v265;	// L425, [7,11)
        float v267 = v177 + v266;	// L426, [11,16)
        v5[(v170 * 10)][(v171 * 2)] = v267;	// L427, [16,17)
        float v268 = v3[((v169 * 2) + 1)][((v171 * 2) + 1)];	// L428, [6,8)
        float v269 = v264 * v268;	// L429, [8,12)
        float v270 = v182 + v269;	// L430, [12,17)
        v5[(v170 * 10)][((v171 * 2) + 1)] = v270;	// L431, [17,18)
        float v271 = v2[((v170 * 10) + 1)][((v169 * 2) + 1)];	// L432, [5,7)
        float v272 = v271 * v265;	// L433, [7,11)
        float v273 = v187 + v272;	// L434, [11,16)
        v5[((v170 * 10) + 1)][(v171 * 2)] = v273;	// L435, [16,17)
        float v274 = v271 * v268;	// L436, [8,12)
        float v275 = v191 + v274;	// L437, [12,17)
        v5[((v170 * 10) + 1)][((v171 * 2) + 1)] = v275;	// L438, [17,18)
        float v276 = v2[((v170 * 10) + 2)][((v169 * 2) + 1)];	// L439, [5,7)
        float v277 = v276 * v265;	// L440, [7,11)
        float v278 = v196 + v277;	// L441, [11,16)
        v5[((v170 * 10) + 2)][(v171 * 2)] = v278;	// L442, [16,17)
        float v279 = v276 * v268;	// L443, [8,12)
        float v280 = v200 + v279;	// L444, [12,17)
        v5[((v170 * 10) + 2)][((v171 * 2) + 1)] = v280;	// L445, [17,18)
        float v281 = v2[((v170 * 10) + 3)][((v169 * 2) + 1)];	// L446, [5,7)
        float v282 = v281 * v265;	// L447, [7,11)
        float v283 = v205 + v282;	// L448, [11,16)
        v5[((v170 * 10) + 3)][(v171 * 2)] = v283;	// L449, [16,17)
        float v284 = v281 * v268;	// L450, [8,12)
        float v285 = v209 + v284;	// L451, [12,17)
        v5[((v170 * 10) + 3)][((v171 * 2) + 1)] = v285;	// L452, [17,18)
        float v286 = v2[((v170 * 10) + 4)][((v169 * 2) + 1)];	// L453, [5,7)
        float v287 = v286 * v265;	// L454, [7,11)
        float v288 = v214 + v287;	// L455, [11,16)
        v5[((v170 * 10) + 4)][(v171 * 2)] = v288;	// L456, [16,17)
        float v289 = v286 * v268;	// L457, [8,12)
        float v290 = v218 + v289;	// L458, [12,17)
        v5[((v170 * 10) + 4)][((v171 * 2) + 1)] = v290;	// L459, [17,18)
        float v291 = v2[((v170 * 10) + 5)][((v169 * 2) + 1)];	// L460, [5,7)
        float v292 = v291 * v265;	// L461, [7,11)
        float v293 = v223 + v292;	// L462, [11,16)
        v5[((v170 * 10) + 5)][(v171 * 2)] = v293;	// L463, [16,17)
        float v294 = v291 * v268;	// L464, [8,12)
        float v295 = v227 + v294;	// L465, [12,17)
        v5[((v170 * 10) + 5)][((v171 * 2) + 1)] = v295;	// L466, [17,18)
        float v296 = v2[((v170 * 10) + 6)][((v169 * 2) + 1)];	// L467, [5,7)
        float v297 = v296 * v265;	// L468, [7,11)
        float v298 = v232 + v297;	// L469, [11,16)
        v5[((v170 * 10) + 6)][(v171 * 2)] = v298;	// L470, [16,17)
        float v299 = v296 * v268;	// L471, [8,12)
        float v300 = v236 + v299;	// L472, [12,17)
        v5[((v170 * 10) + 6)][((v171 * 2) + 1)] = v300;	// L473, [17,18)
        float v301 = v2[((v170 * 10) + 7)][((v169 * 2) + 1)];	// L474, [5,7)
        float v302 = v301 * v265;	// L475, [7,11)
        float v303 = v241 + v302;	// L476, [11,16)
        v5[((v170 * 10) + 7)][(v171 * 2)] = v303;	// L477, [16,17)
        float v304 = v301 * v268;	// L478, [8,12)
        float v305 = v245 + v304;	// L479, [12,17)
        v5[((v170 * 10) + 7)][((v171 * 2) + 1)] = v305;	// L480, [17,18)
        float v306 = v2[((v170 * 10) + 8)][((v169 * 2) + 1)];	// L481, [5,7)
        float v307 = v306 * v265;	// L482, [7,11)
        float v308 = v250 + v307;	// L483, [11,16)
        v5[((v170 * 10) + 8)][(v171 * 2)] = v308;	// L484, [16,17)
        float v309 = v306 * v268;	// L485, [8,12)
        float v310 = v254 + v309;	// L486, [12,17)
        v5[((v170 * 10) + 8)][((v171 * 2) + 1)] = v310;	// L487, [17,18)
        float v311 = v2[((v170 * 10) + 9)][((v169 * 2) + 1)];	// L488, [5,7)
        float v312 = v311 * v265;	// L489, [7,11)
        float v313 = v259 + v312;	// L490, [11,16)
        v5[((v170 * 10) + 9)][(v171 * 2)] = v313;	// L491, [16,17)
        float v314 = v311 * v268;	// L492, [8,12)
        float v315 = v263 + v314;	// L493, [12,17)
        v5[((v170 * 10) + 9)][((v171 * 2) + 1)] = v315;	// L494, [17,18)
      }
    }
  }
  for (int v316 = 0; v316 < 50; v316 += 1) {	// L498, [93530,97043), iterCycle=12, II=1
    for (int v317 = 0; v317 < 5; v317 += 1) {	// L499, [0,83), iterCycle=12, II=1
      for (int v318 = 0; v318 < 14; v318 += 1) {	// L500, [0,27), iterCycle=12, II=1
        #pragma HLS pipeline II=1
        float v319 = v4[(v317 * 8)][v316];	// L501, [0,2)
        float v320 = v5[v316][(v318 * 5)];	// L502, [0,2)
        float v321 = v319 * v320;	// L503, [2,6)
        float v322 = v6[(v317 * 8)][(v318 * 5)];	// L504, [4,6)
        float v323;
        if (v316 == 0) {	// L505, [6,6)
          v323 = v7;	// L506, [6,6)
        } else {
          v323 = v322;	// L508, [6,6)
        }
        float v324 = v323 + v321;	// L510, [6,11)
        v6[(v317 * 8)][(v318 * 5)] = v324;	// L511, [11,12)
        float v325 = v5[v316][((v318 * 5) + 1)];	// L512, [0,2)
        float v326 = v319 * v325;	// L513, [2,6)
        float v327 = v6[(v317 * 8)][((v318 * 5) + 1)];	// L514, [4,6)
        float v328;
        if (v316 == 0) {	// L515, [6,6)
          v328 = v7;	// L516, [6,6)
        } else {
          v328 = v327;	// L518, [6,6)
        }
        float v329 = v328 + v326;	// L520, [6,11)
        v6[(v317 * 8)][((v318 * 5) + 1)] = v329;	// L521, [11,12)
        float v330 = v5[v316][((v318 * 5) + 2)];	// L522, [0,2)
        float v331 = v319 * v330;	// L523, [2,6)
        float v332 = v6[(v317 * 8)][((v318 * 5) + 2)];	// L524, [4,6)
        float v333;
        if (v316 == 0) {	// L525, [6,6)
          v333 = v7;	// L526, [6,6)
        } else {
          v333 = v332;	// L528, [6,6)
        }
        float v334 = v333 + v331;	// L530, [6,11)
        v6[(v317 * 8)][((v318 * 5) + 2)] = v334;	// L531, [11,12)
        float v335 = v5[v316][((v318 * 5) + 3)];	// L532, [0,2)
        float v336 = v319 * v335;	// L533, [2,6)
        float v337 = v6[(v317 * 8)][((v318 * 5) + 3)];	// L534, [4,6)
        float v338;
        if (v316 == 0) {	// L535, [6,6)
          v338 = v7;	// L536, [6,6)
        } else {
          v338 = v337;	// L538, [6,6)
        }
        float v339 = v338 + v336;	// L540, [6,11)
        v6[(v317 * 8)][((v318 * 5) + 3)] = v339;	// L541, [11,12)
        float v340 = v5[v316][((v318 * 5) + 4)];	// L542, [0,2)
        float v341 = v319 * v340;	// L543, [2,6)
        float v342 = v6[(v317 * 8)][((v318 * 5) + 4)];	// L544, [4,6)
        float v343;
        if (v316 == 0) {	// L545, [6,6)
          v343 = v7;	// L546, [6,6)
        } else {
          v343 = v342;	// L548, [6,6)
        }
        float v344 = v343 + v341;	// L550, [6,11)
        v6[(v317 * 8)][((v318 * 5) + 4)] = v344;	// L551, [11,12)
        float v345 = v4[((v317 * 8) + 1)][v316];	// L552, [0,2)
        float v346 = v345 * v320;	// L553, [2,6)
        float v347 = v6[((v317 * 8) + 1)][(v318 * 5)];	// L554, [4,6)
        float v348;
        if (v316 == 0) {	// L555, [6,6)
          v348 = v7;	// L556, [6,6)
        } else {
          v348 = v347;	// L558, [6,6)
        }
        float v349 = v348 + v346;	// L560, [6,11)
        v6[((v317 * 8) + 1)][(v318 * 5)] = v349;	// L561, [11,12)
        float v350 = v345 * v325;	// L562, [2,6)
        float v351 = v6[((v317 * 8) + 1)][((v318 * 5) + 1)];	// L563, [4,6)
        float v352;
        if (v316 == 0) {	// L564, [6,6)
          v352 = v7;	// L565, [6,6)
        } else {
          v352 = v351;	// L567, [6,6)
        }
        float v353 = v352 + v350;	// L569, [6,11)
        v6[((v317 * 8) + 1)][((v318 * 5) + 1)] = v353;	// L570, [11,12)
        float v354 = v345 * v330;	// L571, [2,6)
        float v355 = v6[((v317 * 8) + 1)][((v318 * 5) + 2)];	// L572, [4,6)
        float v356;
        if (v316 == 0) {	// L573, [6,6)
          v356 = v7;	// L574, [6,6)
        } else {
          v356 = v355;	// L576, [6,6)
        }
        float v357 = v356 + v354;	// L578, [6,11)
        v6[((v317 * 8) + 1)][((v318 * 5) + 2)] = v357;	// L579, [11,12)
        float v358 = v345 * v335;	// L580, [2,6)
        float v359 = v6[((v317 * 8) + 1)][((v318 * 5) + 3)];	// L581, [4,6)
        float v360;
        if (v316 == 0) {	// L582, [6,6)
          v360 = v7;	// L583, [6,6)
        } else {
          v360 = v359;	// L585, [6,6)
        }
        float v361 = v360 + v358;	// L587, [6,11)
        v6[((v317 * 8) + 1)][((v318 * 5) + 3)] = v361;	// L588, [11,12)
        float v362 = v345 * v340;	// L589, [2,6)
        float v363 = v6[((v317 * 8) + 1)][((v318 * 5) + 4)];	// L590, [4,6)
        float v364;
        if (v316 == 0) {	// L591, [6,6)
          v364 = v7;	// L592, [6,6)
        } else {
          v364 = v363;	// L594, [6,6)
        }
        float v365 = v364 + v362;	// L596, [6,11)
        v6[((v317 * 8) + 1)][((v318 * 5) + 4)] = v365;	// L597, [11,12)
        float v366 = v4[((v317 * 8) + 2)][v316];	// L598, [0,2)
        float v367 = v366 * v320;	// L599, [2,6)
        float v368 = v6[((v317 * 8) + 2)][(v318 * 5)];	// L600, [4,6)
        float v369;
        if (v316 == 0) {	// L601, [6,6)
          v369 = v7;	// L602, [6,6)
        } else {
          v369 = v368;	// L604, [6,6)
        }
        float v370 = v369 + v367;	// L606, [6,11)
        v6[((v317 * 8) + 2)][(v318 * 5)] = v370;	// L607, [11,12)
        float v371 = v366 * v325;	// L608, [2,6)
        float v372 = v6[((v317 * 8) + 2)][((v318 * 5) + 1)];	// L609, [4,6)
        float v373;
        if (v316 == 0) {	// L610, [6,6)
          v373 = v7;	// L611, [6,6)
        } else {
          v373 = v372;	// L613, [6,6)
        }
        float v374 = v373 + v371;	// L615, [6,11)
        v6[((v317 * 8) + 2)][((v318 * 5) + 1)] = v374;	// L616, [11,12)
        float v375 = v366 * v330;	// L617, [2,6)
        float v376 = v6[((v317 * 8) + 2)][((v318 * 5) + 2)];	// L618, [4,6)
        float v377;
        if (v316 == 0) {	// L619, [6,6)
          v377 = v7;	// L620, [6,6)
        } else {
          v377 = v376;	// L622, [6,6)
        }
        float v378 = v377 + v375;	// L624, [6,11)
        v6[((v317 * 8) + 2)][((v318 * 5) + 2)] = v378;	// L625, [11,12)
        float v379 = v366 * v335;	// L626, [2,6)
        float v380 = v6[((v317 * 8) + 2)][((v318 * 5) + 3)];	// L627, [4,6)
        float v381;
        if (v316 == 0) {	// L628, [6,6)
          v381 = v7;	// L629, [6,6)
        } else {
          v381 = v380;	// L631, [6,6)
        }
        float v382 = v381 + v379;	// L633, [6,11)
        v6[((v317 * 8) + 2)][((v318 * 5) + 3)] = v382;	// L634, [11,12)
        float v383 = v366 * v340;	// L635, [2,6)
        float v384 = v6[((v317 * 8) + 2)][((v318 * 5) + 4)];	// L636, [4,6)
        float v385;
        if (v316 == 0) {	// L637, [6,6)
          v385 = v7;	// L638, [6,6)
        } else {
          v385 = v384;	// L640, [6,6)
        }
        float v386 = v385 + v383;	// L642, [6,11)
        v6[((v317 * 8) + 2)][((v318 * 5) + 4)] = v386;	// L643, [11,12)
        float v387 = v4[((v317 * 8) + 3)][v316];	// L644, [0,2)
        float v388 = v387 * v320;	// L645, [2,6)
        float v389 = v6[((v317 * 8) + 3)][(v318 * 5)];	// L646, [4,6)
        float v390;
        if (v316 == 0) {	// L647, [6,6)
          v390 = v7;	// L648, [6,6)
        } else {
          v390 = v389;	// L650, [6,6)
        }
        float v391 = v390 + v388;	// L652, [6,11)
        v6[((v317 * 8) + 3)][(v318 * 5)] = v391;	// L653, [11,12)
        float v392 = v387 * v325;	// L654, [2,6)
        float v393 = v6[((v317 * 8) + 3)][((v318 * 5) + 1)];	// L655, [4,6)
        float v394;
        if (v316 == 0) {	// L656, [6,6)
          v394 = v7;	// L657, [6,6)
        } else {
          v394 = v393;	// L659, [6,6)
        }
        float v395 = v394 + v392;	// L661, [6,11)
        v6[((v317 * 8) + 3)][((v318 * 5) + 1)] = v395;	// L662, [11,12)
        float v396 = v387 * v330;	// L663, [2,6)
        float v397 = v6[((v317 * 8) + 3)][((v318 * 5) + 2)];	// L664, [4,6)
        float v398;
        if (v316 == 0) {	// L665, [6,6)
          v398 = v7;	// L666, [6,6)
        } else {
          v398 = v397;	// L668, [6,6)
        }
        float v399 = v398 + v396;	// L670, [6,11)
        v6[((v317 * 8) + 3)][((v318 * 5) + 2)] = v399;	// L671, [11,12)
        float v400 = v387 * v335;	// L672, [2,6)
        float v401 = v6[((v317 * 8) + 3)][((v318 * 5) + 3)];	// L673, [4,6)
        float v402;
        if (v316 == 0) {	// L674, [6,6)
          v402 = v7;	// L675, [6,6)
        } else {
          v402 = v401;	// L677, [6,6)
        }
        float v403 = v402 + v400;	// L679, [6,11)
        v6[((v317 * 8) + 3)][((v318 * 5) + 3)] = v403;	// L680, [11,12)
        float v404 = v387 * v340;	// L681, [2,6)
        float v405 = v6[((v317 * 8) + 3)][((v318 * 5) + 4)];	// L682, [4,6)
        float v406;
        if (v316 == 0) {	// L683, [6,6)
          v406 = v7;	// L684, [6,6)
        } else {
          v406 = v405;	// L686, [6,6)
        }
        float v407 = v406 + v404;	// L688, [6,11)
        v6[((v317 * 8) + 3)][((v318 * 5) + 4)] = v407;	// L689, [11,12)
        float v408 = v4[((v317 * 8) + 4)][v316];	// L690, [0,2)
        float v409 = v408 * v320;	// L691, [2,6)
        float v410 = v6[((v317 * 8) + 4)][(v318 * 5)];	// L692, [4,6)
        float v411;
        if (v316 == 0) {	// L693, [6,6)
          v411 = v7;	// L694, [6,6)
        } else {
          v411 = v410;	// L696, [6,6)
        }
        float v412 = v411 + v409;	// L698, [6,11)
        v6[((v317 * 8) + 4)][(v318 * 5)] = v412;	// L699, [11,12)
        float v413 = v408 * v325;	// L700, [2,6)
        float v414 = v6[((v317 * 8) + 4)][((v318 * 5) + 1)];	// L701, [4,6)
        float v415;
        if (v316 == 0) {	// L702, [6,6)
          v415 = v7;	// L703, [6,6)
        } else {
          v415 = v414;	// L705, [6,6)
        }
        float v416 = v415 + v413;	// L707, [6,11)
        v6[((v317 * 8) + 4)][((v318 * 5) + 1)] = v416;	// L708, [11,12)
        float v417 = v408 * v330;	// L709, [2,6)
        float v418 = v6[((v317 * 8) + 4)][((v318 * 5) + 2)];	// L710, [4,6)
        float v419;
        if (v316 == 0) {	// L711, [6,6)
          v419 = v7;	// L712, [6,6)
        } else {
          v419 = v418;	// L714, [6,6)
        }
        float v420 = v419 + v417;	// L716, [6,11)
        v6[((v317 * 8) + 4)][((v318 * 5) + 2)] = v420;	// L717, [11,12)
        float v421 = v408 * v335;	// L718, [2,6)
        float v422 = v6[((v317 * 8) + 4)][((v318 * 5) + 3)];	// L719, [4,6)
        float v423;
        if (v316 == 0) {	// L720, [6,6)
          v423 = v7;	// L721, [6,6)
        } else {
          v423 = v422;	// L723, [6,6)
        }
        float v424 = v423 + v421;	// L725, [6,11)
        v6[((v317 * 8) + 4)][((v318 * 5) + 3)] = v424;	// L726, [11,12)
        float v425 = v408 * v340;	// L727, [2,6)
        float v426 = v6[((v317 * 8) + 4)][((v318 * 5) + 4)];	// L728, [4,6)
        float v427;
        if (v316 == 0) {	// L729, [6,6)
          v427 = v7;	// L730, [6,6)
        } else {
          v427 = v426;	// L732, [6,6)
        }
        float v428 = v427 + v425;	// L734, [6,11)
        v6[((v317 * 8) + 4)][((v318 * 5) + 4)] = v428;	// L735, [11,12)
        float v429 = v4[((v317 * 8) + 5)][v316];	// L736, [0,2)
        float v430 = v429 * v320;	// L737, [2,6)
        float v431 = v6[((v317 * 8) + 5)][(v318 * 5)];	// L738, [4,6)
        float v432;
        if (v316 == 0) {	// L739, [6,6)
          v432 = v7;	// L740, [6,6)
        } else {
          v432 = v431;	// L742, [6,6)
        }
        float v433 = v432 + v430;	// L744, [6,11)
        v6[((v317 * 8) + 5)][(v318 * 5)] = v433;	// L745, [11,12)
        float v434 = v429 * v325;	// L746, [2,6)
        float v435 = v6[((v317 * 8) + 5)][((v318 * 5) + 1)];	// L747, [4,6)
        float v436;
        if (v316 == 0) {	// L748, [6,6)
          v436 = v7;	// L749, [6,6)
        } else {
          v436 = v435;	// L751, [6,6)
        }
        float v437 = v436 + v434;	// L753, [6,11)
        v6[((v317 * 8) + 5)][((v318 * 5) + 1)] = v437;	// L754, [11,12)
        float v438 = v429 * v330;	// L755, [2,6)
        float v439 = v6[((v317 * 8) + 5)][((v318 * 5) + 2)];	// L756, [4,6)
        float v440;
        if (v316 == 0) {	// L757, [6,6)
          v440 = v7;	// L758, [6,6)
        } else {
          v440 = v439;	// L760, [6,6)
        }
        float v441 = v440 + v438;	// L762, [6,11)
        v6[((v317 * 8) + 5)][((v318 * 5) + 2)] = v441;	// L763, [11,12)
        float v442 = v429 * v335;	// L764, [2,6)
        float v443 = v6[((v317 * 8) + 5)][((v318 * 5) + 3)];	// L765, [4,6)
        float v444;
        if (v316 == 0) {	// L766, [6,6)
          v444 = v7;	// L767, [6,6)
        } else {
          v444 = v443;	// L769, [6,6)
        }
        float v445 = v444 + v442;	// L771, [6,11)
        v6[((v317 * 8) + 5)][((v318 * 5) + 3)] = v445;	// L772, [11,12)
        float v446 = v429 * v340;	// L773, [2,6)
        float v447 = v6[((v317 * 8) + 5)][((v318 * 5) + 4)];	// L774, [4,6)
        float v448;
        if (v316 == 0) {	// L775, [6,6)
          v448 = v7;	// L776, [6,6)
        } else {
          v448 = v447;	// L778, [6,6)
        }
        float v449 = v448 + v446;	// L780, [6,11)
        v6[((v317 * 8) + 5)][((v318 * 5) + 4)] = v449;	// L781, [11,12)
        float v450 = v4[((v317 * 8) + 6)][v316];	// L782, [0,2)
        float v451 = v450 * v320;	// L783, [2,6)
        float v452 = v6[((v317 * 8) + 6)][(v318 * 5)];	// L784, [4,6)
        float v453;
        if (v316 == 0) {	// L785, [6,6)
          v453 = v7;	// L786, [6,6)
        } else {
          v453 = v452;	// L788, [6,6)
        }
        float v454 = v453 + v451;	// L790, [6,11)
        v6[((v317 * 8) + 6)][(v318 * 5)] = v454;	// L791, [11,12)
        float v455 = v450 * v325;	// L792, [2,6)
        float v456 = v6[((v317 * 8) + 6)][((v318 * 5) + 1)];	// L793, [4,6)
        float v457;
        if (v316 == 0) {	// L794, [6,6)
          v457 = v7;	// L795, [6,6)
        } else {
          v457 = v456;	// L797, [6,6)
        }
        float v458 = v457 + v455;	// L799, [6,11)
        v6[((v317 * 8) + 6)][((v318 * 5) + 1)] = v458;	// L800, [11,12)
        float v459 = v450 * v330;	// L801, [2,6)
        float v460 = v6[((v317 * 8) + 6)][((v318 * 5) + 2)];	// L802, [4,6)
        float v461;
        if (v316 == 0) {	// L803, [6,6)
          v461 = v7;	// L804, [6,6)
        } else {
          v461 = v460;	// L806, [6,6)
        }
        float v462 = v461 + v459;	// L808, [6,11)
        v6[((v317 * 8) + 6)][((v318 * 5) + 2)] = v462;	// L809, [11,12)
        float v463 = v450 * v335;	// L810, [2,6)
        float v464 = v6[((v317 * 8) + 6)][((v318 * 5) + 3)];	// L811, [4,6)
        float v465;
        if (v316 == 0) {	// L812, [6,6)
          v465 = v7;	// L813, [6,6)
        } else {
          v465 = v464;	// L815, [6,6)
        }
        float v466 = v465 + v463;	// L817, [6,11)
        v6[((v317 * 8) + 6)][((v318 * 5) + 3)] = v466;	// L818, [11,12)
        float v467 = v450 * v340;	// L819, [2,6)
        float v468 = v6[((v317 * 8) + 6)][((v318 * 5) + 4)];	// L820, [4,6)
        float v469;
        if (v316 == 0) {	// L821, [6,6)
          v469 = v7;	// L822, [6,6)
        } else {
          v469 = v468;	// L824, [6,6)
        }
        float v470 = v469 + v467;	// L826, [6,11)
        v6[((v317 * 8) + 6)][((v318 * 5) + 4)] = v470;	// L827, [11,12)
        float v471 = v4[((v317 * 8) + 7)][v316];	// L828, [0,2)
        float v472 = v471 * v320;	// L829, [2,6)
        float v473 = v6[((v317 * 8) + 7)][(v318 * 5)];	// L830, [4,6)
        float v474;
        if (v316 == 0) {	// L831, [6,6)
          v474 = v7;	// L832, [6,6)
        } else {
          v474 = v473;	// L834, [6,6)
        }
        float v475 = v474 + v472;	// L836, [6,11)
        v6[((v317 * 8) + 7)][(v318 * 5)] = v475;	// L837, [11,12)
        float v476 = v471 * v325;	// L838, [2,6)
        float v477 = v6[((v317 * 8) + 7)][((v318 * 5) + 1)];	// L839, [4,6)
        float v478;
        if (v316 == 0) {	// L840, [6,6)
          v478 = v7;	// L841, [6,6)
        } else {
          v478 = v477;	// L843, [6,6)
        }
        float v479 = v478 + v476;	// L845, [6,11)
        v6[((v317 * 8) + 7)][((v318 * 5) + 1)] = v479;	// L846, [11,12)
        float v480 = v471 * v330;	// L847, [2,6)
        float v481 = v6[((v317 * 8) + 7)][((v318 * 5) + 2)];	// L848, [4,6)
        float v482;
        if (v316 == 0) {	// L849, [6,6)
          v482 = v7;	// L850, [6,6)
        } else {
          v482 = v481;	// L852, [6,6)
        }
        float v483 = v482 + v480;	// L854, [6,11)
        v6[((v317 * 8) + 7)][((v318 * 5) + 2)] = v483;	// L855, [11,12)
        float v484 = v471 * v335;	// L856, [2,6)
        float v485 = v6[((v317 * 8) + 7)][((v318 * 5) + 3)];	// L857, [4,6)
        float v486;
        if (v316 == 0) {	// L858, [6,6)
          v486 = v7;	// L859, [6,6)
        } else {
          v486 = v485;	// L861, [6,6)
        }
        float v487 = v486 + v484;	// L863, [6,11)
        v6[((v317 * 8) + 7)][((v318 * 5) + 3)] = v487;	// L864, [11,12)
        float v488 = v471 * v340;	// L865, [2,6)
        float v489 = v6[((v317 * 8) + 7)][((v318 * 5) + 4)];	// L866, [4,6)
        float v490;
        if (v316 == 0) {	// L867, [6,6)
          v490 = v7;	// L868, [6,6)
        } else {
          v490 = v489;	// L870, [6,6)
        }
        float v491 = v490 + v488;	// L872, [6,11)
        v6[((v317 * 8) + 7)][((v318 * 5) + 4)] = v491;	// L873, [11,12)
      }
    }
  }
}

