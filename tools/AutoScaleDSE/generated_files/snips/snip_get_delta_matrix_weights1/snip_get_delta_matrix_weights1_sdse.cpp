
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=23, interval=23
/// DSP=192
void get_delta_matrix_weights1(
  double v0[832],
  double v1[64],
  double v2[13]
) {	// L4, [0,23)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v2

  #pragma HLS array_partition variable=v0 cyclic factor=64 dim=1
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=64 dim=1

  #pragma HLS resource variable=v2 core=ram_s2p_bram

  for (int v3 = 0; v3 < 13; v3 += 1) {	// L5, [0,21), iterCycle=7, II=1
    #pragma HLS pipeline II=1
    double v4 = v2[v3];	// L6, [0,2)
    double v5 = v1[0];	// L7, [0,2)
    double v6 = v4 * v5;	// L8, [2,6)
    v0[(v3 * 64)] = v6;	// L9, [6,7)
    double v7 = v1[1];	// L10, [0,2)
    double v8 = v4 * v7;	// L11, [2,6)
    v0[((v3 * 64) + 1)] = v8;	// L12, [6,7)
    double v9 = v1[2];	// L13, [0,2)
    double v10 = v4 * v9;	// L14, [2,6)
    v0[((v3 * 64) + 2)] = v10;	// L15, [6,7)
    double v11 = v1[3];	// L16, [0,2)
    double v12 = v4 * v11;	// L17, [2,6)
    v0[((v3 * 64) + 3)] = v12;	// L18, [6,7)
    double v13 = v1[4];	// L19, [0,2)
    double v14 = v4 * v13;	// L20, [2,6)
    v0[((v3 * 64) + 4)] = v14;	// L21, [6,7)
    double v15 = v1[5];	// L22, [0,2)
    double v16 = v4 * v15;	// L23, [2,6)
    v0[((v3 * 64) + 5)] = v16;	// L24, [6,7)
    double v17 = v1[6];	// L25, [0,2)
    double v18 = v4 * v17;	// L26, [2,6)
    v0[((v3 * 64) + 6)] = v18;	// L27, [6,7)
    double v19 = v1[7];	// L28, [0,2)
    double v20 = v4 * v19;	// L29, [2,6)
    v0[((v3 * 64) + 7)] = v20;	// L30, [6,7)
    double v21 = v1[8];	// L31, [0,2)
    double v22 = v4 * v21;	// L32, [2,6)
    v0[((v3 * 64) + 8)] = v22;	// L33, [6,7)
    double v23 = v1[9];	// L34, [0,2)
    double v24 = v4 * v23;	// L35, [2,6)
    v0[((v3 * 64) + 9)] = v24;	// L36, [6,7)
    double v25 = v1[10];	// L37, [0,2)
    double v26 = v4 * v25;	// L38, [2,6)
    v0[((v3 * 64) + 10)] = v26;	// L39, [6,7)
    double v27 = v1[11];	// L40, [0,2)
    double v28 = v4 * v27;	// L41, [2,6)
    v0[((v3 * 64) + 11)] = v28;	// L42, [6,7)
    double v29 = v1[12];	// L43, [0,2)
    double v30 = v4 * v29;	// L44, [2,6)
    v0[((v3 * 64) + 12)] = v30;	// L45, [6,7)
    double v31 = v1[13];	// L46, [0,2)
    double v32 = v4 * v31;	// L47, [2,6)
    v0[((v3 * 64) + 13)] = v32;	// L48, [6,7)
    double v33 = v1[14];	// L49, [0,2)
    double v34 = v4 * v33;	// L50, [2,6)
    v0[((v3 * 64) + 14)] = v34;	// L51, [6,7)
    double v35 = v1[15];	// L52, [0,2)
    double v36 = v4 * v35;	// L53, [2,6)
    v0[((v3 * 64) + 15)] = v36;	// L54, [6,7)
    double v37 = v1[16];	// L55, [0,2)
    double v38 = v4 * v37;	// L56, [2,6)
    v0[((v3 * 64) + 16)] = v38;	// L57, [6,7)
    double v39 = v1[17];	// L58, [0,2)
    double v40 = v4 * v39;	// L59, [2,6)
    v0[((v3 * 64) + 17)] = v40;	// L60, [6,7)
    double v41 = v1[18];	// L61, [0,2)
    double v42 = v4 * v41;	// L62, [2,6)
    v0[((v3 * 64) + 18)] = v42;	// L63, [6,7)
    double v43 = v1[19];	// L64, [0,2)
    double v44 = v4 * v43;	// L65, [2,6)
    v0[((v3 * 64) + 19)] = v44;	// L66, [6,7)
    double v45 = v1[20];	// L67, [0,2)
    double v46 = v4 * v45;	// L68, [2,6)
    v0[((v3 * 64) + 20)] = v46;	// L69, [6,7)
    double v47 = v1[21];	// L70, [0,2)
    double v48 = v4 * v47;	// L71, [2,6)
    v0[((v3 * 64) + 21)] = v48;	// L72, [6,7)
    double v49 = v1[22];	// L73, [0,2)
    double v50 = v4 * v49;	// L74, [2,6)
    v0[((v3 * 64) + 22)] = v50;	// L75, [6,7)
    double v51 = v1[23];	// L76, [0,2)
    double v52 = v4 * v51;	// L77, [2,6)
    v0[((v3 * 64) + 23)] = v52;	// L78, [6,7)
    double v53 = v1[24];	// L79, [0,2)
    double v54 = v4 * v53;	// L80, [2,6)
    v0[((v3 * 64) + 24)] = v54;	// L81, [6,7)
    double v55 = v1[25];	// L82, [0,2)
    double v56 = v4 * v55;	// L83, [2,6)
    v0[((v3 * 64) + 25)] = v56;	// L84, [6,7)
    double v57 = v1[26];	// L85, [0,2)
    double v58 = v4 * v57;	// L86, [2,6)
    v0[((v3 * 64) + 26)] = v58;	// L87, [6,7)
    double v59 = v1[27];	// L88, [0,2)
    double v60 = v4 * v59;	// L89, [2,6)
    v0[((v3 * 64) + 27)] = v60;	// L90, [6,7)
    double v61 = v1[28];	// L91, [0,2)
    double v62 = v4 * v61;	// L92, [2,6)
    v0[((v3 * 64) + 28)] = v62;	// L93, [6,7)
    double v63 = v1[29];	// L94, [0,2)
    double v64 = v4 * v63;	// L95, [2,6)
    v0[((v3 * 64) + 29)] = v64;	// L96, [6,7)
    double v65 = v1[30];	// L97, [0,2)
    double v66 = v4 * v65;	// L98, [2,6)
    v0[((v3 * 64) + 30)] = v66;	// L99, [6,7)
    double v67 = v1[31];	// L100, [0,2)
    double v68 = v4 * v67;	// L101, [2,6)
    v0[((v3 * 64) + 31)] = v68;	// L102, [6,7)
    double v69 = v1[32];	// L103, [0,2)
    double v70 = v4 * v69;	// L104, [2,6)
    v0[((v3 * 64) + 32)] = v70;	// L105, [6,7)
    double v71 = v1[33];	// L106, [0,2)
    double v72 = v4 * v71;	// L107, [2,6)
    v0[((v3 * 64) + 33)] = v72;	// L108, [6,7)
    double v73 = v1[34];	// L109, [0,2)
    double v74 = v4 * v73;	// L110, [2,6)
    v0[((v3 * 64) + 34)] = v74;	// L111, [6,7)
    double v75 = v1[35];	// L112, [0,2)
    double v76 = v4 * v75;	// L113, [2,6)
    v0[((v3 * 64) + 35)] = v76;	// L114, [6,7)
    double v77 = v1[36];	// L115, [0,2)
    double v78 = v4 * v77;	// L116, [2,6)
    v0[((v3 * 64) + 36)] = v78;	// L117, [6,7)
    double v79 = v1[37];	// L118, [0,2)
    double v80 = v4 * v79;	// L119, [2,6)
    v0[((v3 * 64) + 37)] = v80;	// L120, [6,7)
    double v81 = v1[38];	// L121, [0,2)
    double v82 = v4 * v81;	// L122, [2,6)
    v0[((v3 * 64) + 38)] = v82;	// L123, [6,7)
    double v83 = v1[39];	// L124, [0,2)
    double v84 = v4 * v83;	// L125, [2,6)
    v0[((v3 * 64) + 39)] = v84;	// L126, [6,7)
    double v85 = v1[40];	// L127, [0,2)
    double v86 = v4 * v85;	// L128, [2,6)
    v0[((v3 * 64) + 40)] = v86;	// L129, [6,7)
    double v87 = v1[41];	// L130, [0,2)
    double v88 = v4 * v87;	// L131, [2,6)
    v0[((v3 * 64) + 41)] = v88;	// L132, [6,7)
    double v89 = v1[42];	// L133, [0,2)
    double v90 = v4 * v89;	// L134, [2,6)
    v0[((v3 * 64) + 42)] = v90;	// L135, [6,7)
    double v91 = v1[43];	// L136, [0,2)
    double v92 = v4 * v91;	// L137, [2,6)
    v0[((v3 * 64) + 43)] = v92;	// L138, [6,7)
    double v93 = v1[44];	// L139, [0,2)
    double v94 = v4 * v93;	// L140, [2,6)
    v0[((v3 * 64) + 44)] = v94;	// L141, [6,7)
    double v95 = v1[45];	// L142, [0,2)
    double v96 = v4 * v95;	// L143, [2,6)
    v0[((v3 * 64) + 45)] = v96;	// L144, [6,7)
    double v97 = v1[46];	// L145, [0,2)
    double v98 = v4 * v97;	// L146, [2,6)
    v0[((v3 * 64) + 46)] = v98;	// L147, [6,7)
    double v99 = v1[47];	// L148, [0,2)
    double v100 = v4 * v99;	// L149, [2,6)
    v0[((v3 * 64) + 47)] = v100;	// L150, [6,7)
    double v101 = v1[48];	// L151, [0,2)
    double v102 = v4 * v101;	// L152, [2,6)
    v0[((v3 * 64) + 48)] = v102;	// L153, [6,7)
    double v103 = v1[49];	// L154, [0,2)
    double v104 = v4 * v103;	// L155, [2,6)
    v0[((v3 * 64) + 49)] = v104;	// L156, [6,7)
    double v105 = v1[50];	// L157, [0,2)
    double v106 = v4 * v105;	// L158, [2,6)
    v0[((v3 * 64) + 50)] = v106;	// L159, [6,7)
    double v107 = v1[51];	// L160, [0,2)
    double v108 = v4 * v107;	// L161, [2,6)
    v0[((v3 * 64) + 51)] = v108;	// L162, [6,7)
    double v109 = v1[52];	// L163, [0,2)
    double v110 = v4 * v109;	// L164, [2,6)
    v0[((v3 * 64) + 52)] = v110;	// L165, [6,7)
    double v111 = v1[53];	// L166, [0,2)
    double v112 = v4 * v111;	// L167, [2,6)
    v0[((v3 * 64) + 53)] = v112;	// L168, [6,7)
    double v113 = v1[54];	// L169, [0,2)
    double v114 = v4 * v113;	// L170, [2,6)
    v0[((v3 * 64) + 54)] = v114;	// L171, [6,7)
    double v115 = v1[55];	// L172, [0,2)
    double v116 = v4 * v115;	// L173, [2,6)
    v0[((v3 * 64) + 55)] = v116;	// L174, [6,7)
    double v117 = v1[56];	// L175, [0,2)
    double v118 = v4 * v117;	// L176, [2,6)
    v0[((v3 * 64) + 56)] = v118;	// L177, [6,7)
    double v119 = v1[57];	// L178, [0,2)
    double v120 = v4 * v119;	// L179, [2,6)
    v0[((v3 * 64) + 57)] = v120;	// L180, [6,7)
    double v121 = v1[58];	// L181, [0,2)
    double v122 = v4 * v121;	// L182, [2,6)
    v0[((v3 * 64) + 58)] = v122;	// L183, [6,7)
    double v123 = v1[59];	// L184, [0,2)
    double v124 = v4 * v123;	// L185, [2,6)
    v0[((v3 * 64) + 59)] = v124;	// L186, [6,7)
    double v125 = v1[60];	// L187, [0,2)
    double v126 = v4 * v125;	// L188, [2,6)
    v0[((v3 * 64) + 60)] = v126;	// L189, [6,7)
    double v127 = v1[61];	// L190, [0,2)
    double v128 = v4 * v127;	// L191, [2,6)
    v0[((v3 * 64) + 61)] = v128;	// L192, [6,7)
    double v129 = v1[62];	// L193, [0,2)
    double v130 = v4 * v129;	// L194, [2,6)
    v0[((v3 * 64) + 62)] = v130;	// L195, [6,7)
    double v131 = v1[63];	// L196, [0,2)
    double v132 = v4 * v131;	// L197, [2,6)
    v0[((v3 * 64) + 63)] = v132;	// L198, [6,7)
  }
}

