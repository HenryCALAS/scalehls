
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=397, interval=397
/// DSP=323
void get_oracle_activations1(
  double v0[4096],
  double v1[64],
  double v2[64],
  double v3[64]
) {	// L5, [0,397)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v2
  #pragma HLS interface bram port=v3

  #pragma HLS array_partition variable=v0 cyclic factor=128 dim=1
  #pragma HLS resource variable=v0 core=ram_s2p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=64 dim=1

  #pragma HLS array_partition variable=v2 cyclic factor=2 dim=1
  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=2 dim=1
  #pragma HLS resource variable=v3 core=ram_s2p_bram

  for (int v4 = 0; v4 < 32; v4 += 1) {	// L7, [0,395), iterCycle=331, II=2
    #pragma HLS pipeline II=2
    double v5 = v1[0];	// L8, [0,2)
    double v6 = v0[(v4 * 128)];	// L9, [0,2)
    double v7 = v5 * v6;	// L10, [2,6)
    double v8 = v7 + 0.000000;	// L11, [6,11)
    double v9 = v3[(v4 * 2)];	// L12, [324,326)
    double v10 = v0[((v4 * 128) + 64)];	// L13, [0,2)
    double v11 = v5 * v10;	// L14, [2,6)
    double v12 = v11 + 0.000000;	// L15, [6,11)
    double v13 = v3[((v4 * 2) + 1)];	// L16, [324,326)
    double v14 = v1[1];	// L17, [5,7)
    double v15 = v0[((v4 * 128) + 1)];	// L18, [5,7)
    double v16 = v14 * v15;	// L19, [7,11)
    double v17 = v8 + v16;	// L20, [11,16)
    double v18 = v0[((v4 * 128) + 65)];	// L21, [5,7)
    double v19 = v14 * v18;	// L22, [7,11)
    double v20 = v12 + v19;	// L23, [11,16)
    double v21 = v1[2];	// L24, [10,12)
    double v22 = v0[((v4 * 128) + 2)];	// L25, [10,12)
    double v23 = v21 * v22;	// L26, [12,16)
    double v24 = v17 + v23;	// L27, [16,21)
    double v25 = v0[((v4 * 128) + 66)];	// L28, [10,12)
    double v26 = v21 * v25;	// L29, [12,16)
    double v27 = v20 + v26;	// L30, [16,21)
    double v28 = v1[3];	// L31, [15,17)
    double v29 = v0[((v4 * 128) + 3)];	// L32, [15,17)
    double v30 = v28 * v29;	// L33, [17,21)
    double v31 = v24 + v30;	// L34, [21,26)
    double v32 = v0[((v4 * 128) + 67)];	// L35, [15,17)
    double v33 = v28 * v32;	// L36, [17,21)
    double v34 = v27 + v33;	// L37, [21,26)
    double v35 = v1[4];	// L38, [20,22)
    double v36 = v0[((v4 * 128) + 4)];	// L39, [20,22)
    double v37 = v35 * v36;	// L40, [22,26)
    double v38 = v31 + v37;	// L41, [26,31)
    double v39 = v0[((v4 * 128) + 68)];	// L42, [20,22)
    double v40 = v35 * v39;	// L43, [22,26)
    double v41 = v34 + v40;	// L44, [26,31)
    double v42 = v1[5];	// L45, [25,27)
    double v43 = v0[((v4 * 128) + 5)];	// L46, [25,27)
    double v44 = v42 * v43;	// L47, [27,31)
    double v45 = v38 + v44;	// L48, [31,36)
    double v46 = v0[((v4 * 128) + 69)];	// L49, [25,27)
    double v47 = v42 * v46;	// L50, [27,31)
    double v48 = v41 + v47;	// L51, [31,36)
    double v49 = v1[6];	// L52, [30,32)
    double v50 = v0[((v4 * 128) + 6)];	// L53, [30,32)
    double v51 = v49 * v50;	// L54, [32,36)
    double v52 = v45 + v51;	// L55, [36,41)
    double v53 = v0[((v4 * 128) + 70)];	// L56, [30,32)
    double v54 = v49 * v53;	// L57, [32,36)
    double v55 = v48 + v54;	// L58, [36,41)
    double v56 = v1[7];	// L59, [35,37)
    double v57 = v0[((v4 * 128) + 7)];	// L60, [35,37)
    double v58 = v56 * v57;	// L61, [37,41)
    double v59 = v52 + v58;	// L62, [41,46)
    double v60 = v0[((v4 * 128) + 71)];	// L63, [35,37)
    double v61 = v56 * v60;	// L64, [37,41)
    double v62 = v55 + v61;	// L65, [41,46)
    double v63 = v1[8];	// L66, [40,42)
    double v64 = v0[((v4 * 128) + 8)];	// L67, [40,42)
    double v65 = v63 * v64;	// L68, [42,46)
    double v66 = v59 + v65;	// L69, [46,51)
    double v67 = v0[((v4 * 128) + 72)];	// L70, [40,42)
    double v68 = v63 * v67;	// L71, [42,46)
    double v69 = v62 + v68;	// L72, [46,51)
    double v70 = v1[9];	// L73, [45,47)
    double v71 = v0[((v4 * 128) + 9)];	// L74, [45,47)
    double v72 = v70 * v71;	// L75, [47,51)
    double v73 = v66 + v72;	// L76, [51,56)
    double v74 = v0[((v4 * 128) + 73)];	// L77, [45,47)
    double v75 = v70 * v74;	// L78, [47,51)
    double v76 = v69 + v75;	// L79, [51,56)
    double v77 = v1[10];	// L80, [50,52)
    double v78 = v0[((v4 * 128) + 10)];	// L81, [50,52)
    double v79 = v77 * v78;	// L82, [52,56)
    double v80 = v73 + v79;	// L83, [56,61)
    double v81 = v0[((v4 * 128) + 74)];	// L84, [50,52)
    double v82 = v77 * v81;	// L85, [52,56)
    double v83 = v76 + v82;	// L86, [56,61)
    double v84 = v1[11];	// L87, [55,57)
    double v85 = v0[((v4 * 128) + 11)];	// L88, [55,57)
    double v86 = v84 * v85;	// L89, [57,61)
    double v87 = v80 + v86;	// L90, [61,66)
    double v88 = v0[((v4 * 128) + 75)];	// L91, [55,57)
    double v89 = v84 * v88;	// L92, [57,61)
    double v90 = v83 + v89;	// L93, [61,66)
    double v91 = v1[12];	// L94, [60,62)
    double v92 = v0[((v4 * 128) + 12)];	// L95, [60,62)
    double v93 = v91 * v92;	// L96, [62,66)
    double v94 = v87 + v93;	// L97, [66,71)
    double v95 = v0[((v4 * 128) + 76)];	// L98, [60,62)
    double v96 = v91 * v95;	// L99, [62,66)
    double v97 = v90 + v96;	// L100, [66,71)
    double v98 = v1[13];	// L101, [65,67)
    double v99 = v0[((v4 * 128) + 13)];	// L102, [65,67)
    double v100 = v98 * v99;	// L103, [67,71)
    double v101 = v94 + v100;	// L104, [71,76)
    double v102 = v0[((v4 * 128) + 77)];	// L105, [65,67)
    double v103 = v98 * v102;	// L106, [67,71)
    double v104 = v97 + v103;	// L107, [71,76)
    double v105 = v1[14];	// L108, [70,72)
    double v106 = v0[((v4 * 128) + 14)];	// L109, [70,72)
    double v107 = v105 * v106;	// L110, [72,76)
    double v108 = v101 + v107;	// L111, [76,81)
    double v109 = v0[((v4 * 128) + 78)];	// L112, [70,72)
    double v110 = v105 * v109;	// L113, [72,76)
    double v111 = v104 + v110;	// L114, [76,81)
    double v112 = v1[15];	// L115, [75,77)
    double v113 = v0[((v4 * 128) + 15)];	// L116, [75,77)
    double v114 = v112 * v113;	// L117, [77,81)
    double v115 = v108 + v114;	// L118, [81,86)
    double v116 = v0[((v4 * 128) + 79)];	// L119, [75,77)
    double v117 = v112 * v116;	// L120, [77,81)
    double v118 = v111 + v117;	// L121, [81,86)
    double v119 = v1[16];	// L122, [80,82)
    double v120 = v0[((v4 * 128) + 16)];	// L123, [80,82)
    double v121 = v119 * v120;	// L124, [82,86)
    double v122 = v115 + v121;	// L125, [86,91)
    double v123 = v0[((v4 * 128) + 80)];	// L126, [80,82)
    double v124 = v119 * v123;	// L127, [82,86)
    double v125 = v118 + v124;	// L128, [86,91)
    double v126 = v1[17];	// L129, [85,87)
    double v127 = v0[((v4 * 128) + 17)];	// L130, [85,87)
    double v128 = v126 * v127;	// L131, [87,91)
    double v129 = v122 + v128;	// L132, [91,96)
    double v130 = v0[((v4 * 128) + 81)];	// L133, [85,87)
    double v131 = v126 * v130;	// L134, [87,91)
    double v132 = v125 + v131;	// L135, [91,96)
    double v133 = v1[18];	// L136, [90,92)
    double v134 = v0[((v4 * 128) + 18)];	// L137, [90,92)
    double v135 = v133 * v134;	// L138, [92,96)
    double v136 = v129 + v135;	// L139, [96,101)
    double v137 = v0[((v4 * 128) + 82)];	// L140, [90,92)
    double v138 = v133 * v137;	// L141, [92,96)
    double v139 = v132 + v138;	// L142, [96,101)
    double v140 = v1[19];	// L143, [95,97)
    double v141 = v0[((v4 * 128) + 19)];	// L144, [95,97)
    double v142 = v140 * v141;	// L145, [97,101)
    double v143 = v136 + v142;	// L146, [101,106)
    double v144 = v0[((v4 * 128) + 83)];	// L147, [95,97)
    double v145 = v140 * v144;	// L148, [97,101)
    double v146 = v139 + v145;	// L149, [101,106)
    double v147 = v1[20];	// L150, [100,102)
    double v148 = v0[((v4 * 128) + 20)];	// L151, [100,102)
    double v149 = v147 * v148;	// L152, [102,106)
    double v150 = v143 + v149;	// L153, [106,111)
    double v151 = v0[((v4 * 128) + 84)];	// L154, [100,102)
    double v152 = v147 * v151;	// L155, [102,106)
    double v153 = v146 + v152;	// L156, [106,111)
    double v154 = v1[21];	// L157, [105,107)
    double v155 = v0[((v4 * 128) + 21)];	// L158, [105,107)
    double v156 = v154 * v155;	// L159, [107,111)
    double v157 = v150 + v156;	// L160, [111,116)
    double v158 = v0[((v4 * 128) + 85)];	// L161, [105,107)
    double v159 = v154 * v158;	// L162, [107,111)
    double v160 = v153 + v159;	// L163, [111,116)
    double v161 = v1[22];	// L164, [110,112)
    double v162 = v0[((v4 * 128) + 22)];	// L165, [110,112)
    double v163 = v161 * v162;	// L166, [112,116)
    double v164 = v157 + v163;	// L167, [116,121)
    double v165 = v0[((v4 * 128) + 86)];	// L168, [110,112)
    double v166 = v161 * v165;	// L169, [112,116)
    double v167 = v160 + v166;	// L170, [116,121)
    double v168 = v1[23];	// L171, [115,117)
    double v169 = v0[((v4 * 128) + 23)];	// L172, [115,117)
    double v170 = v168 * v169;	// L173, [117,121)
    double v171 = v164 + v170;	// L174, [121,126)
    double v172 = v0[((v4 * 128) + 87)];	// L175, [115,117)
    double v173 = v168 * v172;	// L176, [117,121)
    double v174 = v167 + v173;	// L177, [121,126)
    double v175 = v1[24];	// L178, [120,122)
    double v176 = v0[((v4 * 128) + 24)];	// L179, [120,122)
    double v177 = v175 * v176;	// L180, [122,126)
    double v178 = v171 + v177;	// L181, [126,131)
    double v179 = v0[((v4 * 128) + 88)];	// L182, [120,122)
    double v180 = v175 * v179;	// L183, [122,126)
    double v181 = v174 + v180;	// L184, [126,131)
    double v182 = v1[25];	// L185, [125,127)
    double v183 = v0[((v4 * 128) + 25)];	// L186, [125,127)
    double v184 = v182 * v183;	// L187, [127,131)
    double v185 = v178 + v184;	// L188, [131,136)
    double v186 = v0[((v4 * 128) + 89)];	// L189, [125,127)
    double v187 = v182 * v186;	// L190, [127,131)
    double v188 = v181 + v187;	// L191, [131,136)
    double v189 = v1[26];	// L192, [130,132)
    double v190 = v0[((v4 * 128) + 26)];	// L193, [130,132)
    double v191 = v189 * v190;	// L194, [132,136)
    double v192 = v185 + v191;	// L195, [136,141)
    double v193 = v0[((v4 * 128) + 90)];	// L196, [130,132)
    double v194 = v189 * v193;	// L197, [132,136)
    double v195 = v188 + v194;	// L198, [136,141)
    double v196 = v1[27];	// L199, [135,137)
    double v197 = v0[((v4 * 128) + 27)];	// L200, [135,137)
    double v198 = v196 * v197;	// L201, [137,141)
    double v199 = v192 + v198;	// L202, [141,146)
    double v200 = v0[((v4 * 128) + 91)];	// L203, [135,137)
    double v201 = v196 * v200;	// L204, [137,141)
    double v202 = v195 + v201;	// L205, [141,146)
    double v203 = v1[28];	// L206, [140,142)
    double v204 = v0[((v4 * 128) + 28)];	// L207, [140,142)
    double v205 = v203 * v204;	// L208, [142,146)
    double v206 = v199 + v205;	// L209, [146,151)
    double v207 = v0[((v4 * 128) + 92)];	// L210, [140,142)
    double v208 = v203 * v207;	// L211, [142,146)
    double v209 = v202 + v208;	// L212, [146,151)
    double v210 = v1[29];	// L213, [145,147)
    double v211 = v0[((v4 * 128) + 29)];	// L214, [145,147)
    double v212 = v210 * v211;	// L215, [147,151)
    double v213 = v206 + v212;	// L216, [151,156)
    double v214 = v0[((v4 * 128) + 93)];	// L217, [145,147)
    double v215 = v210 * v214;	// L218, [147,151)
    double v216 = v209 + v215;	// L219, [151,156)
    double v217 = v1[30];	// L220, [150,152)
    double v218 = v0[((v4 * 128) + 30)];	// L221, [150,152)
    double v219 = v217 * v218;	// L222, [152,156)
    double v220 = v213 + v219;	// L223, [156,161)
    double v221 = v0[((v4 * 128) + 94)];	// L224, [150,152)
    double v222 = v217 * v221;	// L225, [152,156)
    double v223 = v216 + v222;	// L226, [156,161)
    double v224 = v1[31];	// L227, [155,157)
    double v225 = v0[((v4 * 128) + 31)];	// L228, [155,157)
    double v226 = v224 * v225;	// L229, [157,161)
    double v227 = v220 + v226;	// L230, [161,166)
    double v228 = v0[((v4 * 128) + 95)];	// L231, [155,157)
    double v229 = v224 * v228;	// L232, [157,161)
    double v230 = v223 + v229;	// L233, [161,166)
    double v231 = v1[32];	// L234, [160,162)
    double v232 = v0[((v4 * 128) + 32)];	// L235, [160,162)
    double v233 = v231 * v232;	// L236, [162,166)
    double v234 = v227 + v233;	// L237, [166,171)
    double v235 = v0[((v4 * 128) + 96)];	// L238, [160,162)
    double v236 = v231 * v235;	// L239, [162,166)
    double v237 = v230 + v236;	// L240, [166,171)
    double v238 = v1[33];	// L241, [165,167)
    double v239 = v0[((v4 * 128) + 33)];	// L242, [165,167)
    double v240 = v238 * v239;	// L243, [167,171)
    double v241 = v234 + v240;	// L244, [171,176)
    double v242 = v0[((v4 * 128) + 97)];	// L245, [165,167)
    double v243 = v238 * v242;	// L246, [167,171)
    double v244 = v237 + v243;	// L247, [171,176)
    double v245 = v1[34];	// L248, [170,172)
    double v246 = v0[((v4 * 128) + 34)];	// L249, [170,172)
    double v247 = v245 * v246;	// L250, [172,176)
    double v248 = v241 + v247;	// L251, [176,181)
    double v249 = v0[((v4 * 128) + 98)];	// L252, [170,172)
    double v250 = v245 * v249;	// L253, [172,176)
    double v251 = v244 + v250;	// L254, [176,181)
    double v252 = v1[35];	// L255, [175,177)
    double v253 = v0[((v4 * 128) + 35)];	// L256, [175,177)
    double v254 = v252 * v253;	// L257, [177,181)
    double v255 = v248 + v254;	// L258, [181,186)
    double v256 = v0[((v4 * 128) + 99)];	// L259, [175,177)
    double v257 = v252 * v256;	// L260, [177,181)
    double v258 = v251 + v257;	// L261, [181,186)
    double v259 = v1[36];	// L262, [180,182)
    double v260 = v0[((v4 * 128) + 36)];	// L263, [180,182)
    double v261 = v259 * v260;	// L264, [182,186)
    double v262 = v255 + v261;	// L265, [186,191)
    double v263 = v0[((v4 * 128) + 100)];	// L266, [180,182)
    double v264 = v259 * v263;	// L267, [182,186)
    double v265 = v258 + v264;	// L268, [186,191)
    double v266 = v1[37];	// L269, [185,187)
    double v267 = v0[((v4 * 128) + 37)];	// L270, [185,187)
    double v268 = v266 * v267;	// L271, [187,191)
    double v269 = v262 + v268;	// L272, [191,196)
    double v270 = v0[((v4 * 128) + 101)];	// L273, [185,187)
    double v271 = v266 * v270;	// L274, [187,191)
    double v272 = v265 + v271;	// L275, [191,196)
    double v273 = v1[38];	// L276, [190,192)
    double v274 = v0[((v4 * 128) + 38)];	// L277, [190,192)
    double v275 = v273 * v274;	// L278, [192,196)
    double v276 = v269 + v275;	// L279, [196,201)
    double v277 = v0[((v4 * 128) + 102)];	// L280, [190,192)
    double v278 = v273 * v277;	// L281, [192,196)
    double v279 = v272 + v278;	// L282, [196,201)
    double v280 = v1[39];	// L283, [195,197)
    double v281 = v0[((v4 * 128) + 39)];	// L284, [195,197)
    double v282 = v280 * v281;	// L285, [197,201)
    double v283 = v276 + v282;	// L286, [201,206)
    double v284 = v0[((v4 * 128) + 103)];	// L287, [195,197)
    double v285 = v280 * v284;	// L288, [197,201)
    double v286 = v279 + v285;	// L289, [201,206)
    double v287 = v1[40];	// L290, [200,202)
    double v288 = v0[((v4 * 128) + 40)];	// L291, [200,202)
    double v289 = v287 * v288;	// L292, [202,206)
    double v290 = v283 + v289;	// L293, [206,211)
    double v291 = v0[((v4 * 128) + 104)];	// L294, [200,202)
    double v292 = v287 * v291;	// L295, [202,206)
    double v293 = v286 + v292;	// L296, [206,211)
    double v294 = v1[41];	// L297, [205,207)
    double v295 = v0[((v4 * 128) + 41)];	// L298, [205,207)
    double v296 = v294 * v295;	// L299, [207,211)
    double v297 = v290 + v296;	// L300, [211,216)
    double v298 = v0[((v4 * 128) + 105)];	// L301, [205,207)
    double v299 = v294 * v298;	// L302, [207,211)
    double v300 = v293 + v299;	// L303, [211,216)
    double v301 = v1[42];	// L304, [210,212)
    double v302 = v0[((v4 * 128) + 42)];	// L305, [210,212)
    double v303 = v301 * v302;	// L306, [212,216)
    double v304 = v297 + v303;	// L307, [216,221)
    double v305 = v0[((v4 * 128) + 106)];	// L308, [210,212)
    double v306 = v301 * v305;	// L309, [212,216)
    double v307 = v300 + v306;	// L310, [216,221)
    double v308 = v1[43];	// L311, [215,217)
    double v309 = v0[((v4 * 128) + 43)];	// L312, [215,217)
    double v310 = v308 * v309;	// L313, [217,221)
    double v311 = v304 + v310;	// L314, [221,226)
    double v312 = v0[((v4 * 128) + 107)];	// L315, [215,217)
    double v313 = v308 * v312;	// L316, [217,221)
    double v314 = v307 + v313;	// L317, [221,226)
    double v315 = v1[44];	// L318, [220,222)
    double v316 = v0[((v4 * 128) + 44)];	// L319, [220,222)
    double v317 = v315 * v316;	// L320, [222,226)
    double v318 = v311 + v317;	// L321, [226,231)
    double v319 = v0[((v4 * 128) + 108)];	// L322, [220,222)
    double v320 = v315 * v319;	// L323, [222,226)
    double v321 = v314 + v320;	// L324, [226,231)
    double v322 = v1[45];	// L325, [225,227)
    double v323 = v0[((v4 * 128) + 45)];	// L326, [225,227)
    double v324 = v322 * v323;	// L327, [227,231)
    double v325 = v318 + v324;	// L328, [231,236)
    double v326 = v0[((v4 * 128) + 109)];	// L329, [225,227)
    double v327 = v322 * v326;	// L330, [227,231)
    double v328 = v321 + v327;	// L331, [231,236)
    double v329 = v1[46];	// L332, [230,232)
    double v330 = v0[((v4 * 128) + 46)];	// L333, [230,232)
    double v331 = v329 * v330;	// L334, [232,236)
    double v332 = v325 + v331;	// L335, [236,241)
    double v333 = v0[((v4 * 128) + 110)];	// L336, [230,232)
    double v334 = v329 * v333;	// L337, [232,236)
    double v335 = v328 + v334;	// L338, [236,241)
    double v336 = v1[47];	// L339, [235,237)
    double v337 = v0[((v4 * 128) + 47)];	// L340, [235,237)
    double v338 = v336 * v337;	// L341, [237,241)
    double v339 = v332 + v338;	// L342, [241,246)
    double v340 = v0[((v4 * 128) + 111)];	// L343, [235,237)
    double v341 = v336 * v340;	// L344, [237,241)
    double v342 = v335 + v341;	// L345, [241,246)
    double v343 = v1[48];	// L346, [240,242)
    double v344 = v0[((v4 * 128) + 48)];	// L347, [240,242)
    double v345 = v343 * v344;	// L348, [242,246)
    double v346 = v339 + v345;	// L349, [246,251)
    double v347 = v0[((v4 * 128) + 112)];	// L350, [240,242)
    double v348 = v343 * v347;	// L351, [242,246)
    double v349 = v342 + v348;	// L352, [246,251)
    double v350 = v1[49];	// L353, [245,247)
    double v351 = v0[((v4 * 128) + 49)];	// L354, [245,247)
    double v352 = v350 * v351;	// L355, [247,251)
    double v353 = v346 + v352;	// L356, [251,256)
    double v354 = v0[((v4 * 128) + 113)];	// L357, [245,247)
    double v355 = v350 * v354;	// L358, [247,251)
    double v356 = v349 + v355;	// L359, [251,256)
    double v357 = v1[50];	// L360, [250,252)
    double v358 = v0[((v4 * 128) + 50)];	// L361, [250,252)
    double v359 = v357 * v358;	// L362, [252,256)
    double v360 = v353 + v359;	// L363, [256,261)
    double v361 = v0[((v4 * 128) + 114)];	// L364, [250,252)
    double v362 = v357 * v361;	// L365, [252,256)
    double v363 = v356 + v362;	// L366, [256,261)
    double v364 = v1[51];	// L367, [255,257)
    double v365 = v0[((v4 * 128) + 51)];	// L368, [255,257)
    double v366 = v364 * v365;	// L369, [257,261)
    double v367 = v360 + v366;	// L370, [261,266)
    double v368 = v0[((v4 * 128) + 115)];	// L371, [255,257)
    double v369 = v364 * v368;	// L372, [257,261)
    double v370 = v363 + v369;	// L373, [261,266)
    double v371 = v1[52];	// L374, [260,262)
    double v372 = v0[((v4 * 128) + 52)];	// L375, [260,262)
    double v373 = v371 * v372;	// L376, [262,266)
    double v374 = v367 + v373;	// L377, [266,271)
    double v375 = v0[((v4 * 128) + 116)];	// L378, [260,262)
    double v376 = v371 * v375;	// L379, [262,266)
    double v377 = v370 + v376;	// L380, [266,271)
    double v378 = v1[53];	// L381, [265,267)
    double v379 = v0[((v4 * 128) + 53)];	// L382, [265,267)
    double v380 = v378 * v379;	// L383, [267,271)
    double v381 = v374 + v380;	// L384, [271,276)
    double v382 = v0[((v4 * 128) + 117)];	// L385, [265,267)
    double v383 = v378 * v382;	// L386, [267,271)
    double v384 = v377 + v383;	// L387, [271,276)
    double v385 = v1[54];	// L388, [270,272)
    double v386 = v0[((v4 * 128) + 54)];	// L389, [270,272)
    double v387 = v385 * v386;	// L390, [272,276)
    double v388 = v381 + v387;	// L391, [276,281)
    double v389 = v0[((v4 * 128) + 118)];	// L392, [270,272)
    double v390 = v385 * v389;	// L393, [272,276)
    double v391 = v384 + v390;	// L394, [276,281)
    double v392 = v1[55];	// L395, [275,277)
    double v393 = v0[((v4 * 128) + 55)];	// L396, [275,277)
    double v394 = v392 * v393;	// L397, [277,281)
    double v395 = v388 + v394;	// L398, [281,286)
    double v396 = v0[((v4 * 128) + 119)];	// L399, [275,277)
    double v397 = v392 * v396;	// L400, [277,281)
    double v398 = v391 + v397;	// L401, [281,286)
    double v399 = v1[56];	// L402, [280,282)
    double v400 = v0[((v4 * 128) + 56)];	// L403, [280,282)
    double v401 = v399 * v400;	// L404, [282,286)
    double v402 = v395 + v401;	// L405, [286,291)
    double v403 = v0[((v4 * 128) + 120)];	// L406, [280,282)
    double v404 = v399 * v403;	// L407, [282,286)
    double v405 = v398 + v404;	// L408, [286,291)
    double v406 = v1[57];	// L409, [285,287)
    double v407 = v0[((v4 * 128) + 57)];	// L410, [285,287)
    double v408 = v406 * v407;	// L411, [287,291)
    double v409 = v402 + v408;	// L412, [291,296)
    double v410 = v0[((v4 * 128) + 121)];	// L413, [285,287)
    double v411 = v406 * v410;	// L414, [287,291)
    double v412 = v405 + v411;	// L415, [291,296)
    double v413 = v1[58];	// L416, [290,292)
    double v414 = v0[((v4 * 128) + 58)];	// L417, [290,292)
    double v415 = v413 * v414;	// L418, [292,296)
    double v416 = v409 + v415;	// L419, [296,301)
    double v417 = v0[((v4 * 128) + 122)];	// L420, [290,292)
    double v418 = v413 * v417;	// L421, [292,296)
    double v419 = v412 + v418;	// L422, [296,301)
    double v420 = v1[59];	// L423, [295,297)
    double v421 = v0[((v4 * 128) + 59)];	// L424, [295,297)
    double v422 = v420 * v421;	// L425, [297,301)
    double v423 = v416 + v422;	// L426, [301,306)
    double v424 = v0[((v4 * 128) + 123)];	// L427, [295,297)
    double v425 = v420 * v424;	// L428, [297,301)
    double v426 = v419 + v425;	// L429, [301,306)
    double v427 = v1[60];	// L430, [300,302)
    double v428 = v0[((v4 * 128) + 60)];	// L431, [300,302)
    double v429 = v427 * v428;	// L432, [302,306)
    double v430 = v423 + v429;	// L433, [306,311)
    double v431 = v0[((v4 * 128) + 124)];	// L434, [300,302)
    double v432 = v427 * v431;	// L435, [302,306)
    double v433 = v426 + v432;	// L436, [306,311)
    double v434 = v1[61];	// L437, [305,307)
    double v435 = v0[((v4 * 128) + 61)];	// L438, [305,307)
    double v436 = v434 * v435;	// L439, [307,311)
    double v437 = v430 + v436;	// L440, [311,316)
    double v438 = v0[((v4 * 128) + 125)];	// L441, [305,307)
    double v439 = v434 * v438;	// L442, [307,311)
    double v440 = v433 + v439;	// L443, [311,316)
    double v441 = v1[62];	// L444, [310,312)
    double v442 = v0[((v4 * 128) + 62)];	// L445, [310,312)
    double v443 = v441 * v442;	// L446, [312,316)
    double v444 = v437 + v443;	// L447, [316,321)
    double v445 = v0[((v4 * 128) + 126)];	// L448, [310,312)
    double v446 = v441 * v445;	// L449, [312,316)
    double v447 = v440 + v446;	// L450, [316,321)
    double v448 = v1[63];	// L451, [315,317)
    double v449 = v0[((v4 * 128) + 63)];	// L452, [315,317)
    double v450 = v448 * v449;	// L453, [317,321)
    double v451 = v444 + v450;	// L454, [321,326)
    double v452 = v451 * v9;	// L455, [326,330)
    v2[(v4 * 2)] = v452;	// L456, [330,331)
    double v453 = v0[((v4 * 128) + 127)];	// L457, [315,317)
    double v454 = v448 * v453;	// L458, [317,321)
    double v455 = v447 + v454;	// L459, [321,326)
    double v456 = v455 * v13;	// L460, [326,330)
    v2[((v4 * 2) + 1)] = v456;	// L461, [330,331)
  }
}

