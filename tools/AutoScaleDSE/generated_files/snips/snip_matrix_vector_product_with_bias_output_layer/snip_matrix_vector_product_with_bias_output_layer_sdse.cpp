
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>

using namespace std;

/// This is top function.
/// Latency=334, interval=334
/// DSP=320
void matrix_vector_product_with_bias_output_layer(
  double v0[3],
  double v1[192],
  double v2[3],
  double v3[64],
  double v4[1]
) {	// L4, [0,334)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS interface bram port=v1
  #pragma HLS interface bram port=v2

  #pragma HLS resource variable=v0 core=ram_1p_bram

  #pragma HLS array_partition variable=v1 cyclic factor=64 dim=1
  #pragma HLS resource variable=v1 core=ram_s2p_bram

  #pragma HLS resource variable=v2 core=ram_s2p_bram

  #pragma HLS array_partition variable=v3 cyclic factor=64 dim=1

  for (int v5 = 0; v5 < 3; v5 += 1) {	// L7, [0,331), iterCycle=327, II=1
    #pragma HLS pipeline II=1
    double v6 = v1[(v5 * 64)];	// L8, [0,2)
    double v7 = v3[0];	// L9, [0,2)
    double v8 = v6 * v7;	// L10, [2,6)
    double v9 = v8 + 0.000000;	// L11, [6,11)
    double v10 = v1[((v5 * 64) + 1)];	// L12, [5,7)
    double v11 = v3[1];	// L13, [5,7)
    double v12 = v10 * v11;	// L14, [7,11)
    double v13 = v9 + v12;	// L15, [11,16)
    double v14 = v1[((v5 * 64) + 2)];	// L16, [10,12)
    double v15 = v3[2];	// L17, [10,12)
    double v16 = v14 * v15;	// L18, [12,16)
    double v17 = v13 + v16;	// L19, [16,21)
    double v18 = v1[((v5 * 64) + 3)];	// L20, [15,17)
    double v19 = v3[3];	// L21, [15,17)
    double v20 = v18 * v19;	// L22, [17,21)
    double v21 = v17 + v20;	// L23, [21,26)
    double v22 = v1[((v5 * 64) + 4)];	// L24, [20,22)
    double v23 = v3[4];	// L25, [20,22)
    double v24 = v22 * v23;	// L26, [22,26)
    double v25 = v21 + v24;	// L27, [26,31)
    double v26 = v1[((v5 * 64) + 5)];	// L28, [25,27)
    double v27 = v3[5];	// L29, [25,27)
    double v28 = v26 * v27;	// L30, [27,31)
    double v29 = v25 + v28;	// L31, [31,36)
    double v30 = v1[((v5 * 64) + 6)];	// L32, [30,32)
    double v31 = v3[6];	// L33, [30,32)
    double v32 = v30 * v31;	// L34, [32,36)
    double v33 = v29 + v32;	// L35, [36,41)
    double v34 = v1[((v5 * 64) + 7)];	// L36, [35,37)
    double v35 = v3[7];	// L37, [35,37)
    double v36 = v34 * v35;	// L38, [37,41)
    double v37 = v33 + v36;	// L39, [41,46)
    double v38 = v1[((v5 * 64) + 8)];	// L40, [40,42)
    double v39 = v3[8];	// L41, [40,42)
    double v40 = v38 * v39;	// L42, [42,46)
    double v41 = v37 + v40;	// L43, [46,51)
    double v42 = v1[((v5 * 64) + 9)];	// L44, [45,47)
    double v43 = v3[9];	// L45, [45,47)
    double v44 = v42 * v43;	// L46, [47,51)
    double v45 = v41 + v44;	// L47, [51,56)
    double v46 = v1[((v5 * 64) + 10)];	// L48, [50,52)
    double v47 = v3[10];	// L49, [50,52)
    double v48 = v46 * v47;	// L50, [52,56)
    double v49 = v45 + v48;	// L51, [56,61)
    double v50 = v1[((v5 * 64) + 11)];	// L52, [55,57)
    double v51 = v3[11];	// L53, [55,57)
    double v52 = v50 * v51;	// L54, [57,61)
    double v53 = v49 + v52;	// L55, [61,66)
    double v54 = v1[((v5 * 64) + 12)];	// L56, [60,62)
    double v55 = v3[12];	// L57, [60,62)
    double v56 = v54 * v55;	// L58, [62,66)
    double v57 = v53 + v56;	// L59, [66,71)
    double v58 = v1[((v5 * 64) + 13)];	// L60, [65,67)
    double v59 = v3[13];	// L61, [65,67)
    double v60 = v58 * v59;	// L62, [67,71)
    double v61 = v57 + v60;	// L63, [71,76)
    double v62 = v1[((v5 * 64) + 14)];	// L64, [70,72)
    double v63 = v3[14];	// L65, [70,72)
    double v64 = v62 * v63;	// L66, [72,76)
    double v65 = v61 + v64;	// L67, [76,81)
    double v66 = v1[((v5 * 64) + 15)];	// L68, [75,77)
    double v67 = v3[15];	// L69, [75,77)
    double v68 = v66 * v67;	// L70, [77,81)
    double v69 = v65 + v68;	// L71, [81,86)
    double v70 = v1[((v5 * 64) + 16)];	// L72, [80,82)
    double v71 = v3[16];	// L73, [80,82)
    double v72 = v70 * v71;	// L74, [82,86)
    double v73 = v69 + v72;	// L75, [86,91)
    double v74 = v1[((v5 * 64) + 17)];	// L76, [85,87)
    double v75 = v3[17];	// L77, [85,87)
    double v76 = v74 * v75;	// L78, [87,91)
    double v77 = v73 + v76;	// L79, [91,96)
    double v78 = v1[((v5 * 64) + 18)];	// L80, [90,92)
    double v79 = v3[18];	// L81, [90,92)
    double v80 = v78 * v79;	// L82, [92,96)
    double v81 = v77 + v80;	// L83, [96,101)
    double v82 = v1[((v5 * 64) + 19)];	// L84, [95,97)
    double v83 = v3[19];	// L85, [95,97)
    double v84 = v82 * v83;	// L86, [97,101)
    double v85 = v81 + v84;	// L87, [101,106)
    double v86 = v1[((v5 * 64) + 20)];	// L88, [100,102)
    double v87 = v3[20];	// L89, [100,102)
    double v88 = v86 * v87;	// L90, [102,106)
    double v89 = v85 + v88;	// L91, [106,111)
    double v90 = v1[((v5 * 64) + 21)];	// L92, [105,107)
    double v91 = v3[21];	// L93, [105,107)
    double v92 = v90 * v91;	// L94, [107,111)
    double v93 = v89 + v92;	// L95, [111,116)
    double v94 = v1[((v5 * 64) + 22)];	// L96, [110,112)
    double v95 = v3[22];	// L97, [110,112)
    double v96 = v94 * v95;	// L98, [112,116)
    double v97 = v93 + v96;	// L99, [116,121)
    double v98 = v1[((v5 * 64) + 23)];	// L100, [115,117)
    double v99 = v3[23];	// L101, [115,117)
    double v100 = v98 * v99;	// L102, [117,121)
    double v101 = v97 + v100;	// L103, [121,126)
    double v102 = v1[((v5 * 64) + 24)];	// L104, [120,122)
    double v103 = v3[24];	// L105, [120,122)
    double v104 = v102 * v103;	// L106, [122,126)
    double v105 = v101 + v104;	// L107, [126,131)
    double v106 = v1[((v5 * 64) + 25)];	// L108, [125,127)
    double v107 = v3[25];	// L109, [125,127)
    double v108 = v106 * v107;	// L110, [127,131)
    double v109 = v105 + v108;	// L111, [131,136)
    double v110 = v1[((v5 * 64) + 26)];	// L112, [130,132)
    double v111 = v3[26];	// L113, [130,132)
    double v112 = v110 * v111;	// L114, [132,136)
    double v113 = v109 + v112;	// L115, [136,141)
    double v114 = v1[((v5 * 64) + 27)];	// L116, [135,137)
    double v115 = v3[27];	// L117, [135,137)
    double v116 = v114 * v115;	// L118, [137,141)
    double v117 = v113 + v116;	// L119, [141,146)
    double v118 = v1[((v5 * 64) + 28)];	// L120, [140,142)
    double v119 = v3[28];	// L121, [140,142)
    double v120 = v118 * v119;	// L122, [142,146)
    double v121 = v117 + v120;	// L123, [146,151)
    double v122 = v1[((v5 * 64) + 29)];	// L124, [145,147)
    double v123 = v3[29];	// L125, [145,147)
    double v124 = v122 * v123;	// L126, [147,151)
    double v125 = v121 + v124;	// L127, [151,156)
    double v126 = v1[((v5 * 64) + 30)];	// L128, [150,152)
    double v127 = v3[30];	// L129, [150,152)
    double v128 = v126 * v127;	// L130, [152,156)
    double v129 = v125 + v128;	// L131, [156,161)
    double v130 = v1[((v5 * 64) + 31)];	// L132, [155,157)
    double v131 = v3[31];	// L133, [155,157)
    double v132 = v130 * v131;	// L134, [157,161)
    double v133 = v129 + v132;	// L135, [161,166)
    double v134 = v1[((v5 * 64) + 32)];	// L136, [160,162)
    double v135 = v3[32];	// L137, [160,162)
    double v136 = v134 * v135;	// L138, [162,166)
    double v137 = v133 + v136;	// L139, [166,171)
    double v138 = v1[((v5 * 64) + 33)];	// L140, [165,167)
    double v139 = v3[33];	// L141, [165,167)
    double v140 = v138 * v139;	// L142, [167,171)
    double v141 = v137 + v140;	// L143, [171,176)
    double v142 = v1[((v5 * 64) + 34)];	// L144, [170,172)
    double v143 = v3[34];	// L145, [170,172)
    double v144 = v142 * v143;	// L146, [172,176)
    double v145 = v141 + v144;	// L147, [176,181)
    double v146 = v1[((v5 * 64) + 35)];	// L148, [175,177)
    double v147 = v3[35];	// L149, [175,177)
    double v148 = v146 * v147;	// L150, [177,181)
    double v149 = v145 + v148;	// L151, [181,186)
    double v150 = v1[((v5 * 64) + 36)];	// L152, [180,182)
    double v151 = v3[36];	// L153, [180,182)
    double v152 = v150 * v151;	// L154, [182,186)
    double v153 = v149 + v152;	// L155, [186,191)
    double v154 = v1[((v5 * 64) + 37)];	// L156, [185,187)
    double v155 = v3[37];	// L157, [185,187)
    double v156 = v154 * v155;	// L158, [187,191)
    double v157 = v153 + v156;	// L159, [191,196)
    double v158 = v1[((v5 * 64) + 38)];	// L160, [190,192)
    double v159 = v3[38];	// L161, [190,192)
    double v160 = v158 * v159;	// L162, [192,196)
    double v161 = v157 + v160;	// L163, [196,201)
    double v162 = v1[((v5 * 64) + 39)];	// L164, [195,197)
    double v163 = v3[39];	// L165, [195,197)
    double v164 = v162 * v163;	// L166, [197,201)
    double v165 = v161 + v164;	// L167, [201,206)
    double v166 = v1[((v5 * 64) + 40)];	// L168, [200,202)
    double v167 = v3[40];	// L169, [200,202)
    double v168 = v166 * v167;	// L170, [202,206)
    double v169 = v165 + v168;	// L171, [206,211)
    double v170 = v1[((v5 * 64) + 41)];	// L172, [205,207)
    double v171 = v3[41];	// L173, [205,207)
    double v172 = v170 * v171;	// L174, [207,211)
    double v173 = v169 + v172;	// L175, [211,216)
    double v174 = v1[((v5 * 64) + 42)];	// L176, [210,212)
    double v175 = v3[42];	// L177, [210,212)
    double v176 = v174 * v175;	// L178, [212,216)
    double v177 = v173 + v176;	// L179, [216,221)
    double v178 = v1[((v5 * 64) + 43)];	// L180, [215,217)
    double v179 = v3[43];	// L181, [215,217)
    double v180 = v178 * v179;	// L182, [217,221)
    double v181 = v177 + v180;	// L183, [221,226)
    double v182 = v1[((v5 * 64) + 44)];	// L184, [220,222)
    double v183 = v3[44];	// L185, [220,222)
    double v184 = v182 * v183;	// L186, [222,226)
    double v185 = v181 + v184;	// L187, [226,231)
    double v186 = v1[((v5 * 64) + 45)];	// L188, [225,227)
    double v187 = v3[45];	// L189, [225,227)
    double v188 = v186 * v187;	// L190, [227,231)
    double v189 = v185 + v188;	// L191, [231,236)
    double v190 = v1[((v5 * 64) + 46)];	// L192, [230,232)
    double v191 = v3[46];	// L193, [230,232)
    double v192 = v190 * v191;	// L194, [232,236)
    double v193 = v189 + v192;	// L195, [236,241)
    double v194 = v1[((v5 * 64) + 47)];	// L196, [235,237)
    double v195 = v3[47];	// L197, [235,237)
    double v196 = v194 * v195;	// L198, [237,241)
    double v197 = v193 + v196;	// L199, [241,246)
    double v198 = v1[((v5 * 64) + 48)];	// L200, [240,242)
    double v199 = v3[48];	// L201, [240,242)
    double v200 = v198 * v199;	// L202, [242,246)
    double v201 = v197 + v200;	// L203, [246,251)
    double v202 = v1[((v5 * 64) + 49)];	// L204, [245,247)
    double v203 = v3[49];	// L205, [245,247)
    double v204 = v202 * v203;	// L206, [247,251)
    double v205 = v201 + v204;	// L207, [251,256)
    double v206 = v1[((v5 * 64) + 50)];	// L208, [250,252)
    double v207 = v3[50];	// L209, [250,252)
    double v208 = v206 * v207;	// L210, [252,256)
    double v209 = v205 + v208;	// L211, [256,261)
    double v210 = v1[((v5 * 64) + 51)];	// L212, [255,257)
    double v211 = v3[51];	// L213, [255,257)
    double v212 = v210 * v211;	// L214, [257,261)
    double v213 = v209 + v212;	// L215, [261,266)
    double v214 = v1[((v5 * 64) + 52)];	// L216, [260,262)
    double v215 = v3[52];	// L217, [260,262)
    double v216 = v214 * v215;	// L218, [262,266)
    double v217 = v213 + v216;	// L219, [266,271)
    double v218 = v1[((v5 * 64) + 53)];	// L220, [265,267)
    double v219 = v3[53];	// L221, [265,267)
    double v220 = v218 * v219;	// L222, [267,271)
    double v221 = v217 + v220;	// L223, [271,276)
    double v222 = v1[((v5 * 64) + 54)];	// L224, [270,272)
    double v223 = v3[54];	// L225, [270,272)
    double v224 = v222 * v223;	// L226, [272,276)
    double v225 = v221 + v224;	// L227, [276,281)
    double v226 = v1[((v5 * 64) + 55)];	// L228, [275,277)
    double v227 = v3[55];	// L229, [275,277)
    double v228 = v226 * v227;	// L230, [277,281)
    double v229 = v225 + v228;	// L231, [281,286)
    double v230 = v1[((v5 * 64) + 56)];	// L232, [280,282)
    double v231 = v3[56];	// L233, [280,282)
    double v232 = v230 * v231;	// L234, [282,286)
    double v233 = v229 + v232;	// L235, [286,291)
    double v234 = v1[((v5 * 64) + 57)];	// L236, [285,287)
    double v235 = v3[57];	// L237, [285,287)
    double v236 = v234 * v235;	// L238, [287,291)
    double v237 = v233 + v236;	// L239, [291,296)
    double v238 = v1[((v5 * 64) + 58)];	// L240, [290,292)
    double v239 = v3[58];	// L241, [290,292)
    double v240 = v238 * v239;	// L242, [292,296)
    double v241 = v237 + v240;	// L243, [296,301)
    double v242 = v1[((v5 * 64) + 59)];	// L244, [295,297)
    double v243 = v3[59];	// L245, [295,297)
    double v244 = v242 * v243;	// L246, [297,301)
    double v245 = v241 + v244;	// L247, [301,306)
    double v246 = v1[((v5 * 64) + 60)];	// L248, [300,302)
    double v247 = v3[60];	// L249, [300,302)
    double v248 = v246 * v247;	// L250, [302,306)
    double v249 = v245 + v248;	// L251, [306,311)
    double v250 = v1[((v5 * 64) + 61)];	// L252, [305,307)
    double v251 = v3[61];	// L253, [305,307)
    double v252 = v250 * v251;	// L254, [307,311)
    double v253 = v249 + v252;	// L255, [311,316)
    double v254 = v1[((v5 * 64) + 62)];	// L256, [310,312)
    double v255 = v3[62];	// L257, [310,312)
    double v256 = v254 * v255;	// L258, [312,316)
    double v257 = v253 + v256;	// L259, [316,321)
    double v258 = v1[((v5 * 64) + 63)];	// L260, [315,317)
    double v259 = v3[63];	// L261, [315,317)
    double v260 = v258 * v259;	// L262, [317,321)
    double v261 = v257 + v260;	// L263, [321,326)
    v2[v5] = v261;	// L264, [326,327)
  }
  v4[0] = 42.424242;	// L266, [331,332)
}

